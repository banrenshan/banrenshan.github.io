import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as i,c,b as t,d as e,e as s,a}from"./app-DvhfW1jQ.js";const p={},d=a('<blockquote><p>RestClient为同步HTTP访问提供了更现代的API。对于异步和流式场景，请考虑响应式WebClient。</p></blockquote><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h2><p><code>RestTemplate</code>以经典<code>Spring Template</code>类的形式提供了一个高级的 <code>HTTP</code>客户端库。它公开了以下几组重载方法：</p><table><thead><tr><th style="text-align:left;">方法组</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>getForObject</code></td><td style="text-align:left;">GET请求</td></tr><tr><td style="text-align:left;"><code>getForEntity</code></td><td style="text-align:left;">使用GET检索 ResponseEntity（包含状态、标头和正文）。</td></tr><tr><td style="text-align:left;"><code>headForHeaders</code></td><td style="text-align:left;">使用HEAD检索资源的所有标头。</td></tr><tr><td style="text-align:left;"><code>postForLocation</code></td><td style="text-align:left;">使用POST创建一个新资源，并从响应中返回 Location 标头。</td></tr><tr><td style="text-align:left;"><code>postForObject</code></td><td style="text-align:left;">使用POST创建一个新资源，并从响应中返回表示形式。</td></tr><tr><td style="text-align:left;"><code>postForEntity</code></td><td style="text-align:left;">使用POST创建一个新资源，并从响应中返回表示形式。</td></tr><tr><td style="text-align:left;"><code>put</code></td><td style="text-align:left;">使用PUT创建或更新资源。</td></tr><tr><td style="text-align:left;"><code>patchForObject</code></td><td style="text-align:left;">使用PATCH更新资源，并从响应中返回表示。请注意，JDK HttpURLConnection不支持PATCH，但Apache HttpComponents和其他组件支持。</td></tr><tr><td style="text-align:left;"><code>delete</code></td><td style="text-align:left;">使用DELETE删除指定URI处的资源。</td></tr><tr><td style="text-align:left;"><code>optionsForAllow</code></td><td style="text-align:left;">使用ALLOW检索资源的允许HTTP方法。</td></tr><tr><td style="text-align:left;"><code>exchange</code></td><td style="text-align:left;">前面方法的更通用的版本，在需要时提供额外的灵活性。它接受 RequestEntity（包括HTTP方法、URL、头和正文作为输入）并返回 ResponseEntity。这些方法允许使用 ParameterizedTypeReference 而不是Class来指定具有泛型的响应类型。</td></tr><tr><td style="text-align:left;"><code>execute</code></td><td style="text-align:left;">执行请求的最通用方式，通过回调接口完全控制请求准备和响应提取。</td></tr></tbody></table><h2 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h2><p><code>RestTemplate</code>使用与<code>RestClient</code>相同的<code>HTTP</code>库抽象。默认情况下，它使用<code>SimpleClientHttpRequestFactory</code>，但这可以通过构造函数进行更改。</p><h2 id="body" tabindex="-1"><a class="header-anchor" href="#body"><span>Body</span></a></h2><p>传递到<code>RestTemplate</code>方法和从<code>RestTemplate</code>方法返回的对象在<code>HttpMessageConverter</code>的帮助下转换为HTTP消息和从HTTP消息转换而来。</p><h2 id="从resttemplate迁移到restclient" tabindex="-1"><a class="header-anchor" href="#从resttemplate迁移到restclient"><span>从RestTemplate迁移到RestClient</span></a></h2><p>下表显示了RestTemplate方法的RestClient等效项。它可以用于从后者迁移到前者:</p>',10),r=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},[t("code",null,"RestTemplate"),e(" method")]),t("th",{style:{"text-align":"left"}},[t("code",null,"RestClient"),e(" equivalent")])])],-1),u=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"getForObject(String,Class,Object…)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"get().uri(String,Object…).retrieve().body(Class)")])],-1),g=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"getForObject(String,Class,Map)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"get().uri(String,Map).retrieve().body(Class)")])],-1),k=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"getForObject(URI,Class)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"get().uri(URI).retrieve().body(Class)")])],-1),m=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"getForEntity(String,Class,Object…)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"get().uri(String,Object…).retrieve().toEntity(Class)")])],-1),y=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"getForEntity(String,Class,Map)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"get().uri(String,Map).retrieve().toEntity(Class)")])],-1),h=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"getForEntity(URI,Class)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"get().uri(URI).retrieve().toEntity(Class)")])],-1),b=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"headForHeaders(String,Object…)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"head().uri(String,Object…).retrieve().toBodilessEntity().getHeaders()")])],-1),f=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"headForHeaders(String,Map)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"head().uri(String,Map).retrieve().toBodilessEntity().getHeaders()")])],-1),v=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"headForHeaders(URI)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"head().uri(URI).retrieve().toBodilessEntity().getHeaders()")])],-1),x=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"postForLocation(String,Object,Object…)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"post().uri(String,Object…).body(Object).retrieve().toBodilessEntity().getLocation()")])],-1),_=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"postForLocation(String,Object,Map)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"post().uri(String,Map).body(Object).retrieve().toBodilessEntity().getLocation()")])],-1),T=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"postForLocation(URI,Object)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"post().uri(URI).body(Object).retrieve().toBodilessEntity().getLocation()")])],-1),R=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"postForObject(String,Object,Class,Object…)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"post().uri(String,Object…).body(Object).retrieve().body(Class)")])],-1),C=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"postForObject(String,Object,Class,Map)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"post().uri(String,Map).body(Object).retrieve().body(Class)")])],-1),S=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"postForObject(URI,Object,Class)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"post().uri(URI).body(Object).retrieve().body(Class)")])],-1),H=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"postForEntity(String,Object,Class,Object…)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"post().uri(String,Object…).body(Object).retrieve().toEntity(Class)")])],-1),j=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"postForEntity(String,Object,Class,Map)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"post().uri(String,Map).body(Object).retrieve().toEntity(Class)")])],-1),O=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"postForEntity(URI,Object,Class)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"post().uri(URI).body(Object).retrieve().toEntity(Class)")])],-1),E=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"put(String,Object,Object…)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"put().uri(String,Object…).body(Object).retrieve().toBodilessEntity()")])],-1),w=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"put(String,Object,Map)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"put().uri(String,Map).body(Object).retrieve().toBodilessEntity()")])],-1),P=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"put(URI,Object)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"put().uri(URI).body(Object).retrieve().toBodilessEntity()")])],-1),B=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"patchForObject(String,Object,Class,Object…)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"patch().uri(String,Object…).body(Object).retrieve().body(Class)")])],-1),M=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"patchForObject(String,Object,Class,Map)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"patch().uri(String,Map).body(Object).retrieve().body(Class)")])],-1),F=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"patchForObject(URI,Object,Class)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"patch().uri(URI).body(Object).retrieve().body(Class)")])],-1),I=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"delete(String,Object…)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"delete().uri(String,Object…).retrieve().toBodilessEntity()")])],-1),U=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"delete(String,Map)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"delete().uri(String,Map).retrieve().toBodilessEntity()")])],-1),q=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"delete(URI)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"delete().uri(URI).retrieve().toBodilessEntity()")])],-1),A=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"optionsForAllow(String,Object…)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"options().uri(String,Object…).retrieve().toBodilessEntity().getAllow()")])],-1),L=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"optionsForAllow(String,Map)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"options().uri(String,Map).retrieve().toBodilessEntity().getAllow()")])],-1),z=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"optionsForAllow(URI)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"options().uri(URI).retrieve().toBodilessEntity().getAllow()")])],-1),D=t("td",{style:{"text-align":"left"}},[t("code",null,"exchange(String,HttpMethod,HttpEntity,Class,Object…)")],-1),N={style:{"text-align":"left"}},W=t("code",null,"method(HttpMethod).uri(String,Object…).headers(Consumer<HttpHeaders>).body(Object).retrieve().toEntity(Class)",-1),Z={href:"https://docs.spring.io/spring-framework/reference/integration/rest-clients.html#_footnotedef_1",target:"_blank",rel:"noopener noreferrer"},J=t("td",{style:{"text-align":"left"}},[t("code",null,"exchange(String,HttpMethod,HttpEntity,Class,Map)")],-1),G={style:{"text-align":"left"}},V=t("code",null,"method(HttpMethod).uri(String,Map).headers(Consumer<HttpHeaders>).body(Object).retrieve().toEntity(Class)",-1),K={href:"https://docs.spring.io/spring-framework/reference/integration/rest-clients.html#_footnotedef_1",target:"_blank",rel:"noopener noreferrer"},Q=t("td",{style:{"text-align":"left"}},[t("code",null,"exchange(URI,HttpMethod,HttpEntity,Class)")],-1),X={style:{"text-align":"left"}},Y=t("code",null,"method(HttpMethod).uri(URI).headers(Consumer<HttpHeaders>).body(Object).retrieve().toEntity(Class)",-1),$={href:"https://docs.spring.io/spring-framework/reference/integration/rest-clients.html#_footnotedef_1",target:"_blank",rel:"noopener noreferrer"},tt=t("td",{style:{"text-align":"left"}},[t("code",null,"exchange(String,HttpMethod,HttpEntity,ParameterizedTypeReference,Object…)")],-1),et={style:{"text-align":"left"}},nt=t("code",null,"method(HttpMethod).uri(String,Object…).headers(Consumer<HttpHeaders>).body(Object).retrieve().toEntity(ParameterizedTypeReference)",-1),st={href:"https://docs.spring.io/spring-framework/reference/integration/rest-clients.html#_footnotedef_1",target:"_blank",rel:"noopener noreferrer"},at=t("td",{style:{"text-align":"left"}},[t("code",null,"exchange(String,HttpMethod,HttpEntity,ParameterizedTypeReference,Map)")],-1),lt={style:{"text-align":"left"}},ot=t("code",null,"method(HttpMethod).uri(String,Map).headers(Consumer<HttpHeaders>).body(Object).retrieve().toEntity(ParameterizedTypeReference)",-1),it={href:"https://docs.spring.io/spring-framework/reference/integration/rest-clients.html#_footnotedef_1",target:"_blank",rel:"noopener noreferrer"},ct=t("td",{style:{"text-align":"left"}},[t("code",null,"exchange(URI,HttpMethod,HttpEntity,ParameterizedTypeReference)")],-1),pt={style:{"text-align":"left"}},dt=t("code",null,"method(HttpMethod).uri(URI).headers(Consumer<HttpHeaders>).body(Object).retrieve().toEntity(ParameterizedTypeReference)",-1),rt={href:"https://docs.spring.io/spring-framework/reference/integration/rest-clients.html#_footnotedef_1",target:"_blank",rel:"noopener noreferrer"},ut=t("td",{style:{"text-align":"left"}},[t("code",null,"exchange(RequestEntity,Class)")],-1),gt={style:{"text-align":"left"}},kt=t("code",null,"method(HttpMethod).uri(URI).headers(Consumer<HttpHeaders>).body(Object).retrieve().toEntity(Class)",-1),mt={href:"https://docs.spring.io/spring-framework/reference/integration/rest-clients.html#_footnotedef_2",target:"_blank",rel:"noopener noreferrer"},yt=t("td",{style:{"text-align":"left"}},[t("code",null,"exchange(RequestEntity,ParameterizedTypeReference)")],-1),ht={style:{"text-align":"left"}},bt=t("code",null,"method(HttpMethod).uri(URI).headers(Consumer<HttpHeaders>).body(Object).retrieve().toEntity(ParameterizedTypeReference)",-1),ft={href:"https://docs.spring.io/spring-framework/reference/integration/rest-clients.html#_footnotedef_2",target:"_blank",rel:"noopener noreferrer"},vt=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"execute(String,HttpMethod,RequestCallback,ResponseExtractor,Object…)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"method(HttpMethod).uri(String,Object…).exchange(ExchangeFunction)")])],-1),xt=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"execute(String,HttpMethod,RequestCallback,ResponseExtractor,Map)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"method(HttpMethod).uri(String,Map).exchange(ExchangeFunction)")])],-1),_t=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"execute(URI,HttpMethod,RequestCallback,ResponseExtractor)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"method(HttpMethod).uri(URI).exchange(ExchangeFunction)")])],-1),Tt=a(`<h2 id="spring-boot支持" tabindex="-1"><a class="header-anchor" href="#spring-boot支持"><span>Spring Boot支持</span></a></h2><p>Spring Framework的<code>RestTemplate</code>类早于<code>RestClient</code>，是许多应用程序调用远程<code>REST</code>服务的经典方式。当您有不想迁移到<code>RestClient</code>的现有代码时，或者因为您已经熟悉<code>RestTemplate </code>API，您可以选择使用<code>RestTemplate</code>。</p><p>由于<code>RestTemplate</code>实例在使用之前通常需要进行自定义，因此Spring Boot不提供任何自动配置的<code>RestTemplate </code>bean。但是，会自动配置<code>RestTemplateBuilder</code>，该生成器可在需要时用于创建<code>RestTemplate</code>实例。自动配置的<code>RestTemplateBuilder</code>确保将合理的<code>HttpMessageConverters</code>和适当的<code>ClientHttpRequestFactory</code>应用于<code>RestTemplate</code>实例。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>

	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token class-name">MyService</span><span class="token punctuation">(</span><span class="token class-name">RestTemplateBuilder</span> restTemplateBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate <span class="token operator">=</span> restTemplateBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token class-name">Details</span> <span class="token function">someRestCall</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;/{name}/details&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Details</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>RestTemplateBuilder</code>包括许多有用的方法，可用于快速配置<code>RestTemplate</code>。例如，要添加<code>BASIC</code>身份验证支持，可以使用<code>builder.basicAuthentication(&quot;user&quot;，&quot;password&quot;).build()</code>。</p><h3 id="自定义resttemplate" tabindex="-1"><a class="header-anchor" href="#自定义resttemplate"><span>自定义RestTemplate</span></a></h3><p><code>RestTemplate</code>自定义有三种主要方法，具体取决于您希望自定义应用的范围:</p><ul><li><p>要使任何自定义的范围尽可能窄，引用自动配置的<code>RestTemplateBuilder</code>，然后根据需要调用其方法。每个方法调用都返回一个新的<code>RestTemplateBuilder</code>实例，因此只影响使用当前生成器的<code>RestTemplate</code>。</p></li><li><p>要进行应用程序范围的自定义，请使用<code>RestTemplateCustomizer </code>bean。所有这样的bean都会自动注册到自动配置的<code>RestTemplateBuilder</code>中，并应用于使用它构建的任何模板。以下示例显示了一个自定义程序，该自定义程序为192.168.0.5以外的所有主机配置代理的使用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRestTemplateCustomizer</span> <span class="token keyword">implements</span> <span class="token class-name">RestTemplateCustomizer</span> <span class="token punctuation">{</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span><span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">HttpRoutePlanner</span> routePlanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomRoutePlanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">&quot;proxy.example.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">HttpClient</span> httpClient <span class="token operator">=</span> <span class="token class-name">HttpClientBuilder</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setRoutePlanner</span><span class="token punctuation">(</span>routePlanner<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	restTemplate<span class="token punctuation">.</span><span class="token function">setRequestFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpComponentsClientHttpRequestFactory</span><span class="token punctuation">(</span>httpClient<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CustomRoutePlanner</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultProxyRoutePlanner</span> <span class="token punctuation">{</span>

	<span class="token class-name">CustomRoutePlanner</span><span class="token punctuation">(</span><span class="token class-name">HttpHost</span> proxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">protected</span> <span class="token class-name">HttpHost</span> <span class="token function">determineProxy</span><span class="token punctuation">(</span><span class="token class-name">HttpHost</span> target<span class="token punctuation">,</span> <span class="token class-name">HttpContext</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">HttpException</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.0.5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">determineProxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>最后，您可以定义自己的<code>RestTemplateBuilder </code>bean。这样做将替换自动配置的生成器。如果您希望任何<code>RestTemplateCustomizer </code>bean应用于您的自定义生成器，就像自动配置一样，请使用<code>RestTemplateBuilderConfigurer</code>进行配置。以下示例公开了一个<code>RestTemplateBuilder</code>，它与Spring Boot的自动配置相匹配，但也指定了自定义连接和读取超时：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRestTemplateBuilderConfiguration</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Bean</span>
	<span class="token keyword">public</span> <span class="token class-name">RestTemplateBuilder</span> <span class="token function">restTemplateBuilder</span><span class="token punctuation">(</span><span class="token class-name">RestTemplateBuilderConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> configurer<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RestTemplateBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">setReadTimeout</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>最极端（也很少使用）的选项是在不使用配置程序的情况下创建自己的<code>RestTemplateBuilder </code>bean。除了替换自动配置的生成器外，这还可以防止使用任何<code>RestTemplateCustomizer </code>bean。</p></blockquote><h3 id="resttemplate-ssl-support" tabindex="-1"><a class="header-anchor" href="#resttemplate-ssl-support"><span>RestTemplate SSL Support</span></a></h3><p>如果您需要在<code>RestTemplate</code>上进行自定义SSL配置，可以将SSL绑定应用于<code>RestTemplateBuilder</code>，如本例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>

	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token class-name">MyService</span><span class="token punctuation">(</span><span class="token class-name">RestTemplateBuilder</span> restTemplateBuilder<span class="token punctuation">,</span> <span class="token class-name">SslBundles</span> sslBundles<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate <span class="token operator">=</span> restTemplateBuilder<span class="token punctuation">.</span><span class="token function">setSslBundle</span><span class="token punctuation">(</span>sslBundles<span class="token punctuation">.</span><span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token string">&quot;mybundle&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token class-name">Details</span> <span class="token function">someRestCall</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;/{name}/details&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Details</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="底层客户端的选择" tabindex="-1"><a class="header-anchor" href="#底层客户端的选择"><span>底层客户端的选择</span></a></h3><p>Spring Boot将根据应用程序类路径上可用的库自动检测要与<code>RestClient</code>和<code>RestTemplate</code>一起使用的HTTP客户端。按照首选项的顺序，支持以下客户端：</p><ol><li>Apache HttpClient</li><li>Jetty HttpClient</li><li>OkHttp (deprecated)</li><li>Simple JDK client (<code>HttpURLConnection</code>)</li></ol><p>如果类路径上有多个客户端可用，则将使用最首选的客户端。</p>`,16);function Rt(Ct,St){const n=o("ExternalLinkIcon");return i(),c("div",null,[d,t("table",null,[r,t("tbody",null,[u,g,k,m,y,h,b,f,v,x,_,T,R,C,S,H,j,O,E,w,P,B,M,F,I,U,q,A,L,z,t("tr",null,[D,t("td",N,[W,e(" ["),t("a",Z,[e("1"),s(n)]),e("]")])]),t("tr",null,[J,t("td",G,[V,e(" ["),t("a",K,[e("1"),s(n)]),e("]")])]),t("tr",null,[Q,t("td",X,[Y,e(" ["),t("a",$,[e("1"),s(n)]),e("]")])]),t("tr",null,[tt,t("td",et,[nt,e(" ["),t("a",st,[e("1"),s(n)]),e("]")])]),t("tr",null,[at,t("td",lt,[ot,e(" ["),t("a",it,[e("1"),s(n)]),e("]")])]),t("tr",null,[ct,t("td",pt,[dt,e(" ["),t("a",rt,[e("1"),s(n)]),e("]")])]),t("tr",null,[ut,t("td",gt,[kt,e(" ["),t("a",mt,[e("2"),s(n)]),e("]")])]),t("tr",null,[yt,t("td",ht,[bt,e(" ["),t("a",ft,[e("2"),s(n)]),e("]")])]),vt,xt,_t])]),Tt])}const Ot=l(p,[["render",Rt],["__file","spring-resttemplate.html.vue"]]),Et=JSON.parse('{"path":"/Spring/spring-resttemplate.html","title":"Spring RestTemplate","lang":"zh-CN","frontmatter":{"title":"Spring RestTemplate","date":"2024-05-01T00:00:00.000Z","categories":["Spring"],"tags":["Spring","http"],"description":"RestClient为同步HTTP访问提供了更现代的API。对于异步和流式场景，请考虑响应式WebClient。 方法 RestTemplate以经典Spring Template类的形式提供了一个高级的 HTTP客户端库。它公开了以下几组重载方法： 初始化 RestTemplate使用与RestClient相同的HTTP库抽象。默认情况下，它使用Si...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/Spring/spring-resttemplate.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"Spring RestTemplate"}],["meta",{"property":"og:description","content":"RestClient为同步HTTP访问提供了更现代的API。对于异步和流式场景，请考虑响应式WebClient。 方法 RestTemplate以经典Spring Template类的形式提供了一个高级的 HTTP客户端库。它公开了以下几组重载方法： 初始化 RestTemplate使用与RestClient相同的HTTP库抽象。默认情况下，它使用Si..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-10T12:45:31.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"http"}],["meta",{"property":"article:published_time","content":"2024-05-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-10T12:45:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring RestTemplate\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-10T12:45:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"方法","slug":"方法","link":"#方法","children":[]},{"level":2,"title":"初始化","slug":"初始化","link":"#初始化","children":[]},{"level":2,"title":"Body","slug":"body","link":"#body","children":[]},{"level":2,"title":"从RestTemplate迁移到RestClient","slug":"从resttemplate迁移到restclient","link":"#从resttemplate迁移到restclient","children":[]},{"level":2,"title":"Spring Boot支持","slug":"spring-boot支持","link":"#spring-boot支持","children":[{"level":3,"title":"自定义RestTemplate","slug":"自定义resttemplate","link":"#自定义resttemplate","children":[]},{"level":3,"title":"RestTemplate SSL Support","slug":"resttemplate-ssl-support","link":"#resttemplate-ssl-support","children":[]},{"level":3,"title":"底层客户端的选择","slug":"底层客户端的选择","link":"#底层客户端的选择","children":[]}]}],"git":{"createdTime":1718023531000,"updatedTime":1718023531000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":1}]},"readingTime":{"minutes":6.08,"words":1824},"filePathRelative":"Spring/spring-resttemplate.md","localizedDate":"2024年5月1日","excerpt":"<blockquote>\\n<p>RestClient为同步HTTP访问提供了更现代的API。对于异步和流式场景，请考虑响应式WebClient。</p>\\n</blockquote>\\n<h2>方法</h2>\\n<p><code>RestTemplate</code>以经典<code>Spring Template</code>类的形式提供了一个高级的 <code>HTTP</code>客户端库。它公开了以下几组重载方法：</p>\\n<table>\\n<thead>\\n<tr>\\n<th style=\\"text-align:left\\">方法组</th>\\n<th style=\\"text-align:left\\">描述</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\\"text-align:left\\"><code>getForObject</code></td>\\n<td style=\\"text-align:left\\">GET请求</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>getForEntity</code></td>\\n<td style=\\"text-align:left\\">使用GET检索 ResponseEntity（包含状态、标头和正文）。</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>headForHeaders</code></td>\\n<td style=\\"text-align:left\\">使用HEAD检索资源的所有标头。</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>postForLocation</code></td>\\n<td style=\\"text-align:left\\">使用POST创建一个新资源，并从响应中返回 Location 标头。</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>postForObject</code></td>\\n<td style=\\"text-align:left\\">使用POST创建一个新资源，并从响应中返回表示形式。</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>postForEntity</code></td>\\n<td style=\\"text-align:left\\">使用POST创建一个新资源，并从响应中返回表示形式。</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>put</code></td>\\n<td style=\\"text-align:left\\">使用PUT创建或更新资源。</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>patchForObject</code></td>\\n<td style=\\"text-align:left\\">使用PATCH更新资源，并从响应中返回表示。请注意，JDK HttpURLConnection不支持PATCH，但Apache HttpComponents和其他组件支持。</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>delete</code></td>\\n<td style=\\"text-align:left\\">使用DELETE删除指定URI处的资源。</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>optionsForAllow</code></td>\\n<td style=\\"text-align:left\\">使用ALLOW检索资源的允许HTTP方法。</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>exchange</code></td>\\n<td style=\\"text-align:left\\">前面方法的更通用的版本，在需要时提供额外的灵活性。它接受 RequestEntity（包括HTTP方法、URL、头和正文作为输入）并返回 ResponseEntity。这些方法允许使用 ParameterizedTypeReference 而不是Class来指定具有泛型的响应类型。</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>execute</code></td>\\n<td style=\\"text-align:left\\">执行请求的最通用方式，通过回调接口完全控制请求准备和响应提取。</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{Ot as comp,Et as data};
