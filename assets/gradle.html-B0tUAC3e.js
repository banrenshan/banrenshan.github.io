import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as l,c as o,b as e,d as n,e as p,a as r}from"./app-7RQdUJPT.js";const s={},c=r(`<h2 id="依赖声明" tabindex="-1"><a class="header-anchor" href="#依赖声明"><span>依赖声明</span></a></h2><p><code>Configuration</code>: 一个命名的依赖项集合，为特定的目标（如编译或运行模块）组织在一起。主要的类别：</p><ul><li><p>compileOnly ：用于编译，但不在运行时使用</p></li><li><p>implementation ：用于编译和运行时</p></li><li><p>runtimeOnly ： 用于运行时</p></li><li><p>testCompileOnly</p></li><li><p>testImplementation</p></li><li><p>testRuntimeOnly</p></li><li><p>api ：非标准，需要 java-library 插件支持</p><blockquote><p>JAVA库主要作为依赖提供给其他项目，其本身也会依赖其他JAVA库。那么其依赖项可以暴漏出来给消费者使用吗？为此，JAVA库插件提供了 <code>api</code> Configuration。我们来看下面示例：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>dependencies <span class="token punctuation">{</span>
    api <span class="token string">&#39;org.apache.httpcomponents:httpclient:4.5.7&#39;</span>
    implementation <span class="token string">&#39;org.apache.commons:commons-lang3:3.5&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>api配置中的依赖项将被传递地暴露给库的使用者，因此将出现在使用者的编译类路径上。implementation 则不会。</p></blockquote></li><li><p>compileOnlyApi ：非标准，需要 java-library 插件支持</p></li></ul><h2 id="java相关的插件" tabindex="-1"><a class="header-anchor" href="#java相关的插件"><span>JAVA相关的插件</span></a></h2>`,4),m=e("li",null,[e("p",null,"Java插件支持 Java编译 、测试和build功能。它是许多其他JVM语言Gradle插件的基础。")],-1),d=e("li",null,[e("p",null,"Java库插件通过提供有关Java库的特定知识来扩展Java插件（Java）的功能。例如API公开功能。")],-1),u={href:"https://docs.gradle.org/current/userguide/distribution_plugin.html#distribution_plugin",target:"_blank",rel:"noopener noreferrer"},g=e("blockquote",null,[e("p",null,"Java平台插件提供了为Java生态系统声明平台的功能。一个平台可以用于不同的目的："),e("ul",null,[e("li",null,"一起发布的模块的描述（例如，共享同一版本）"),e("li",null,"异构库的一组推荐版本。一个典型的例子包括Spring Boot BOM"),e("li",null,"在子项目之间共享一组依赖关系版本")]),e("p",null,"平台是一种特殊的软件组件，不包含任何源码：它只用于引用其他库，组织依赖关系。")],-1);function h(v,y){const t=i("ExternalLinkIcon");return l(),o("div",null,[c,e("ul",null,[m,d,e("li",null,[e("p",null,[n("application 插件用于创建可执行的JVM应用程序。它使得在开发过程中很容易在本地启动应用程序，并将应用程序打包为TAR或ZIP，包括特定于操作系统的启动脚本。其集成了java插件和"),e("a",u,[n("Distribution "),p(t)]),n("插件")])])]),g])}const f=a(s,[["render",h],["__file","gradle.html.vue"]]),A=JSON.parse(`{"path":"/Spring/gradle.html","title":"Gradle指南","lang":"zh-CN","frontmatter":{"title":"Gradle指南","date":"2023-10-08T00:00:00.000Z","categories":["java"],"tags":["Gradle"],"description":"依赖声明 Configuration: 一个命名的依赖项集合，为特定的目标（如编译或运行模块）组织在一起。主要的类别： compileOnly ：用于编译，但不在运行时使用 implementation ：用于编译和运行时 runtimeOnly ： 用于运行时 testCompileOnly testImplementation testRuntim...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/Spring/gradle.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"Gradle指南"}],["meta",{"property":"og:description","content":"依赖声明 Configuration: 一个命名的依赖项集合，为特定的目标（如编译或运行模块）组织在一起。主要的类别： compileOnly ：用于编译，但不在运行时使用 implementation ：用于编译和运行时 runtimeOnly ： 用于运行时 testCompileOnly testImplementation testRuntim..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-24T08:19:31.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"Gradle"}],["meta",{"property":"article:published_time","content":"2023-10-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-24T08:19:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Gradle指南\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-24T08:19:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"依赖声明","slug":"依赖声明","link":"#依赖声明","children":[]},{"level":2,"title":"JAVA相关的插件","slug":"java相关的插件","link":"#java相关的插件","children":[]}],"git":{"createdTime":1713946771000,"updatedTime":1713946771000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":1}]},"readingTime":{"minutes":1.64,"words":492},"filePathRelative":"Spring/gradle.md","localizedDate":"2023年10月8日","excerpt":"<h2>依赖声明</h2>\\n<p><code>Configuration</code>: 一个命名的依赖项集合，为特定的目标（如编译或运行模块）组织在一起。主要的类别：</p>\\n<ul>\\n<li>\\n<p>compileOnly ：用于编译，但不在运行时使用</p>\\n</li>\\n<li>\\n<p>implementation ：用于编译和运行时</p>\\n</li>\\n<li>\\n<p>runtimeOnly ： 用于运行时</p>\\n</li>\\n<li>\\n<p>testCompileOnly</p>\\n</li>\\n<li>\\n<p>testImplementation</p>\\n</li>\\n<li>\\n<p>testRuntimeOnly</p>\\n</li>\\n<li>\\n<p>api ：非标准，需要 java-library 插件支持</p>\\n<blockquote>\\n<p>JAVA库主要作为依赖提供给其他项目，其本身也会依赖其他JAVA库。那么其依赖项可以暴漏出来给消费者使用吗？为此，JAVA库插件提供了 <code>api</code>  Configuration。我们来看下面示例：</p>\\n<div class=\\"language-groovy\\" data-ext=\\"groovy\\" data-title=\\"groovy\\"><pre class=\\"language-groovy\\"><code>dependencies <span class=\\"token punctuation\\">{</span>\\n    api <span class=\\"token string\\">'org.apache.httpcomponents:httpclient:4.5.7'</span>\\n    implementation <span class=\\"token string\\">'org.apache.commons:commons-lang3:3.5'</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div><p>api配置中的依赖项将被传递地暴露给库的使用者，因此将出现在使用者的编译类路径上。implementation 则不会。</p>\\n</blockquote>\\n</li>\\n<li>\\n<p>compileOnlyApi ：非标准，需要 java-library 插件支持</p>\\n</li>\\n</ul>","autoDesc":true}`);export{f as comp,A as data};
