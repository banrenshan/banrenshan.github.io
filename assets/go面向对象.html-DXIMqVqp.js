import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as e}from"./app-DvhfW1jQ.js";const t="/assets/image-20231202164210799-CP3oVaM0.png",p={},i=e(`<h1 id="结构体" tabindex="-1"><a class="header-anchor" href="#结构体"><span>结构体</span></a></h1><p>结构体(Struct)是一种聚合类型，里面可以包含任意类型的值，这些值就是我们定义的结构体的成员，也称为字段。在Go语言中，结构体语法：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> structName <span class="token keyword">struct</span><span class="token punctuation">{</span>
  fieldName typeName
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>type和struct是Go语言的关键字，二者组合就代表要定义一个新的结构体类型。</p></li><li><p>structName是结构体类型的名字。</p></li><li><p>fieldName是结构体的字段名，而typeName是对应的字段类型。</p></li></ul><p>下面是示例：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> person <span class="token keyword">struct</span><span class="token punctuation">{</span>
	name <span class="token builtin">string</span>
	age <span class="token builtin">uint</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="声明和使用" tabindex="-1"><a class="header-anchor" href="#声明和使用"><span>声明和使用</span></a></h2><p>结构体类型也可以使用与普通的字符串、整型一样的方式进行声明和初始化</p><p>在下面的例子中，我声明了一个person类型的变量p，因为没有对变量p初始化，所以默认会使用结构体里字段的零值。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> p person
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以通过结构体字面量的方式初始化:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>p<span class="token operator">:=</span>person<span class="token punctuation">{</span><span class="token string">&quot;zzq&quot;</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>采用字面量初始化结构体时，初始化值的顺序很重要，必须与字段定义的顺序一致</p></blockquote><p>那么是否可以不按照顺序初始化呢？当然可以，只不过需要指出字段名称:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>p<span class="token operator">:=</span>person<span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">&quot;zzq&quot;</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如何访问结构体中的值呢：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	p <span class="token operator">:=</span> person<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;zzq&quot;</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>age<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>结构体的字段可以是任意类型，包括自定义的结构体类型:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	name <span class="token builtin">string</span>
	age  <span class="token builtin">uint</span>
	addr address
<span class="token punctuation">}</span>

<span class="token keyword">type</span> address <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	province <span class="token builtin">string</span>
	city     <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	p <span class="token operator">:=</span> person<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;zzq&quot;</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> addr<span class="token punctuation">:</span> address<span class="token punctuation">{</span><span class="token string">&quot;shandong&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jinan&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>age<span class="token punctuation">,</span> p<span class="token punctuation">.</span>addr<span class="token punctuation">.</span>province<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h2><p>方法和函数是两个概念，但又非常相似，不同点在于方法必须要有一个接收者，这个接收者是一个类型，这样方法就与这个类型绑定在一起，称为这个类型的方法。</p><p>与函数不同，定义方法时会在关键字func和方法名String之间加一个接收者(age Age)，接收者使用小括号包围。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	name <span class="token builtin">string</span>
	age  <span class="token builtin">uint</span>
	addr address
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p person<span class="token punctuation">)</span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> p<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> p<span class="token punctuation">.</span>addr<span class="token punctuation">.</span>city
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的示例中， ToString 就是person类型的方法 ， 方法名称前面的单个参数就是接收者。</p><h3 id="值和指针类型接收者" tabindex="-1"><a class="header-anchor" href="#值和指针类型接收者"><span>值和指针类型接收者</span></a></h3><p>方法的接收者除了可以是值类型，也可以是指针类型。</p><p>如果定义的方法的接收者类型是指针，我们对指针的修改就是有效的，如果不是指针，修改就没有效果：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	name <span class="token builtin">string</span>
	age  <span class="token builtin">uint</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p person<span class="token punctuation">)</span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> p<span class="token punctuation">.</span>name
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>person<span class="token punctuation">)</span> <span class="token function">SetName</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	p<span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	p <span class="token operator">:=</span> person<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;zzq&quot;</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//zzq</span>
	p<span class="token punctuation">.</span><span class="token function">SetName</span><span class="token punctuation">(</span><span class="token string">&quot;pangzi&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//pangzi</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在调用方法的时候，传递的接收者本质上都是副本，只不过一个是这个值的副本，一个是指向这个值的指针的副本。指针具有指向原有值的特性，所以修改了指针指向的值，也就修改了原有的值。我们可以简单地理解为值接收者使用的是值的副本来调用方法，而指针接收者使用实际的值来调用方法。</p><p>示例中调用指针接收者方法的时候，使用的是一个值类型的变量，并不是一个指针类型，其实这里使用指针变量调用也是可以的:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	<span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetName</span><span class="token punctuation">(</span><span class="token string">&quot;pangzi2&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//pangzi2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为Go语言编译器帮我们自动做了如下事情：如果使用一个值类型变量调用指针类型接收者的方法，Go语言编译器会自动帮我们取指针调用，以满足指针接收者的要求。同样的原理，如果使用一个指针类型变量调用值类型接收者的方法，Go语言编译器会自动帮我们解引用调用，以满足值类型接收者的要求。</p><h1 id="接口" tabindex="-1"><a class="header-anchor" href="#接口"><span>接口</span></a></h1><p>interface{}是空接口的意思，在Go语言中代表任意类型。</p><h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> interfaceName <span class="token keyword">interface</span><span class="token punctuation">{</span>
  method<span class="token operator">...</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Demo: 定义一个ToString 接口</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Stringer <span class="token keyword">interface</span><span class="token punctuation">{</span>
  <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="接口的实现" tabindex="-1"><a class="header-anchor" href="#接口的实现"><span>接口的实现</span></a></h2><p>接口的实现者必须是一个具体的类型，继续以person结构体为例，让它来实现Stringer接口：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	name <span class="token builtin">string</span>
	age  <span class="token builtin">uint</span>
	addr address
<span class="token punctuation">}</span>

<span class="token keyword">type</span> address <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	province <span class="token builtin">string</span>
	city     <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Stringer <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p person<span class="token punctuation">)</span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> p<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> p<span class="token punctuation">.</span>addr<span class="token punctuation">.</span>city
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	p <span class="token operator">:=</span> person<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;zzq&quot;</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> addr<span class="token punctuation">:</span> address<span class="token punctuation">{</span><span class="token string">&quot;shandong&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jinan&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>age<span class="token punctuation">,</span> p<span class="token punctuation">.</span>addr<span class="token punctuation">.</span>province<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>给结构体类型person定义一个方法，这个方法与接口里方法的签名（名称、参数和返回值）一样，这样结构体person就实现了Stringer接口。接口的实现并没有通过任何关键字（比如Java中的implements），所以Go语言的接口是隐式实现的。</p><blockquote><p>如果一个接口有多个方法，那么需要实现接口的每个方法才算是实现了这个接口。</p></blockquote><h2 id="值和指针类型接收者-1" tabindex="-1"><a class="header-anchor" href="#值和指针类型接收者-1"><span>值和指针类型接收者</span></a></h2><ul><li><p>当值类型作为接收者时，person类型和<code>*person</code>类型都实现了该接口。</p></li><li><p>当指针类型作为接收者时，只有<code>*person</code>类型实现了该接口。</p></li></ul><h1 id="继承和组合" tabindex="-1"><a class="header-anchor" href="#继承和组合"><span>继承和组合</span></a></h1><p>在Go语言中没有继承的概念，所以结构体、接口之间也没有父子关系，Go语言提倡的是组合，利用组合达到代码复用的目的。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Reader <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Read</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Writer <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Write</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> ReadWriter <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	Reader
	Writer
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ReadWriter接口就是Reader和Writer的组合，组合后，ReadWriter接口具有Reader和Writer中的所有方法，这样新接口ReadWriter就不用定义自己的方法了，组合Reader和Writer的就可以了。</p><p>不止接口可以组合，结构体也可以组合，现在把address结构体组合到结构体person中，而不是当成一个字段:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	name <span class="token builtin">string</span>
	age  <span class="token builtin">uint</span>
	address
<span class="token punctuation">}</span>

<span class="token keyword">type</span> address <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	province <span class="token builtin">string</span>
	city     <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接把结构体类型放进来，就是组合，不需要字段名。组合后，被组合的address称为内部类型，person称为外部类型。</p><p>修改了person结构体后，声明和使用也需要一起修改:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	name <span class="token builtin">string</span>
	age  <span class="token builtin">uint</span>
	 address
<span class="token punctuation">}</span>

<span class="token keyword">type</span> address <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	province <span class="token builtin">string</span>
	city     <span class="token builtin">string</span>
<span class="token punctuation">}</span>


<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	p <span class="token operator">:=</span> person<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;zzq&quot;</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> address<span class="token punctuation">{</span><span class="token string">&quot;shandong&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jinan&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>age<span class="token punctuation">,</span> p<span class="token punctuation">.</span>province<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为person组合了address，所以address的字段就像person自己的一样，可以直接使用。</p><p>类型组合后，外部类型不仅可以使用内部类型的字段，也可以使用内部类型的方法，就像使用自己的方法一样</p><h2 id="方法覆盖" tabindex="-1"><a class="header-anchor" href="#方法覆盖"><span>方法覆盖</span></a></h2><p>如果外部类型定义了与内部类型同样的方法，那么外部类型会覆盖内部类型，这就是方法的覆写</p><h2 id="类型断言" tabindex="-1"><a class="header-anchor" href="#类型断言"><span>类型断言</span></a></h2><p>类型断言（Type Assertion）是一个使用在接口值上的操作，用于检查接口类型变量所持有的值是否实现了期望的接口或者具体的类型。</p><p>在Go语言中类型断言的语法格式如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> x<span class="token punctuation">.</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，x 表示一个接口的类型，T 表示一个具体的类型（也可为接口类型）。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> x <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    x <span class="token operator">=</span> <span class="token number">10</span>
    value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> x<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span> ok<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token number">10</span><span class="token punctuation">,</span><span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要注意如果不接收第二个参数也就是上面代码中的 ok，断言失败时会直接造成一个 panic。如果 x 为 nil 同样也会 panic。</p><h1 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理"><span>异常处理</span></a></h1><p>在Go语言中，错误是通过内置的error接口表示的。它非常简单，只有一个Error方法，用来返回具体的错误信息:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> <span class="token builtin">error</span> <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>errors.New工厂函数来生成错误信息。errors.New函数接收一个字符串参数，返回一个error接口</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">sumInt2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> a<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;a 不能是负数&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">,</span><span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义error" tabindex="-1"><a class="header-anchor" href="#自定义error"><span>自定义error</span></a></h2><p>你可能会想，上面采用工厂函数返回错误信息的方式只能传递一个字符串，也就是携带的信息只有字符串，如果想要携带更多信息（比如错误码信息），该怎么办呢？这个时候就需要自定义error。</p><p>自定义error其实就是先自定义一个新类型，比如结构体，然后让这个类型实现error接口</p><h2 id="错误嵌套" tabindex="-1"><a class="header-anchor" href="#错误嵌套"><span>错误嵌套</span></a></h2><p>error接口虽然比较简洁，但是功能也比较弱。想象一下，假如我们有这样的需求：基于一个存在的error再生成一个error，需要怎么做呢？这就是错误嵌套。</p><p>所以从Go语言1.13版本开始，Go标准库新增了Error Wrapping功能，让我们可以基于一个存在的error生成新的error，并且可以保留原error信息：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	e <span class="token operator">:=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;原始错误&quot;</span><span class="token punctuation">)</span>
	w <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;包装错误:%w&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token comment">// 包装错误:原始错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="errors-is函数" tabindex="-1"><a class="header-anchor" href="#errors-is函数"><span>errors.Is函数</span></a></h2><p>有了Error Wrapping后，你会发现原来用的判断两个error是不是同一个error的方法失效了，比如Go语言标准库经常用到的如下代码中的方式：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">if</span> err <span class="token operator">==</span> os<span class="token punctuation">.</span>ErrExist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为什么会出现这种情况呢？由于Go语言的Error Wrapping功能令人不知道返回的err是否被嵌套，嵌套了几层。</p><p>于是Go语言为我们提供了errors.Is函数，用来判断两个error是否是同一个</p><ul><li><p>如果err和target是同一个，那么返回true。</p></li><li><p>如果err是一个wrapping error，target也包含在这个嵌套error链中的话，也返回true。</p></li></ul><h2 id="errors-as函数" tabindex="-1"><a class="header-anchor" href="#errors-as函数"><span>errors.As函数</span></a></h2><p>同样的原因，有了error嵌套后，error断言也不能用了，因为你不知道一个error是否被嵌套，又嵌套了几层。所以Go语言为解决这个问题提供了errors.As函数</p><h2 id="panic函数" tabindex="-1"><a class="header-anchor" href="#panic函数"><span>panic函数</span></a></h2><p>Go语言是一门静态的强类型语言，很多问题都尽可能地在编译时捕获，但是有一些只能在运行时检查，比如数组越界访问、不相同的类型强制转换等，这类运行时的问题会引起panic异常。除了运行时可以产生panic异常外，我们自己也可以抛出panic异常</p><p>panic是Go语言内置的函数，可以接收interface{}类型的参数，也就是任何类型的值都可以传递给panic函数，</p><p>panic异常是一种非常严重的情况，会让程序中断运行，使程序崩溃，所以如果是不影响程序运行的错误，不要使用panic，使用普通错误error即可。</p><h2 id="recover函数" tabindex="-1"><a class="header-anchor" href="#recover函数"><span>recover函数</span></a></h2><p>通常情况下，我们不对panic异常做任何处理，因为既然它是影响程序运行的异常，就让它直接崩溃即可。但是也的确有一些特例，比如在程序崩溃前做一些资源释放的处理，这时候就需要从panic异常中恢复，才能完成处理。</p><p>在Go语言中，可以通过内置的recover函数恢复panic异常。因为在程序因panic异常崩溃的时候，只有被defer修饰的函数才能被执行，所以recover函数要结合defer关键字使用才能生效。</p><p>下面的示例是通过“defer关键字+匿名函数+recover函数”从panic异常中恢复的方式。</p><figure><img src="`+t+`" alt="image-20231202164210799" tabindex="0" loading="lazy"><figcaption>image-20231202164210799</figcaption></figure><h1 id="defer函数" tabindex="-1"><a class="header-anchor" href="#defer函数"><span>defer函数</span></a></h1><p>在一个自定义函数中，如果你打开了一个文件，那么之后你需要关闭它以释放资源。不管你的代码执行了多少分支，是否出现了错误，文件都是一定要关闭的，这样才能保证资源的释放。如果这个事情由开发人员来做，在业务逻辑变复杂后就会非常麻烦，而且还有可能会忘记关闭。基于这种情况，Go语言为我们提供了defer函数，可以保证文件的关闭操作一定会被执行，而不管你自定义的函数是出现异常还是出现错误。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;First&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Second&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token comment">// defer 后面必须是函数或者方法的调用，否则报错：</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;This is main func body&quot;</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>This is main <span class="token keyword">func</span> body
Second
First
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>defer语句常被用于成对的操作，如文件的打开和关闭、加锁和释放锁、连接的建立和断开等。不管多么复杂的操作，都可以保证资源被正确地释放。</p>`,102),o=[i];function c(l,u){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","go面向对象.html.vue"]]),v=JSON.parse('{"path":"/Go/go%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html","title":"Go 面向对象","lang":"zh-CN","frontmatter":{"title":"Go 面向对象","date":"2024-04-24T00:00:00.000Z","tags":["Go"],"categories":["Go"],"description":"结构体 结构体(Struct)是一种聚合类型，里面可以包含任意类型的值，这些值就是我们定义的结构体的成员，也称为字段。在Go语言中，结构体语法： type和struct是Go语言的关键字，二者组合就代表要定义一个新的结构体类型。 structName是结构体类型的名字。 fieldName是结构体的字段名，而typeName是对应的字段类型。 下面是示...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/Go/go%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"Go 面向对象"}],["meta",{"property":"og:description","content":"结构体 结构体(Struct)是一种聚合类型，里面可以包含任意类型的值，这些值就是我们定义的结构体的成员，也称为字段。在Go语言中，结构体语法： type和struct是Go语言的关键字，二者组合就代表要定义一个新的结构体类型。 structName是结构体类型的名字。 fieldName是结构体的字段名，而typeName是对应的字段类型。 下面是示..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-24T08:19:31.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:published_time","content":"2024-04-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-24T08:19:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go 面向对象\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-24T08:19:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"声明和使用","slug":"声明和使用","link":"#声明和使用","children":[]},{"level":2,"title":"方法","slug":"方法","link":"#方法","children":[{"level":3,"title":"值和指针类型接收者","slug":"值和指针类型接收者","link":"#值和指针类型接收者","children":[]}]},{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"接口的实现","slug":"接口的实现","link":"#接口的实现","children":[]},{"level":2,"title":"值和指针类型接收者","slug":"值和指针类型接收者-1","link":"#值和指针类型接收者-1","children":[]},{"level":2,"title":"方法覆盖","slug":"方法覆盖","link":"#方法覆盖","children":[]},{"level":2,"title":"类型断言","slug":"类型断言","link":"#类型断言","children":[]},{"level":2,"title":"自定义error","slug":"自定义error","link":"#自定义error","children":[]},{"level":2,"title":"错误嵌套","slug":"错误嵌套","link":"#错误嵌套","children":[]},{"level":2,"title":"errors.Is函数","slug":"errors-is函数","link":"#errors-is函数","children":[]},{"level":2,"title":"errors.As函数","slug":"errors-as函数","link":"#errors-as函数","children":[]},{"level":2,"title":"panic函数","slug":"panic函数","link":"#panic函数","children":[]},{"level":2,"title":"recover函数","slug":"recover函数","link":"#recover函数","children":[]}],"git":{"createdTime":1713946771000,"updatedTime":1713946771000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":1}]},"readingTime":{"minutes":10.42,"words":3126},"filePathRelative":"Go/go面向对象.md","localizedDate":"2024年4月24日","excerpt":"\\n<p>结构体(Struct)是一种聚合类型，里面可以包含任意类型的值，这些值就是我们定义的结构体的成员，也称为字段。在Go语言中，结构体语法：</p>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">type</span> structName <span class=\\"token keyword\\">struct</span><span class=\\"token punctuation\\">{</span>\\n  fieldName typeName\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,v as data};
