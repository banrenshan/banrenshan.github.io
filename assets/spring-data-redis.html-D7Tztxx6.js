import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as e}from"./app-7RQdUJPT.js";const t={},p=e(`<h1 id="redis支持" tabindex="-1"><a class="header-anchor" href="#redis支持"><span>redis支持</span></a></h1><h2 id="连接redis" tabindex="-1"><a class="header-anchor" href="#连接redis"><span>连接redis</span></a></h2><p>关于连接相关的api都存储在org.springframework.data.redis.connection包下。RedisConnection负责与redis通信，它还自动将底层连接库异常转换为 Spring 一致的 DAO 异常层次结构，以便您可以在不更改任何代码的情况下切换底层连接库。</p><blockquote><p>对于需要原生库 API 的极端情况，RedisConnection 提供了一个专用方法 (getNativeConnection)，该方法返回用于通信的原始底层对象。</p></blockquote><p>RedisConnectionFactory 创建 RedisConnection 对象。 此外，工厂充当 PersistenceExceptionTranslator 对象，这意味着一旦声明，它们就可以让您进行透明的异常转换。 例如，您可以通过使用@Repository 注释和AOP 进行异常转换。 有关更多信息，请参阅 Spring Framework 文档中的专用部分？？？。</p><p>有些底层连接库可能不支持redis的某些特性，如果我们在这样的连接上执行了不支持的功能，会抛出UnsupportedOperationException异常。</p><h3 id="lettuce连接器" tabindex="-1"><a class="header-anchor" href="#lettuce连接器"><span>Lettuce连接器</span></a></h3><p>Lettuce 基于 Netty 的开源连接器。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.lettuce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lettuce-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>6.1.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">LettuceConnectionFactory</span> <span class="token function">redisConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LettuceConnectionFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisStandaloneConfiguration</span><span class="token punctuation">(</span><span class="token string">&quot;server&quot;</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，由 LettuceConnectionFactory 创建的所有 LettuceConnection 实例,为所有非阻塞和非事务操作,共享相同的线程安全连接。 要每次使用专用连接，请将 shareNativeConnection 设置为 false。</p><p>如果 shareNativeConnection 设置为 false，LettuceConnectionFactory 也可以配置为使用 LettucePool 来池化阻塞或事务连接。</p><p>Lettuce 与 Netty 的native 传输集成，让您可以使用 Unix 域套接字与 Redis 进行通信。 以下示例显示了如何在 /var/run/redis.sock 为 Unix 域套接字创建连接工厂：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">LettuceConnectionFactory</span> <span class="token function">redisConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LettuceConnectionFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisSocketConfiguration</span><span class="token punctuation">(</span><span class="token string">&quot;/var/run/redis.sock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jedis-连接器" tabindex="-1"><a class="header-anchor" href="#jedis-连接器"><span>Jedis 连接器</span></a></h3><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.6.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">JedisConnectionFactory</span> <span class="token function">redisConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JedisConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="读写分离" tabindex="-1"><a class="header-anchor" href="#读写分离"><span>读写分离</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">class</span> <span class="token class-name">WriteToMasterReadFromReplicaConfiguration</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">LettuceConnectionFactory</span> <span class="token function">redisConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">LettuceClientConfiguration</span> clientConfig <span class="token operator">=</span> <span class="token class-name">LettuceClientConfiguration</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">readFrom</span><span class="token punctuation">(</span><span class="token constant">REPLICA_PREFERRED</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">RedisStandaloneConfiguration</span> serverConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisStandaloneConfiguration</span><span class="token punctuation">(</span><span class="token string">&quot;server&quot;</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LettuceConnectionFactory</span><span class="token punctuation">(</span>serverConfig<span class="token punctuation">,</span> clientConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sentinel" tabindex="-1"><a class="header-anchor" href="#sentinel"><span>Sentinel</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Jedis
 */</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">RedisConnectionFactory</span> <span class="token function">jedisConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">RedisSentinelConfiguration</span> sentinelConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisSentinelConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span><span class="token string">&quot;mymaster&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">sentinel</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">26379</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">sentinel</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">26380</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JedisConnectionFactory</span><span class="token punctuation">(</span>sentinelConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Lettuce
 */</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">RedisConnectionFactory</span> <span class="token function">lettuceConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">RedisSentinelConfiguration</span> sentinelConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisSentinelConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span><span class="token string">&quot;mymaster&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">sentinel</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">26379</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">sentinel</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">26380</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LettuceConnectionFactory</span><span class="token punctuation">(</span>sentinelConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件：</p><ul><li><code>spring.redis.sentinel.master</code>: master的名称.</li><li><code>spring.redis.sentinel.nodes</code>: 逗号分隔的主机：端口.</li><li><code>spring.redis.sentinel.password</code>: redis的认证密码</li></ul><blockquote><p>有时，需要与其中一个哨兵直接交互。 使用 RedisConnectionFactory.getSentinelConnection() 或 RedisConnection.getSentinelCommands() 可让您访问配置的第一个active Sentinel。</p></blockquote><h2 id="redistemplate" tabindex="-1"><a class="header-anchor" href="#redistemplate"><span>RedisTemplate</span></a></h2><p>RedisTemplate默认使用jdk序列化方式，你可以更改此行为。您还可以将序列化设置为 null，并通过将 enableDefaultSerializer 属性设置为 false 来将 RedisTemplate 与原始字节数组一起使用。</p><p>由于存储在 Redis 中的键和值通常是 java.lang.String，因此 Redis 模块为 RedisConnection 和 RedisTemplate 提供了两个扩展，分别是 StringRedisConnection（DefaultStringRedisConnection 实现）和 StringRedisTemplate 。 除了绑定到 String 键之外，还使用 StringRedisSerializer，这意味着存储的键和值是人类可读的。 以下清单显示了一个示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Autowired</span>
  <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addLink</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token function">toExternalForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与其他 Spring 模板一样，RedisTemplate 和 StringRedisTemplate 允许您通过 RedisCallback 接口直接与 Redis 对话。 此功能可让您完全控制，因为它直接与 RedisConnection 对话。 请注意，当使用 StringRedisTemplate 时，回调会收到 StringRedisConnection 的实例。 以下示例显示了如何使用 RedisCallback 接口：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">doInRedis</span><span class="token punctuation">(</span><span class="token class-name">RedisConnection</span> connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DataAccessException</span> <span class="token punctuation">{</span>
      <span class="token class-name">Long</span> size <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">dbSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// Can cast to StringRedisConnection if using a StringRedisTemplate</span>
      <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">StringRedisConnection</span><span class="token punctuation">)</span>connection<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="序列化" tabindex="-1"><a class="header-anchor" href="#序列化"><span>序列化</span></a></h2><p>从框架的角度来看，Redis 中存储的数据只有字节。 虽然 Redis 本身支持各种类型，但在大多数情况下，这些类型指的是数据的存储方式，而不是它所代表的内容。 由用户决定是否将信息转换为字符串或任何其他对象。</p><p>在 Spring Data 中，用户（自定义）类型和原始数据之间的转换由 org.springframework.data.redis.serializer 包中的类处理。这个包包含两种类型的序列化器，顾名思义，它们负责序列化过程：</p><ul><li>基于 RedisSerializer 的双向序列化器。</li><li>使用 RedisElementReader 和 RedisElementWriter 的元素读取器和写入器。</li></ul><p>主要区别在于，RedisSerializer 主要序列化为 byte[]，而读取器和写入器使用 ByteBuffer。</p><p>有多种实现可用（包括本文档中已经提到的两种）：</p><ul><li>JdkSerializationRedisSerializer，默认用于RedisCache和RedisTemplate。</li><li>StringRedisSerializer</li><li>OxmSerializer</li><li>GenericJackson2JsonRedisSerializer 、Jackson2JsonRedisSerializer</li></ul><p>请注意，存储格式不仅限于值。它可以用于键、值或散列，没有任何限制。</p><h2 id="hash-映射" tabindex="-1"><a class="header-anchor" href="#hash-映射"><span>Hash 映射</span></a></h2><p>可以使用Redis 中的各种数据结构来存储数据。 Jackson2JsonRedisSerializer 可以转换 JSON 格式的对象。 理想情况下，可以使用普通键将 JSON 存储为值。 您可以通过使用 Redis 哈希来实现更复杂的结构化对象映射。 Spring Data Redis 提供了各种将数据映射到哈希的策略（取决于用例）：</p><ul><li>直接映射，通过使用 HashOperations 和序列化</li><li>使用 Redis 存储库</li><li>使用 HashMapper 和 HashOperations</li></ul><h3 id="hash-mappers" tabindex="-1"><a class="header-anchor" href="#hash-mappers"><span>Hash Mappers</span></a></h3><p>映射 Redis 哈希 到 Map&lt;K, V&gt; 。多种实现可用：</p><ul><li><p>BeanUtilsHashMapper 使用 Spring 的 BeanUtils。</p></li><li><p>ObjectHashMapper 使用对象到哈希映射。</p></li><li><p>Jackson2HashMapper 使用 FasterXML Jackson。</p></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> firstname<span class="token punctuation">;</span>
  <span class="token class-name">String</span> lastname<span class="token punctuation">;</span>

  <span class="token comment">// …</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMapping</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Autowired</span>
  <span class="token class-name">HashOperations</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> hashOperations<span class="token punctuation">;</span>

  <span class="token class-name">HashMapper</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectHashMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeHash</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> mappedHash <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">toHash</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
    hashOperations<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> mappedHash<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">loadHash</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> loadedHash <span class="token operator">=</span> hashOperations<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> mapper<span class="token punctuation">.</span><span class="token function">fromHash</span><span class="token punctuation">(</span>loadedHash<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jackson2hashmapper" tabindex="-1"><a class="header-anchor" href="#jackson2hashmapper"><span>Jackson2HashMapper</span></a></h3><p>Jackson2HashMapper 使用 FasterXML Jackson 为域对象提供 Redis Hash 映射。 Jackson2HashMapper 可以将顶级属性映射为哈希字段名称，并且可以选择将结构展平。 简单类型映射到简单值。 复杂类型（嵌套对象、集合、映射等）表示为嵌套 JSON。</p><p>展平为所有嵌套属性创建单独的哈希条目，并尽可能将复杂类型解析为简单类型。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> firstname<span class="token punctuation">;</span>
  <span class="token class-name">String</span> lastname<span class="token punctuation">;</span>
  <span class="token class-name">Address</span> address<span class="token punctuation">;</span>
  <span class="token class-name">Date</span> date<span class="token punctuation">;</span>
  <span class="token class-name">LocalDateTime</span> localDateTime<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> city<span class="token punctuation">;</span>
  <span class="token class-name">String</span> country<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>普通映射结果：</p><table><thead><tr><th style="text-align:left;">Hash Field</th><th style="text-align:left;">Value</th></tr></thead><tbody><tr><td style="text-align:left;">firstname</td><td style="text-align:left;"><code>Jon</code></td></tr><tr><td style="text-align:left;">lastname</td><td style="text-align:left;"><code>Snow</code></td></tr><tr><td style="text-align:left;">address</td><td style="text-align:left;"><code>{ &quot;city&quot; : &quot;Castle Black&quot;, &quot;country&quot; : &quot;The North&quot; }</code></td></tr><tr><td style="text-align:left;">date</td><td style="text-align:left;"><code>1561543964015</code></td></tr><tr><td style="text-align:left;">localDateTime</td><td style="text-align:left;"><code>2018-01-02T12:13:14</code></td></tr></tbody></table><p>flat映射结果：</p><table><thead><tr><th style="text-align:left;">Hash Field</th><th style="text-align:left;">Value</th></tr></thead><tbody><tr><td style="text-align:left;">firstname</td><td style="text-align:left;"><code>Jon</code></td></tr><tr><td style="text-align:left;">lastname</td><td style="text-align:left;"><code>Snow</code></td></tr><tr><td style="text-align:left;">address.city</td><td style="text-align:left;"><code>Castle Black</code></td></tr><tr><td style="text-align:left;">address.country</td><td style="text-align:left;"><code>The North</code></td></tr><tr><td style="text-align:left;">date</td><td style="text-align:left;"><code>1561543964015</code></td></tr><tr><td style="text-align:left;">localDateTime</td><td style="text-align:left;"><code>2018-01-02T12:13:14</code></td></tr></tbody></table><blockquote><p>java.util.Date 和 java.util.Calendar 以毫秒表示。如果 jackson-datatype-jsr310 在类路径上，则 JSR-310 日期/时间类型将序列化为其 toString 形式。</p></blockquote><h2 id="redis-messaging-pub-sub" tabindex="-1"><a class="header-anchor" href="#redis-messaging-pub-sub"><span>Redis Messaging (Pub/Sub)</span></a></h2><p>Redis 消息传递大致可以分为两个方面的功能：</p><ul><li><p>消息的发布或生产</p></li><li><p>消息的订阅或消费</p></li></ul><p>这通常被称为发布/订阅（简称 Pub/Sub）模式。RedisTemplate 类用于消息生产。spring data 创建专门的消息容器监听并异步接受消息，并将原始消息转化成对应的POJOs (MDPs)。</p><h3 id="发布消息" tabindex="-1"><a class="header-anchor" href="#发布消息"><span>发布消息</span></a></h3><p>要发布消息，您可以像其他操作一样使用低级 RedisConnection 或高级 RedisTemplate。 两个实体都提供发布方法，该方法接受消息和目标通道作为参数。 虽然 RedisConnection 需要原始数据（字节数组），但 RedisTemplate 允许将任意对象作为消息传入，如下例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// send message through connection RedisConnection con = ...</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> msg <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> channel <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
con<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// send message through RedisTemplate</span>
<span class="token class-name">RedisTemplate</span> template <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
template<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;hello!&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="接受消息" tabindex="-1"><a class="header-anchor" href="#接受消息"><span>接受消息</span></a></h3><p>在接收端，可以通过直接命名或使用模式匹配来订阅一个或多个频道。 后一种方法非常有用，因为它不仅允许使用一个命令创建多个订阅，而且还可以侦听订阅时尚未创建的频道（只要它们匹配模式）。</p><p>在底层，RedisConnection 提供了 subscribe 和 pSubscribe 方法，它们分别映射了 Redis 命令以按频道或按模式订阅。 请注意，可以使用多个通道或模式作为参数。 要更改连接的订阅或查询它是否正在侦听，RedisConnection 提供了 getSubscription 和 isSubscribed 方法。</p><blockquote><p>Spring Data Redis 中的订阅命令被阻塞。 也就是说，在连接上调用 subscribe 会导致当前线程在开始等待消息时阻塞。 只有在取消订阅时才会释放线程，通过另一个线程在同一连接上调用 unsubscribe 或 pUnsubscribe实现 。</p></blockquote><p>如前所述，一旦订阅，连接就会开始等待消息。 仅允许添加新订阅、修改现有订阅和取消现有订阅的命令。 调用 subscribe、pSubscribe、unsubscribe 或 pUnsubscribe 以外的任何内容都会引发异常。</p><p>为了订阅消息，需要实现 MessageListener 回调。 每次有新消息到达时，都会调用回调并且由 onMessage 方法运行用户代码。 该接口不仅可以访问实际消息，还可以访问到频道等信息。</p><h3 id="消息监听器容器" tabindex="-1"><a class="header-anchor" href="#消息监听器容器"><span>消息监听器容器</span></a></h3><p>RedisMessageListenerContainer 充当消息侦听容器。 它用于从 Redis 通道接收消息并驱动注入其中的 MessageListener 实例。 侦听器容器负责消息接收的所有线程并分派到侦听器中进行处理。 消息侦听器容器是 MDP 和消息提供者之间的中介，负责注册接收消息、资源获取和释放、异常转换等。 这让您作为应用程序开发人员可以编写与接收消息相关的业务逻辑，并将样板代码委托给框架。</p><p><code>MessageListener</code> 还可以实现 <code>SubscriptionListener</code> 以在订阅/取消订阅确认时接收通知。 同步调用时，侦听订阅通知很有用。</p><p>此外，为了最小化应用程序占用空间，RedisMessageListenerContainer 允许多个侦听器共享一个连接和一个线程，即使它们不共享订阅。 因此，无论应用程序跟踪多少个侦听器或通道，运行时成本在其整个生命周期中都保持不变。 此外，容器允许运行时配置更改，以便您可以在应用程序运行时添加或删除侦听器，而无需重新启动。 此外，容器使用延迟订阅方法，仅在需要时使用 RedisConnection。 如果所有侦听器都取消订阅，则自动执行清理，并释放线程。</p><p>为了支持处理消息的异步特性，容器需要一个 java.util.concurrent.Executor（或 Spring 的 TaskExecutor）来分发消息。 根据负载、侦听器的数量或运行时环境，您应该更改或调整Executor以更好地满足您的需求。</p><h4 id="messagelisteneradapter" tabindex="-1"><a class="header-anchor" href="#messagelisteneradapter"><span>MessageListenerAdapter</span></a></h4><p>简而言之，它允许您将几乎任何类公开为 MDP（尽管有一些限制）。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MessageDelegate</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token class-name">Map</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token class-name">Serializable</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// pass the channel/pattern as well</span>
  <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token class-name">Serializable</span> message<span class="token punctuation">,</span> <span class="token class-name">String</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，虽然该接口没有继承MessageListener 接口，但它仍然可以通过使用 MessageListenerAdapter 类用作 MDP。 还要注意各种消息处理方法如何根据它们可以接收和处理的各种消息类型的内容进行强类型化。 此外，消息发送到的通道或模式可以作为字符串类型的第二个参数传递给方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultMessageDelegate</span> <span class="token keyword">implements</span> <span class="token class-name">MessageDelegate</span> <span class="token punctuation">{</span>
  <span class="token comment">// implementation elided for clarity...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意 MessageDelegate 接口（上面的 DefaultMessageDelegate 类）完全没有 Redis 依赖项。 它确实是一个 POJO，我们使用以下配置将其制成 MDP：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">redis:</span>listener-container</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">redis:</span>listener</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>listener<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleMessage<span class="token punctuation">&quot;</span></span> <span class="token attr-name">topic</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>chatroom<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">redis:</span>listener-container</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>listener<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>redisexample.DefaultMessageDelegate<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每次接收到消息时，适配器都会自动透明地执行低级格式和所需对象类型之间的转换（使用配置的 RedisSerializer）。 任何由方法调用引起的异常都会被容器捕获并处理（默认情况下，异常会被记录下来）。</p><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务"><span>事务</span></a></h2><p>Redis 通过multi、exec 和discard 命令为事务提供支持。 这些操作在 RedisTemplate 上可用。 但是，RedisTemplate 不保证在同一连接下运行事务中的所有操作。</p><p>Spring Data Redis 提供了 SessionCallback 接口，供同一个连接需要执行多个操作时使用，例如使用Redis事务时。 下面的例子使用了multi方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//execute a transaction</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> txResults <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SessionCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">RedisOperations</span> operations<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DataAccessException</span> <span class="token punctuation">{</span>
    operations<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    operations<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// This will contain the results of all operations in the transaction</span>
    <span class="token keyword">return</span> operations<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Number of items added to set: &quot;</span> <span class="token operator">+</span> txResults<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>exec 方法的返回结果会被对应的序列化器反序列化，还有一个重载方法，可以执行序列化器。</p><h3 id="transactional" tabindex="-1"><a class="header-anchor" href="#transactional"><span>@Transactional</span></a></h3><p>默认情况下，RedisTemplate 不参与 Spring 事务。 如果您希望RedisTemplate 在使用@Transactional 或TransactionTemplate 时使用Redis 事务，则需要通过设置setEnableTransactionSupport(true) 为每个RedisTemplate 显式启用事务支持。 启用事务支持将 RedisConnection 绑定到由 ThreadLocal 支持的当前事务。 如果事务完成且没有错误，Redis 事务将使用 EXEC 提交，否则使用 DISCARD 回滚。 Redis 事务是面向批处理的。 在正在进行的事务期间发出的命令被排队，并且仅在提交事务时应用。</p><p>Spring Data Redis 在正在进行的事务中区分只读和写命令。 只读命令（例如 KEYS）通过管道传输到新的（非线程绑定的）RedisConnection 以允许读取。 写入命令由 RedisTemplate 排队并在提交时应用。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableTransactionManagement</span>           <span class="token comment">//1                      </span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisTxContextConfiguration</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">StringRedisTemplate</span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">StringRedisTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisTemplate</span><span class="token punctuation">(</span><span class="token function">redisConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// explicitly enable transaction support</span>
    template<span class="token punctuation">.</span><span class="token function">setEnableTransactionSupport</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2          </span>
    <span class="token keyword">return</span> template<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">RedisConnectionFactory</span> <span class="token function">redisConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// jedis || Lettuce</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">PlatformTransactionManager</span> <span class="token function">transactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span><span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//3</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>配置 Spring Context 以启用声明式事务管理。</li><li>通过将连接绑定到当前线程来配置 RedisTemplate 以参与事务。</li><li>事务管理需要 PlatformTransactionManager。Spring Data Redis 不附带 PlatformTransactionManager 实现。假设您的应用程序使用 JDBC，Spring Data Redis 可以使用现有的事务管理器参与事务。</li></ol><h2 id="pipelining" tabindex="-1"><a class="header-anchor" href="#pipelining"><span>Pipelining</span></a></h2><p>Redis 提供对流水线的支持，这涉及向服务器发送多个命令而无需等待回复，然后一步读取回复。 当您需要连续发送多个命令时，流水线可以提高性能，例如将许多元素添加到同一个 List。</p><p>Spring Data Redis 提供了几个 RedisTemplate 方法来在管道中运行命令。 如果您不关心流水线操作的结果，您可以使用标准的 execute 方法，为流水线参数传递 true。 executePipelined 方法在管道中运行提供的 RedisCallback 或 SessionCallback 并返回结果，如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//pop a specified number of items from a queue</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> results <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">executePipelined</span><span class="token punctuation">(</span>
  <span class="token keyword">new</span> <span class="token class-name">RedisCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">doInRedis</span><span class="token punctuation">(</span><span class="token class-name">RedisConnection</span> connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DataAccessException</span> <span class="token punctuation">{</span>
      <span class="token class-name">StringRedisConnection</span> stringRedisConn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StringRedisConnection</span><span class="token punctuation">)</span>connection<span class="token punctuation">;</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> batchSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        stringRedisConn<span class="token punctuation">.</span><span class="token function">rPop</span><span class="token punctuation">(</span><span class="token string">&quot;myqueue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，从 RedisCallback 返回的值必须为 null，因为为了返回流水线命令的结果而丢弃该值。</p><h2 id="redis工具包" tabindex="-1"><a class="header-anchor" href="#redis工具包"><span>redis工具包</span></a></h2><p>包 org.springframework.data.redis.support 提供了各种依赖 Redis 作为后备存储的可重用组件。 目前，该包包含基于 Redis 的各种 JDK 接口实现，例如原子计数器和 JDK 集合。以RedisList为列：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>queue<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.data.redis.support.collections.DefaultRedisList<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>redisTemplate<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>queue-key<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnotherExample</span> <span class="token punctuation">{</span>
  <span class="token comment">// injected</span>
  <span class="token keyword">private</span> <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> queue<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addTag</span><span class="token punctuation">(</span><span class="token class-name">String</span> tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="redis缓存" tabindex="-1"><a class="header-anchor" href="#redis缓存"><span>redis缓存</span></a></h2><p>Spring Redis 通过 org.springframework.data.redis.cache 包提供了 Spring 缓存抽象的实现。 要使用 Redis 作为后备实现，请将 RedisCacheManager 添加到您的配置中，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">RedisCacheManager</span> <span class="token function">cacheManager</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token class-name">RedisCacheManager</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RedisCacheManager 行为可以使用 RedisCacheManagerBuilder 进行配置，让您可以设置默认的 RedisCacheConfiguration、事务行为和预定义的缓存。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RedisCacheManager</span> cm <span class="token operator">=</span> <span class="token class-name">RedisCacheManager</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">cacheDefaults</span><span class="token punctuation">(</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">withInitialCacheConfigurations</span><span class="token punctuation">(</span><span class="token function">singletonMap</span><span class="token punctuation">(</span><span class="token string">&quot;predefined&quot;</span><span class="token punctuation">,</span> <span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disableCachingNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">transactionAware</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 RedisCacheManager 创建的 RedisCache 的行为是使用 RedisCacheConfiguration 定义的。 该配置允许您设置key过期时间、前缀和 RedisSerializer 实现，如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RedisCacheConfiguration</span> config <span class="token operator">=</span> <span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">disableCachingNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RedisCacheManager 默认为无锁 RedisCacheWriter (用于读取和写入二进制值)。 无锁缓存提高了吞吐量。 缺少条目锁定可能会导致 putIfAbsent 和 clean 方法出现重叠的非原子命令，因为这些方法需要将多个命令发送到 Redis。 锁定对应物通过设置显式锁定key并检查此key的存在来防止命令重叠，这会导致额外的请求和潜在的命令等待时间。可以选择加入锁定行为，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RedisCacheManager</span> cm <span class="token operator">=</span> <span class="token class-name">RedisCacheManager</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">RedisCacheWriter</span><span class="token punctuation">.</span><span class="token function">lockingRedisCacheWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">cacheDefaults</span><span class="token punctuation">(</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，缓存条目的任何键都以实际缓存名称为前缀，后跟两个冒号。 此行为可以更改为静态和计算前缀。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// static key prefix</span>
<span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prefixKeysWith</span><span class="token punctuation">(</span><span class="token string">&quot;( ͡° ᴥ ͡°)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// computed key prefix</span>
<span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">computePrefixWith</span><span class="token punctuation">(</span>cacheName <span class="token operator">-&gt;</span> <span class="token string">&quot;¯\\_(ツ)_/¯&quot;</span> <span class="token operator">+</span> cacheName<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RedisCacheManager默认设置：</p><table><thead><tr><th style="text-align:left;">Setting</th><th style="text-align:left;">Value</th></tr></thead><tbody><tr><td style="text-align:left;">Cache Writer</td><td style="text-align:left;">Non-locking</td></tr><tr><td style="text-align:left;">Cache Configuration</td><td style="text-align:left;"><code>RedisCacheConfiguration#defaultConfiguration</code></td></tr><tr><td style="text-align:left;">Initial Caches</td><td style="text-align:left;">None</td></tr><tr><td style="text-align:left;">Transaction Aware</td><td style="text-align:left;">No</td></tr></tbody></table><p><strong>RedisCacheConfiguration</strong> 默认设置</p><table><thead><tr><th>Cache <code>null</code></th><th>Yes</th></tr></thead><tbody><tr><td>Prefix Keys</td><td>Yes</td></tr><tr><td>Default Prefix</td><td>The actual cache name</td></tr><tr><td>Key Serializer</td><td><code>StringRedisSerializer</code></td></tr><tr><td>Value Serializer</td><td><code>JdkSerializationRedisSerializer</code></td></tr><tr><td>Conversion Service</td><td><code>DefaultFormattingConversionService</code> with default cache key converters</td></tr></tbody></table><p>默认情况下 RedisCache，统计信息被禁用。 使用 RedisCacheManagerBuilder.enableStatistics() 通过 RedisCache#getStatistics() 收集本地命中和未命中，返回所收集数据的快照。</p><h1 id="redis存储库" tabindex="-1"><a class="header-anchor" href="#redis存储库"><span>redis存储库</span></a></h1><p><strong>Redis Repositories 至少需要 Redis Server 版本 2.8.0，并且不支持事务。 确保使用禁用事务支持的 RedisTemplate。</strong></p><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RedisHash</span><span class="token punctuation">(</span><span class="token string">&quot;people&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Id</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>
  <span class="token class-name">String</span> firstname<span class="token punctuation">;</span>
  <span class="token class-name">String</span> lastname<span class="token punctuation">;</span>
  <span class="token class-name">Address</span> address<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PersonRepository</span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableRedisRepositories</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationConfig</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">RedisConnectionFactory</span> <span class="token function">connectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JedisConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> template<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@Autowired</span> <span class="token class-name">PersonRepository</span> repo<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">basicCrudOperations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token class-name">Person</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;rand&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;al&#39;thor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  rand<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">&quot;emond&#39;s field&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;andor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  repo<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>rand<span class="token punctuation">)</span><span class="token punctuation">;</span>                                         

  repo<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              

  repo<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            

  repo<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>rand<span class="token punctuation">)</span><span class="token punctuation">;</span>                                       
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象映射基础" tabindex="-1"><a class="header-anchor" href="#对象映射基础"><span>对象映射基础</span></a></h2><h3 id="创建对象" tabindex="-1"><a class="header-anchor" href="#创建对象"><span>创建对象</span></a></h3><p>Spring Data 会自动检测实体的构造函数。 解析算法的工作原理如下：</p><ul><li>如果只有一个构造函数，则使用它。</li><li>如果有多个构造函数，并且只有一个用 @PersistenceConstructor 注释，则使用它。</li><li>如果有无参数构造函数，则使用它。 其他构造函数将被忽略。</li></ul><p>值解析假定构造函数参数名称与实体的属性名称匹配，即解析将被执行。 这还需要类文件中可用的参数名称信息或构造函数中存在的 @ConstructorProperties 注释。</p><p>值解析可以通过使用 Spring Framework 的 @Value 值注释使用特定于store的 SpEL 表达式进行自定义。</p><p>为了避免反射的开销，Spring Data 在运行时生成对应的工厂类，它会直接调用域类构造函数。例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstname<span class="token punctuation">,</span> <span class="token class-name">String</span> lastname<span class="token punctuation">)</span> <span class="token punctuation">{</span> … <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行时创建工厂类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">PersonObjectInstantiator</span> <span class="token keyword">implements</span> <span class="token class-name">ObjectInstantiator</span> <span class="token punctuation">{</span>

  <span class="token class-name">Object</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这使我们比反射提高了大约 10% 的性能。 对于实体类还有一些限制：</p><ul><li>不能是私有类</li><li>不能是非静态内部类</li><li>不能是CGLib代理的类</li><li>构造函数不能是私有的</li></ul><p>如果不能满足上面的任一条件，将使用反射。</p><h3 id="属性填充" tabindex="-1"><a class="header-anchor" href="#属性填充"><span>属性填充</span></a></h3><p>一旦创建了实体的实例，Spring Data 就会填充该类的所有剩余持久属性。 除非实体的构造函数已经填充（即通过其构造函数参数列表），首先填充标识符属性以解决循环对象引用。 之后，所有尚未由构造函数填充的非瞬态属性。 为此，我们使用以下算法：</p><ul><li>如果属性是不可变的，但公开了 with... 方法（见下文），我们使用 with... 方法创建一个具有新属性值的新实体实例。</li><li>如果定义了属性访问（即通过 getter 和 setter 访问），我们将调用 setter 方法。</li><li>如果属性是可变的，我们直接设置字段。</li><li>如果属性是不可变的，我们将使用持久性操作（请参阅对象创建）使用的构造函数来创建实例的副本。</li><li>默认情况下，我们直接设置字段值。</li></ul><p>与我们在对象构造中的优化类似，我们也使用 Spring Data 运行时生成的访问器类与实体实例进行交互。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> firstname<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token annotation punctuation">@AccessType</span><span class="token punctuation">(</span><span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">PROPERTY</span><span class="token punctuation">)</span> <span class="token class-name">String</span> lastname<span class="token punctuation">;</span>

  <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> firstname<span class="token punctuation">,</span> <span class="token class-name">String</span> lastname<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Field assignments</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">Person</span> <span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstname<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastame<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">setLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>lastname <span class="token operator">=</span> lastname<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">PersonPropertyAccessor</span> <span class="token keyword">implements</span> <span class="token class-name">PersistentPropertyAccessor</span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">MethodHandle</span> firstname<span class="token punctuation">;</span>              <span class="token comment">//2</span>

  <span class="token keyword">private</span> <span class="token class-name">Person</span> person<span class="token punctuation">;</span>           <span class="token comment">// 1                         </span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token class-name">PersistentProperty</span> property<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> name <span class="token operator">=</span> property<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;firstname&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      firstname<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//2       </span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>person <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//3   </span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;lastname&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>person<span class="token punctuation">.</span><span class="token function">setLastname</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//4       </span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>PropertyAccessor 持有底层对象的可变实例。</li><li>默认情况下，Spring Data 使用字段访问来读取和写入属性值。 根据私有字段的可见性规则，MethodHandles 用于与字段交互。</li><li>该类公开了一个用于设置标识符的 withId(...) 方法，例如 当一个实例被插入到数据存储中并且一个标识符已经生成时。 调用 withId(...) 创建一个新的 Person 对象。 所有后续突变都将在新实例中发生，而前一个则保持不变。</li><li>使用属性访问,而不是 MethodHandles 的直接方法调用。</li></ol><p>这使我们比反射提高了大约 25% 的性能。 但是域类也有一些限制：</p><ul><li>类型不得位于 java 包下。</li><li>类型及其构造函数必须是public</li><li>作为内部类的类型必须是静态的。</li><li>使用的 Java 运行时必须允许在原始 ClassLoader 中声明类。 Java 9 和更新版本施加了某些限制。</li></ul><p>默认情况下，Spring Data 会尝试使用生成的属性访问器，并在检测到限制时回退到基于反射的访问器。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token annotation punctuation">@Id</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>               <span class="token comment">// 1                                 </span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> firstname<span class="token punctuation">,</span> lastname<span class="token punctuation">;</span>    <span class="token comment">//2                             </span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">LocalDate</span> birthday<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>                          <span class="token comment">//3                          </span>

  <span class="token keyword">private</span> <span class="token class-name">String</span> comment<span class="token punctuation">;</span>                            <span class="token comment">//4                       </span>
  <span class="token keyword">private</span> <span class="token annotation punctuation">@AccessType</span><span class="token punctuation">(</span><span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">PROPERTY</span><span class="token punctuation">)</span> <span class="token class-name">String</span> remarks<span class="token punctuation">;</span>    <span class="token comment">//5                    </span>

  <span class="token keyword">static</span> <span class="token class-name">Person</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstname<span class="token punctuation">,</span> <span class="token class-name">String</span> lastname<span class="token punctuation">,</span> <span class="token class-name">LocalDate</span> birthday<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//6</span>

    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> firstname<span class="token punctuation">,</span> lastname<span class="token punctuation">,</span> birthday<span class="token punctuation">,</span>
      <span class="token class-name">Period</span><span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>birthday<span class="token punctuation">,</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getYears</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> firstname<span class="token punctuation">,</span> <span class="token class-name">String</span> lastname<span class="token punctuation">,</span> <span class="token class-name">LocalDate</span> birthday<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//6</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>firstname <span class="token operator">=</span> firstname<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>lastname <span class="token operator">=</span> lastname<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">Person</span> <span class="token function">withId</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//1                              </span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstname<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastname<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birthday<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">setRemarks</span><span class="token punctuation">(</span><span class="token class-name">String</span> remarks<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">//5                                  </span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>remarks <span class="token operator">=</span> remarks<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>id是final并且在构造函数中设置为null。该类公开了一个用于设置标识符的 withId(...) 方法，例如 当一个实例被插入到数据存储中并且生成一个标识符。创建新实例时，原始 Person 实例保持不变。相同的模式通常应用于由存储管理但可能必须为持久性操作更改的其他属性。wither 方法是可选的，因为持久性构造函数（参见 6）实际上是一个复制构造函数，并且设置该属性将被转换为创建一个应用新标识符值的新实例。</li><li>firstname 和 lastname 属性是可能通过 getter 公开的普通不可变属性。</li><li>age 属性是不可变的，但从birthday 属性派生而来。使用所示设计，数据库值将胜过默认值，因为 Spring Data 使用唯一声明的构造函数。即使意图是计算应该是首选，重要的是此构造函数也将年龄作为参数（可能会忽略它），否则属性填充步骤将尝试设置年龄字段 。并由于它不可变且不存在with......方法存在 而失败 。</li><li>comment属性是可变的，可以直接设置。</li><li>remarks 属性是可变的，通过setter设置</li><li>该类公开了一个工厂方法和一个用于创建对象的构造函数。这里的核心思想是使用工厂方法而不是额外的构造函数，避免通过@PersistenceConstructor 来消除构造函数歧义。相反，属性的默认设置是在工厂方法中处理的。</li></ol><h3 id="域对象建议" tabindex="-1"><a class="header-anchor" href="#域对象建议"><span>域对象建议</span></a></h3><ul><li>尽量使用不可变对象：仅构造函数实现比属性填充快 30%。</li><li>提供全参数的构造函数：即使您不能或不想将实体建模为不可变值，提供将实体的所有属性（包括可变属性）作为参数的构造函数仍然有价值，因为这允许对象映射跳过属性填充 以获得最佳性能。</li><li>使用工厂方法而不是重载构造函数来避免@PersistenceConstructor</li><li>确保实例化器和属性访问器遵守约束</li><li>对于要生成的标识符，仍然使用 final 字段与全参数持久性构造函数（首选）或 with... 方法的组合</li><li>使用 Lombok 避免样板代码</li></ul><h2 id="object-to-hash" tabindex="-1"><a class="header-anchor" href="#object-to-hash"><span>Object-to-Hash</span></a></h2><p>Redis 存储库支持将对象持久化为哈希。 这需要由 RedisConverter 完成Object-to-Hash 转换。例如上面的Person类，映射结果如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>_class <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span></span>Person</span>                 
id <span class="token operator">=</span> e2c7dcee<span class="token operator">-</span>b8cd<span class="token operator">-</span><span class="token number">4424</span><span class="token operator">-</span><span class="token number">883e-736</span>ce564363e
firstname <span class="token operator">=</span> rand                            
lastname <span class="token operator">=</span> al’thor
address<span class="token punctuation">.</span>city <span class="token operator">=</span> emond&#39;s field                
address<span class="token punctuation">.</span>country <span class="token operator">=</span> andor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认的映射规则</p><table><thead><tr><th>Type</th><th>Sample</th><th>Mapped Value</th></tr></thead><tbody><tr><td>Simple Type (for example, String)</td><td>String firstname = &quot;rand&quot;;</td><td>firstname = &quot;rand&quot;</td></tr><tr><td>Byte array (<code>byte[]</code>)</td><td>byte[] image = &quot;rand&quot;.getBytes();</td><td>image = &quot;rand&quot;</td></tr><tr><td>Complex Type (for example, Address)</td><td>Address address = new Address(&quot;emond’s field&quot;);</td><td>address.city = &quot;emond’s field&quot;</td></tr><tr><td>List of Simple Type</td><td>List nicknames = asList(&quot;dragon reborn&quot;, &quot;lews therin&quot;);</td><td>nicknames.[0] = &quot;dragon reborn&quot;, nicknames.[1] = &quot;lews therin&quot;</td></tr><tr><td>Map of Simple Type</td><td>Map&lt;String, String&gt; atts = asMap({&quot;eye-color&quot;, &quot;grey&quot;}, {&quot;…</td><td>atts.[eye-color] = &quot;grey&quot;, atts.[hair-color] = &quot;…</td></tr><tr><td>List of Complex Type</td><td>List addresses = asList(new Address(&quot;em…</td><td>addresses.[0].city = &quot;emond’s field&quot;, addresses.[1].city = &quot;…</td></tr><tr><td>Map of Complex Type</td><td>Map&lt;String, Address&gt; addresses = asMap({&quot;home&quot;, new Address(&quot;em…</td><td>addresses.[home].city = &quot;emond’s field&quot;, addresses.[work].city = &quot;…</td></tr></tbody></table><blockquote><p>由于扁平表示结构，Map 键需要是简单的类型，例如 String 或 Number。</p></blockquote><p>映射行为可以通过在 RedisCustomConversions 中注册相应的 Converter 来自定义。 这些转换器可以处理单个 byte[] 以及 Map&lt;String,byte[]&gt; 的转换。 第一个适用于（例如）将复杂类型转换为（例如）二进制 JSON 表示。 第二个选项提供对结果散列的完全控制。</p><blockquote><p>将对象写入 Redis 散列会从散列中删除内容并重新创建整个散列，因此未映射的数据将丢失。</p></blockquote><p>以下示例显示了两个示例字节数组转换器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@WritingConverter</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddressToBytesConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token operator">&lt;</span><span class="token class-name">Address</span><span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Address</span><span class="token punctuation">&gt;</span></span> serializer<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">AddressToBytesConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    serializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Address</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Address</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    serializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">Address</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> serializer<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@ReadingConverter</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BytesToAddressConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Address</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Address</span><span class="token punctuation">&gt;</span></span> serializer<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">BytesToAddressConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    serializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Address</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Address</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    serializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">Address</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> serializer<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用前面的字节数组 Converter 会产生类似于以下内容的输出：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>_class <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span></span>Person</span>
id <span class="token operator">=</span> e2c7dcee<span class="token operator">-</span>b8cd<span class="token operator">-</span><span class="token number">4424</span><span class="token operator">-</span><span class="token number">883e-736</span>ce564363e
firstname <span class="token operator">=</span> rand
lastname <span class="token operator">=</span> al’thor
address <span class="token operator">=</span> <span class="token punctuation">{</span> city <span class="token operator">:</span> <span class="token string">&quot;emond&#39;s field&quot;</span><span class="token punctuation">,</span> country <span class="token operator">:</span> <span class="token string">&quot;andor&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下示例显示了 Map 转换器的两个示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@WritingConverter</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddressToMapConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token operator">&lt;</span><span class="token class-name">Address</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">Address</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">singletonMap</span><span class="token punctuation">(</span><span class="token string">&quot;ciudad&quot;</span><span class="token punctuation">,</span> source<span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@ReadingConverter</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapToAddressConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token operator">&lt;</span><span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Address</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">Address</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;ciudad&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用前面的 Map Converter 会产生类似于以下内容的输出：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>_class <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span></span>Person</span>
id <span class="token operator">=</span> e2c7dcee<span class="token operator">-</span>b8cd<span class="token operator">-</span><span class="token number">4424</span><span class="token operator">-</span><span class="token number">883e-736</span>ce564363e
firstname <span class="token operator">=</span> rand
lastname <span class="token operator">=</span> al’thor
ciudad <span class="token operator">=</span> <span class="token string">&quot;emond&#39;s field&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义类型映射" tabindex="-1"><a class="header-anchor" href="#自定义类型映射"><span>自定义类型映射</span></a></h3><p>如果你不想序列化的内容包含整个类名，而是希望使用一个key代替，你可以在类型上使用@TypeAlias注解。如果你想进一步定制化，可以参考TypeInformationMapper接口，默认实现是DefaultRedisTypeMapper（被MappingRedisConverter使用）。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@TypeAlias</span><span class="token punctuation">(</span><span class="token string">&quot;pers&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成的文档包含 pers 作为 _class 字段中的值。</p><p>以下示例演示了如何在 MappingRedisConverter 中配置自定义 RedisTypeMapper：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">CustomRedisTypeMapper</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultRedisTypeMapper</span> <span class="token punctuation">{</span>
  <span class="token comment">//implement custom type mapping here</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">class</span> <span class="token class-name">SampleRedisConfiguration</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">MappingRedisConverter</span> <span class="token function">redisConverter</span><span class="token punctuation">(</span><span class="token class-name">RedisMappingContext</span> mappingContext<span class="token punctuation">,</span>
        <span class="token class-name">RedisCustomConversions</span> customConversions<span class="token punctuation">,</span> <span class="token class-name">ReferenceResolver</span> referenceResolver<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">MappingRedisConverter</span> mappingRedisConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MappingRedisConverter</span><span class="token punctuation">(</span>mappingContext<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> referenceResolver<span class="token punctuation">,</span>
            <span class="token function">customTypeMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    mappingRedisConverter<span class="token punctuation">.</span><span class="token function">setCustomConversions</span><span class="token punctuation">(</span>customConversions<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> mappingRedisConverter<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">RedisTypeMapper</span> <span class="token function">customTypeMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomRedisTypeMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="keyspaces" tabindex="-1"><a class="header-anchor" href="#keyspaces"><span>Keyspaces</span></a></h2><p>Keyspaces 为保存对象的redis hash定义前缀，前缀设置为 getClass().getName()。您可以通过在聚合根级别设置 @RedisHash 或设置编程配置来更改此默认值。 但是，@Keyspace覆盖其他配置。</p><p>以下示例显示如何使用 @EnableRedisRepositories 注解设置键空间配置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableRedisRepositories</span><span class="token punctuation">(</span>keyspaceConfiguration <span class="token operator">=</span> <span class="token class-name">MyKeyspaceConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationConfig</span> <span class="token punctuation">{</span>

  <span class="token comment">//... RedisConnectionFactory and RedisTemplate Bean definitions omitted</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyKeyspaceConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">KeyspaceConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">KeyspaceSettings</span><span class="token punctuation">&gt;</span></span> <span class="token function">initialConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KeyspaceSettings</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;people&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下示例显示了如何以编程方式设置键空间：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableRedisRepositories</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationConfig</span> <span class="token punctuation">{</span>

  <span class="token comment">//... RedisConnectionFactory and RedisTemplate Bean definitions omitted</span>

  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">RedisMappingContext</span> <span class="token function">keyValueMappingContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RedisMappingContext</span><span class="token punctuation">(</span>
      <span class="token keyword">new</span> <span class="token class-name">MappingConfiguration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IndexConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyKeyspaceConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyKeyspaceConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">KeyspaceConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">KeyspaceSettings</span><span class="token punctuation">&gt;</span></span> <span class="token function">initialConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KeyspaceSettings</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;people&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二级索引" tabindex="-1"><a class="header-anchor" href="#二级索引"><span>二级索引</span></a></h2><p>二级索引用于启用基于本机 Redis 结构的查找操作。 每次保存时都会将值写入相应的索引，并在对象被删除或过期时将其删除。</p><h3 id="简单的属性索引" tabindex="-1"><a class="header-anchor" href="#简单的属性索引"><span>简单的属性索引</span></a></h3><p>给定前面显示的示例 Person 实体，我们可以通过使用 @Indexed 注释属性来为 firstname 创建索引，如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RedisHash</span><span class="token punctuation">(</span><span class="token string">&quot;people&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Id</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>
  <span class="token annotation punctuation">@Indexed</span> <span class="token class-name">String</span> firstname<span class="token punctuation">;</span>
  <span class="token class-name">String</span> lastname<span class="token punctuation">;</span>
  <span class="token class-name">Address</span> address<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>索引是为实际属性值建立的。 保存两个 Person（例如，“rand”和“aviendha”）会导致设置类似于以下内容的索引：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>SADD people:firstname:rand e2c7dcee-b8cd-4424-883e-736ce564363e
SADD people:firstname:aviendha a9d4b3a0-50d3-4538-a2fc-f7fc2581ee56
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>嵌套元素也可以有索引。 假设Address有一个用@Indexed 注释的city属性。 在这种情况下，一旦 person.address.city 不为空，我们就有了每个city的 Sets，如下例所示：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>SADD people:address.city:tear e2c7dcee-b8cd-4424-883e-736ce564363e
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此外，可以对map和list属性创建索引，如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RedisHash</span><span class="token punctuation">(</span><span class="token string">&quot;people&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>

  <span class="token comment">// ... other properties omitted</span>

  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> attributes<span class="token punctuation">;</span>      
  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> relatives<span class="token punctuation">;</span>       
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Address</span><span class="token punctuation">&gt;</span></span> addresses<span class="token punctuation">;</span>            
<span class="token punctuation">}</span>
<span class="token constant">SADD</span> people<span class="token operator">:</span>attributes<span class="token punctuation">.</span>map<span class="token operator">-</span>key<span class="token operator">:</span>map<span class="token operator">-</span>value e2c7dcee<span class="token operator">-</span>b8cd<span class="token operator">-</span><span class="token number">4424</span><span class="token operator">-</span><span class="token number">883e-736</span>ce564363e
<span class="token constant">SADD</span> people<span class="token operator">:</span>relatives<span class="token punctuation">.</span>map<span class="token operator">-</span>key<span class="token punctuation">.</span>firstname<span class="token operator">:</span>tam e2c7dcee<span class="token operator">-</span>b8cd<span class="token operator">-</span><span class="token number">4424</span><span class="token operator">-</span><span class="token number">883e-736</span>ce564363e
<span class="token constant">SADD</span> people<span class="token operator">:</span>addresses<span class="token punctuation">.</span>city<span class="token operator">:</span>tear e2c7dcee<span class="token operator">-</span>b8cd<span class="token operator">-</span><span class="token number">4424</span><span class="token operator">-</span><span class="token number">883e-736</span>ce564363e
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与键空间一样，您可以配置索引而无需注释实际域类型，如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableRedisRepositories</span><span class="token punctuation">(</span>indexConfiguration <span class="token operator">=</span> <span class="token class-name">MyIndexConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationConfig</span> <span class="token punctuation">{</span>

  <span class="token comment">//... RedisConnectionFactory and RedisTemplate Bean definitions omitted</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyIndexConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">IndexConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IndexDefinition</span><span class="token punctuation">&gt;</span></span> <span class="token function">initialConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleIndexDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;people&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;firstname&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，与键空间一样，您可以以编程方式配置索引，如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableRedisRepositories</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationConfig</span> <span class="token punctuation">{</span>

  <span class="token comment">//... RedisConnectionFactory and RedisTemplate Bean definitions omitted</span>

  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">RedisMappingContext</span> <span class="token function">keyValueMappingContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RedisMappingContext</span><span class="token punctuation">(</span>
      <span class="token keyword">new</span> <span class="token class-name">MappingConfiguration</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token class-name">KeyspaceConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyIndexConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyIndexConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">IndexConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IndexDefinition</span><span class="token punctuation">&gt;</span></span> <span class="token function">initialConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleIndexDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;people&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;firstname&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="geospatial-索引" tabindex="-1"><a class="header-anchor" href="#geospatial-索引"><span>Geospatial 索引</span></a></h3><p>假设 Address 类型包含 Point 类型的 location 属性，该属性保存特定地址的地理坐标。 通过使用 @GeoIndexed 注释属性，Spring Data Redis 使用 Redis GEO 命令添加这些值，如以下示例所示</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RedisHash</span><span class="token punctuation">(</span><span class="token string">&quot;people&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>

  <span class="token class-name">Address</span> address<span class="token punctuation">;</span>

  <span class="token comment">// ... other properties omitted</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@GeoIndexed</span> <span class="token class-name">Point</span> location<span class="token punctuation">;</span>

  <span class="token comment">// ... other properties omitted</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PersonRepository</span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByAddressLocationNear</span><span class="token punctuation">(</span><span class="token class-name">Point</span> point<span class="token punctuation">,</span> <span class="token class-name">Distance</span> distance<span class="token punctuation">)</span><span class="token punctuation">;</span>     
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByAddressLocationWithin</span><span class="token punctuation">(</span><span class="token class-name">Circle</span> circle<span class="token punctuation">)</span><span class="token punctuation">;</span>                    
<span class="token punctuation">}</span>

<span class="token class-name">Person</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;rand&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;al&#39;thor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
rand<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">13.361389D</span><span class="token punctuation">,</span> <span class="token number">38.115556D</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>rand<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                        

repository<span class="token punctuation">.</span><span class="token function">findByAddressLocationNear</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">15D</span><span class="token punctuation">,</span> <span class="token number">37D</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Distance</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token constant">GEOADD</span> people<span class="token operator">:</span>address<span class="token operator">:</span>location <span class="token number">13.361389</span> <span class="token number">38.115556</span> e2c7dcee<span class="token operator">-</span>b8cd<span class="token operator">-</span><span class="token number">4424</span><span class="token operator">-</span><span class="token number">883e-736</span>ce564363e
<span class="token constant">GEORADIUS</span> people<span class="token operator">:</span>address<span class="token operator">:</span>location <span class="token number">15.0</span> <span class="token number">37.0</span> <span class="token number">200.0</span> km
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="query-by-example" tabindex="-1"><a class="header-anchor" href="#query-by-example"><span>Query by Example</span></a></h2><p>Query by Example API 包含三部分：</p><ul><li>Probe：域对象</li><li>ExampleMatcher：ExampleMatcher 包含有关如何匹配特定字段的详细信息。 它可以在多个示例中重复使用。</li><li>Example：由Probe和ExampleMatcher组成，用于创建查询。</li></ul><p>Query by Example 非常适合以下几个用例：</p><ul><li>使用一组静态或动态约束查询您的数据存储。</li><li>频繁重构域对象而不必担心破坏现有查询。</li><li>独立于底层数据存储 API 工作。</li></ul><p>Query by Example 也有几个限制：</p><ul><li>不支持嵌套或分组的属性约束，例如 <code>firstname = ?0 or (firstname = ?1 and lastname = ?2)</code>。</li><li>仅支持字符串的开始/包含/结束/正则表达式匹配以及其他属性类型的精确匹配。</li></ul><h3 id="examplematcher" tabindex="-1"><a class="header-anchor" href="#examplematcher"><span>ExampleMatcher</span></a></h3><p>您可以使用 ExampleMatcher 为字符串匹配、空处理和特定于属性的设置指定自己的默认值，如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          
person<span class="token punctuation">.</span><span class="token function">setFirstname</span><span class="token punctuation">(</span><span class="token string">&quot;Dave&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           

<span class="token class-name">ExampleMatcher</span> matcher <span class="token operator">=</span> <span class="token class-name">ExampleMatcher</span><span class="token punctuation">.</span><span class="token function">matching</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     
  <span class="token punctuation">.</span><span class="token function">withIgnorePaths</span><span class="token punctuation">(</span><span class="token string">&quot;lastname&quot;</span><span class="token punctuation">)</span>                         
  <span class="token punctuation">.</span><span class="token function">withIncludeNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                             
  <span class="token punctuation">.</span><span class="token function">withStringMatcher</span><span class="token punctuation">(</span><span class="token class-name">StringMatcher</span><span class="token punctuation">.</span><span class="token constant">ENDING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            

<span class="token class-name">Example</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> example <span class="token operator">=</span> <span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> matcher<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下， ExampleMatcher 期望在探测器上设置的所有值都匹配。 如果您只想满足部分条件，请使用 ExampleMatcher.matchingAny()。</p><p>您可以为单个属性指定行为，如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ExampleMatcher</span> matcher <span class="token operator">=</span> <span class="token class-name">ExampleMatcher</span><span class="token punctuation">.</span><span class="token function">matching</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">withMatcher</span><span class="token punctuation">(</span><span class="token string">&quot;firstname&quot;</span><span class="token punctuation">,</span> <span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">withMatcher</span><span class="token punctuation">(</span><span class="token string">&quot;lastname&quot;</span><span class="token punctuation">,</span> <span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ignoreCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一种配置匹配器选项的方法是使用 lambdas（在 Java 8 中引入）:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ExampleMatcher</span> matcher <span class="token operator">=</span> <span class="token class-name">ExampleMatcher</span><span class="token punctuation">.</span><span class="token function">matching</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">withMatcher</span><span class="token punctuation">(</span><span class="token string">&quot;firstname&quot;</span><span class="token punctuation">,</span> match <span class="token operator">-&gt;</span> match<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">withMatcher</span><span class="token punctuation">(</span><span class="token string">&quot;firstname&quot;</span><span class="token punctuation">,</span> match <span class="token operator">-&gt;</span> match<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-1" tabindex="-1"><a class="header-anchor" href="#使用-1"><span>使用</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">PersonRepository</span> <span class="token keyword">extends</span> <span class="token class-name">QueryByExampleExecutor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">PersonService</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Autowired</span> <span class="token class-name">PersonRepository</span> personRepository<span class="token punctuation">;</span>

  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token function">findPeople</span><span class="token punctuation">(</span><span class="token class-name">Person</span> probe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> personRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>probe<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Redis 存储库及其二级索引支持Query by Example的部分功能。 特别是，仅使用精确、区分大小写和非空值来构造查询。</p><p>二级索引使用基于集合的操作（集合交集、集合并集）来确定匹配的键。 向未编入索引的查询添加属性不会返回任何结果，因为不存在索引。 Query by Example 支持检查索引配置以仅包含查询中由索引覆盖的属性。 这是为了防止意外包含非索引属性。</p><p>不区分大小写的查询和不受支持的 StringMatcher 实例在运行时被拒绝。以下列表显示了支持的示例查询选项：</p><ul><li>区分大小写，简单和嵌套属性的精确匹配</li><li>Any/All匹配模式</li><li>标准值的值转换</li><li>从条件中排除空值</li></ul><p>以下列表显示了 Query by Example 不支持的属性：</p><ul><li>不区分大小写的匹配</li><li>Regex, prefix/contains/suffix String-matching</li><li>查询关联、集合和类似Map的属性</li><li>从条件中包含空值</li><li>findAll 排序</li></ul><h2 id="生存时间" tabindex="-1"><a class="header-anchor" href="#生存时间"><span>生存时间</span></a></h2><p>存储在 Redis 中的对象可能仅在一定时间内有效。 这对于在 Redis 中持久化短期对象特别有用，而无需在它们达到生命周期结束时手动删除它们。 可以使用 @RedisHash(timeToLive=… ) 以及使用 KeyspaceSettings（参见 Keyspaces）设置以秒为单位的过期时间。</p><p>可以通过在数字属性或方法上使用 @TimeToLive 注释来设置更灵活的到期时间。 但是，不要在同一类中的方法和属性上同时应用 @TimeToLive。 以下示例显示了属性和方法上的 @TimeToLive 注释：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeToLiveOnProperty</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Id</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@TimeToLive</span>
  <span class="token keyword">private</span> <span class="token class-name">Long</span> expiration<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeToLiveOnMethod</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Id</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@TimeToLive</span>
  <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getTimeToLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 @TimeToLive 显式注释属性会从 Redis 读回实际的 TTL 或 PTTL 值。 -1 表示对象没有关联的过期时间。</p><p>存储库实现确保通过 RedisMessageListenerContainer 订阅 Redis key空间通知。</p><p>当到期时间设置为正值时，将运行相应的 EXPIRE 命令。 除了保留原始副本外，Redis 中还保留了一个幻影副本，并设置为在原始副本之后五分钟过期。 这样做是为了让 Repository 支持发布 RedisKeyExpiredEvent，只要一个键过期，就会在 Spring 的 ApplicationEventPublisher 中持有过期的值，即使原始值已经被删除。 在使用 Spring Data Redis 存储库的所有连接的应用程序上接收到期事件。</p><p>默认情况下，初始化应用程序时禁用key过期侦听器。 可以在 @EnableRedisRepositories 或 RedisKeyValueAdapter 中调整启动模式，以使用应用程序或在第一次插入具有 TTL 的实体时启动侦听器。 有关可能的值，请参阅 EnableKeyspaceEvents。</p><p>RedisKeyExpiredEvent 保存过期域对象的副本以及key。</p><p>延迟或禁用到期事件侦听器启动会影响 RedisKeyExpiredEvent 发布。 禁用的事件侦听器不会发布到期事件。 由于侦听器初始化延迟，延迟启动可能会导致事件丢失。</p><p>keyspace 通知消息侦听器会更改 Redis 中的 notify-keyspace-events 设置（如果尚未设置）。 现有设置不会被覆盖，因此您必须正确设置这些设置（或将它们留空）。 请注意，AWS ElastiCache 上禁用了 CONFIG，启用侦听器会导致错误。</p><p>Redis Pub/Sub 消息不是持久的。 如果在应用程序关闭时某个键过期，则不会处理过期事件，这可能会导致二级索引包含对过期对象的引用。</p><p>@EnableKeyspaceEvents(shadowCopy = OFF) 禁用虚拟副本的存储并减少 Redis 中的数据大小。 RedisKeyExpiredEvent 将只包含过期键的 id。</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference"><span>@Reference</span></a></h2><p>使用 @Reference 标记属性允许存储一个简单的键引用，而不是将值复制到哈希本身中。 从 Redis 加载时，引用会自动解析并映射回对象，如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>_class <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span></span>Person</span>
id <span class="token operator">=</span> e2c7dcee<span class="token operator">-</span>b8cd<span class="token operator">-</span><span class="token number">4424</span><span class="token operator">-</span><span class="token number">883e-736</span>ce564363e
firstname <span class="token operator">=</span> rand
lastname <span class="token operator">=</span> al’thor
mother <span class="token operator">=</span> people<span class="token operator">:</span>a9d4b3a0<span class="token operator">-</span><span class="token number">50d</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">4538</span><span class="token operator">-</span>a2fc<span class="token operator">-</span>f7fc2581ee56  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Reference 存储被引用对象的整个键（keyspace:id）。</p><blockquote><p>保存引用对象的ID,还需要手动保留引用对象，redis不会自动操作。</p></blockquote><h2 id="部分更新" tabindex="-1"><a class="header-anchor" href="#部分更新"><span>部分更新</span></a></h2><p>在某些情况下，您不需要加载和重写整个实体，只修改部分属性。例如修改session的访问时间。 PartialUpdate 允许您在现有对象上定义设置和删除操作，同时负责更新实体和索引结构的过期时间。 以下示例显示了部分更新：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">PartialUpdate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> update <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PartialUpdate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;e2c7dcee&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;firstname&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mat&quot;</span><span class="token punctuation">)</span>                                                           
  <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;address.city&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;emond&#39;s field&quot;</span><span class="token punctuation">)</span>                                              
  <span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                       

template<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>

update <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PartialUpdate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;e2c7dcee&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">&quot;caemlyn&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;andor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                   
  <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;attributes&quot;</span><span class="token punctuation">,</span> <span class="token function">singletonMap</span><span class="token punctuation">(</span><span class="token string">&quot;eye-color&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;grey&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             

template<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>

update <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PartialUpdate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;e2c7dcee&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">refreshTtl</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                 
  <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;expiration&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

template<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查询方法" tabindex="-1"><a class="header-anchor" href="#查询方法"><span>查询方法</span></a></h2><p>查询方法允许从方法名称自动派生简单的查找器查询，如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PersonRepository</span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByFirstname</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstname<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>请确保在 finder 方法中使用的属性设置为索引。</p></blockquote><blockquote><p>Redis 存储库的查询方法仅支持查询和分页查询实体。</p></blockquote><p>使用派生查询方法可能并不总是足以对要运行的查询进行建模。 RedisCallback 提供了对索引结构甚至自定义索引的实际匹配的更多控制。 为此，请提供一个 RedisCallback 返回一组或可迭代的 id 值，如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> user <span class="token operator">=</span> <span class="token comment">//...</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RedisSession</span><span class="token punctuation">&gt;</span></span> sessionsByUser <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisCallback</span><span class="token operator">&lt;</span><span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token function">doInRedis</span><span class="token punctuation">(</span><span class="token class-name">RedisConnection</span> connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DataAccessException</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> connection
      <span class="token punctuation">.</span><span class="token function">sMembers</span><span class="token punctuation">(</span><span class="token string">&quot;sessions:securityContext.authentication.principal.username:&quot;</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token class-name">RedisSession</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下表概述了 Redis 支持的关键字，以及包含该关键字的方法的基本含义：</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>Keyword</td><td>Sample</td><td>Redis snippet</td></tr><tr><td><code>And</code></td><td><code>findByLastnameAndFirstname</code></td><td><code>SINTER …:firstname:rand …:lastname:al’thor</code></td></tr><tr><td><code>Or</code></td><td><code>findByLastnameOrFirstname</code></td><td><code>SUNION …:firstname:rand …:lastname:al’thor</code></td></tr><tr><td><code>Is, Equals</code></td><td><code>findByFirstname</code>, <code>findByFirstnameIs</code>, <code>findByFirstnameEquals</code></td><td><code>SINTER …:firstname:rand</code></td></tr><tr><td><code>IsTrue</code></td><td><code>FindByAliveIsTrue</code></td><td><code>SINTER …:alive:1</code></td></tr><tr><td><code>IsFalse</code></td><td><code>findByAliveIsFalse</code></td><td><code>SINTER …:alive:0</code></td></tr><tr><td><code>Top,First</code></td><td><code>findFirst10ByFirstname</code>,<code>findTop5ByFirstname</code></td><td></td></tr></tbody></table><p>Redis 存储库允许使用各种方法来定义排序顺序。 Redis 本身在检索散列或集合时不支持动态排序。 因此，Redis 存储库查询方法构造了一个 Comparator，该 Comparator 在将结果作为 List 返回之前应用于结果。 让我们看一下下面的例子：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">PersonRepository</span> <span class="token keyword">extends</span> <span class="token class-name">RedisRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByFirstnameOrderByAgeDesc</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstname<span class="token punctuation">)</span><span class="token punctuation">;</span> 

  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByFirstname</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstname<span class="token punctuation">,</span> <span class="token class-name">Sort</span> sort<span class="token punctuation">)</span><span class="token punctuation">;</span>   
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在集群上运行的-redis-存储库" tabindex="-1"><a class="header-anchor" href="#在集群上运行的-redis-存储库"><span>在集群上运行的 Redis 存储库</span></a></h2><p>您可以在集群 Redis 环境中使用 Redis 存储库支持。下表显示了集群上的数据详细信息（基于前面的示例）：</p><table><thead><tr><th>Key</th><th>Type</th><th>Slot</th><th>Node</th></tr></thead><tbody><tr><td>people:e2c7dcee-b8cd-4424-883e-736ce564363e</td><td>id for hash</td><td>15171</td><td>127.0.0.1:7381</td></tr><tr><td>people:a9d4b3a0-50d3-4538-a2fc-f7fc2581ee56</td><td>id for hash</td><td>7373</td><td>127.0.0.1:7380</td></tr><tr><td>people:firstname:rand</td><td>index</td><td>1700</td><td>127.0.0.1:7379</td></tr></tbody></table><p>某些命令（例如 SINTER 和 SUNION）只有在所有涉及的键都映射到同一个槽时才能在服务器端处理。 否则，必须在客户端进行计算。 因此，将键空间固定到单个插槽非常有用，这让我们可以立即使用 Redis 服务器端计算。 下表显示了当您执行此操作时会发生什么：</p><table><thead><tr><th>Key</th><th>Type</th><th>Slot</th><th>Node</th></tr></thead><tbody><tr><td>{people}:e2c7dcee-b8cd-4424-883e-736ce564363e</td><td>id for hash</td><td>2399</td><td>127.0.0.1:7379</td></tr><tr><td>{people}:a9d4b3a0-50d3-4538-a2fc-f7fc2581ee56</td><td>id for hash</td><td>2399</td><td>127.0.0.1:7379</td></tr><tr><td>{people}:firstname:rand</td><td>index</td><td>2399</td><td>127.0.0.1:7379</td></tr></tbody></table><p>使用 Redis 集群时，通过使用 @RedisHash(&quot;{yourkeyspace}&quot;) 定义键空间并将其固定到特定插槽。</p><h2 id="存储库底层细节" tabindex="-1"><a class="header-anchor" href="#存储库底层细节"><span>存储库底层细节</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RedisHash</span><span class="token punctuation">(</span><span class="token string">&quot;people&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Id</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>
  <span class="token annotation punctuation">@Indexed</span> <span class="token class-name">String</span> firstname<span class="token punctuation">;</span>
  <span class="token class-name">String</span> lastname<span class="token punctuation">;</span>
  <span class="token class-name">Address</span> hometown<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@GeoIndexed</span> <span class="token class-name">Point</span> location<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;rand&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;al&#39;thor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>redis操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token constant">HMSET</span> <span class="token string">&quot;people:19315449-cda2-4f5c-b696-9cb8018fa1f9&quot;</span> <span class="token string">&quot;_class&quot;</span> <span class="token string">&quot;Person&quot;</span> <span class="token string">&quot;id&quot;</span> <span class="token string">&quot;19315449-cda2-4f5c-b696-9cb8018fa1f9&quot;</span> <span class="token string">&quot;firstname&quot;</span> <span class="token string">&quot;rand&quot;</span> <span class="token string">&quot;lastname&quot;</span> <span class="token string">&quot;al&#39;thor&quot;</span> 
<span class="token constant">SADD</span>  <span class="token string">&quot;people&quot;</span> <span class="token string">&quot;19315449-cda2-4f5c-b696-9cb8018fa1f9&quot;</span>                           
<span class="token constant">SADD</span>  <span class="token string">&quot;people:firstname:rand&quot;</span> <span class="token string">&quot;19315449-cda2-4f5c-b696-9cb8018fa1f9&quot;</span>            
# 以跟踪要在删除<span class="token operator">/</span>更新时清理的索引
<span class="token constant">SADD</span>  <span class="token string">&quot;people:19315449-cda2-4f5c-b696-9cb8018fa1f9:idx&quot;</span> <span class="token string">&quot;people:firstname:rand&quot;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>替换实体：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;e82908cf-e7d3-47c2-9eec-b4e0967ad0c9&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Dragon Reborn&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;al&#39;thor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
# 直接覆盖hash
<span class="token constant">DEL</span>       <span class="token string">&quot;people:e82908cf-e7d3-47c2-9eec-b4e0967ad0c9&quot;</span>                           
<span class="token constant">HMSET</span>     <span class="token string">&quot;people:e82908cf-e7d3-47c2-9eec-b4e0967ad0c9&quot;</span> <span class="token string">&quot;_class&quot;</span> <span class="token string">&quot;Person&quot;</span> <span class="token string">&quot;id&quot;</span> <span class="token string">&quot;e82908cf-e7d3-47c2-9eec-b4e0967ad0c9&quot;</span> <span class="token string">&quot;firstname&quot;</span> <span class="token string">&quot;Dragon Reborn&quot;</span> <span class="token string">&quot;lastname&quot;</span> <span class="token string">&quot;al&#39;thor&quot;</span> 
<span class="token constant">SADD</span>      <span class="token string">&quot;people&quot;</span> <span class="token string">&quot;e82908cf-e7d3-47c2-9eec-b4e0967ad0c9&quot;</span>                     

# 移除变更的索引
<span class="token constant">SMEMBERS</span>  <span class="token string">&quot;people:e82908cf-e7d3-47c2-9eec-b4e0967ad0c9:idx&quot;</span>  

<span class="token constant">TYPE</span>      <span class="token string">&quot;people:firstname:rand&quot;</span>                          
# 删除旧索引和实体的关联
<span class="token constant">SREM</span>      <span class="token string">&quot;people:firstname:rand&quot;</span> <span class="token string">&quot;e82908cf-e7d3-47c2-9eec-b4e0967ad0c9&quot;</span>          
<span class="token constant">DEL</span>       <span class="token string">&quot;people:e82908cf-e7d3-47c2-9eec-b4e0967ad0c9:idx&quot;</span>   

# 添加第二索引
<span class="token constant">SADD</span>      <span class="token string">&quot;people:firstname:Dragon Reborn&quot;</span> <span class="token string">&quot;e82908cf-e7d3-47c2-9eec-b4e0967ad0c9&quot;</span> 
<span class="token constant">SADD</span>      <span class="token string">&quot;people:e82908cf-e7d3-47c2-9eec-b4e0967ad0c9:idx&quot;</span> <span class="token string">&quot;people:firstname:Dragon Reborn&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单查找</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>repository<span class="token punctuation">.</span><span class="token function">findByFirstname</span><span class="token punctuation">(</span><span class="token string">&quot;egwene&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token constant">SINTER</span>  <span class="token string">&quot;people:firstname:egwene&quot;</span>                     
<span class="token constant">HGETALL</span> <span class="token string">&quot;people:d70091b5-0b9a-4c0a-9551-519e61bc9ef3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,260),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","spring-data-redis.html.vue"]]),k=JSON.parse('{"path":"/gudie/spring-data-redis.html","title":"redis支持","lang":"zh-CN","frontmatter":{"description":"redis支持 连接redis 关于连接相关的api都存储在org.springframework.data.redis.connection包下。RedisConnection负责与redis通信，它还自动将底层连接库异常转换为 Spring 一致的 DAO 异常层次结构，以便您可以在不更改任何代码的情况下切换底层连接库。 对于需要原生库 API 的...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/gudie/spring-data-redis.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"redis支持"}],["meta",{"property":"og:description","content":"redis支持 连接redis 关于连接相关的api都存储在org.springframework.data.redis.connection包下。RedisConnection负责与redis通信，它还自动将底层连接库异常转换为 Spring 一致的 DAO 异常层次结构，以便您可以在不更改任何代码的情况下切换底层连接库。 对于需要原生库 API 的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-16T13:02:07.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:modified_time","content":"2024-04-16T13:02:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"redis支持\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-16T13:02:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"连接redis","slug":"连接redis","link":"#连接redis","children":[{"level":3,"title":"Lettuce连接器","slug":"lettuce连接器","link":"#lettuce连接器","children":[]},{"level":3,"title":"Jedis 连接器","slug":"jedis-连接器","link":"#jedis-连接器","children":[]},{"level":3,"title":"读写分离","slug":"读写分离","link":"#读写分离","children":[]}]},{"level":2,"title":"Sentinel","slug":"sentinel","link":"#sentinel","children":[]},{"level":2,"title":"RedisTemplate","slug":"redistemplate","link":"#redistemplate","children":[]},{"level":2,"title":"序列化","slug":"序列化","link":"#序列化","children":[]},{"level":2,"title":"Hash 映射","slug":"hash-映射","link":"#hash-映射","children":[{"level":3,"title":"Hash Mappers","slug":"hash-mappers","link":"#hash-mappers","children":[]},{"level":3,"title":"Jackson2HashMapper","slug":"jackson2hashmapper","link":"#jackson2hashmapper","children":[]}]},{"level":2,"title":"Redis Messaging (Pub/Sub)","slug":"redis-messaging-pub-sub","link":"#redis-messaging-pub-sub","children":[{"level":3,"title":"发布消息","slug":"发布消息","link":"#发布消息","children":[]},{"level":3,"title":"接受消息","slug":"接受消息","link":"#接受消息","children":[]},{"level":3,"title":"消息监听器容器","slug":"消息监听器容器","link":"#消息监听器容器","children":[]}]},{"level":2,"title":"事务","slug":"事务","link":"#事务","children":[{"level":3,"title":"@Transactional","slug":"transactional","link":"#transactional","children":[]}]},{"level":2,"title":"Pipelining","slug":"pipelining","link":"#pipelining","children":[]},{"level":2,"title":"redis工具包","slug":"redis工具包","link":"#redis工具包","children":[]},{"level":2,"title":"redis缓存","slug":"redis缓存","link":"#redis缓存","children":[]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":2,"title":"对象映射基础","slug":"对象映射基础","link":"#对象映射基础","children":[{"level":3,"title":"创建对象","slug":"创建对象","link":"#创建对象","children":[]},{"level":3,"title":"属性填充","slug":"属性填充","link":"#属性填充","children":[]},{"level":3,"title":"域对象建议","slug":"域对象建议","link":"#域对象建议","children":[]}]},{"level":2,"title":"Object-to-Hash","slug":"object-to-hash","link":"#object-to-hash","children":[{"level":3,"title":"自定义类型映射","slug":"自定义类型映射","link":"#自定义类型映射","children":[]}]},{"level":2,"title":"Keyspaces","slug":"keyspaces","link":"#keyspaces","children":[]},{"level":2,"title":"二级索引","slug":"二级索引","link":"#二级索引","children":[{"level":3,"title":"简单的属性索引","slug":"简单的属性索引","link":"#简单的属性索引","children":[]},{"level":3,"title":"Geospatial 索引","slug":"geospatial-索引","link":"#geospatial-索引","children":[]}]},{"level":2,"title":"Query by Example","slug":"query-by-example","link":"#query-by-example","children":[{"level":3,"title":"ExampleMatcher","slug":"examplematcher","link":"#examplematcher","children":[]},{"level":3,"title":"使用","slug":"使用-1","link":"#使用-1","children":[]}]},{"level":2,"title":"生存时间","slug":"生存时间","link":"#生存时间","children":[]},{"level":2,"title":"@Reference","slug":"reference","link":"#reference","children":[]},{"level":2,"title":"部分更新","slug":"部分更新","link":"#部分更新","children":[]},{"level":2,"title":"查询方法","slug":"查询方法","link":"#查询方法","children":[]},{"level":2,"title":"在集群上运行的 Redis 存储库","slug":"在集群上运行的-redis-存储库","link":"#在集群上运行的-redis-存储库","children":[]},{"level":2,"title":"存储库底层细节","slug":"存储库底层细节","link":"#存储库底层细节","children":[]}],"git":{"createdTime":1713272527000,"updatedTime":1713272527000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":1}]},"readingTime":{"minutes":32.85,"words":9854},"filePathRelative":"gudie/spring-data-redis.md","localizedDate":"2024年4月16日","excerpt":"\\n<h2>连接redis</h2>\\n<p>关于连接相关的api都存储在org.springframework.data.redis.connection包下。RedisConnection负责与redis通信，它还自动将底层连接库异常转换为 Spring 一致的 DAO 异常层次结构，以便您可以在不更改任何代码的情况下切换底层连接库。</p>\\n<blockquote>\\n<p>对于需要原生库 API 的极端情况，RedisConnection 提供了一个专用方法 (getNativeConnection)，该方法返回用于通信的原始底层对象。</p>\\n</blockquote>\\n<p>RedisConnectionFactory 创建 RedisConnection 对象。 此外，工厂充当 PersistenceExceptionTranslator 对象，这意味着一旦声明，它们就可以让您进行透明的异常转换。 例如，您可以通过使用@Repository 注释和AOP 进行异常转换。 有关更多信息，请参阅 Spring Framework 文档中的专用部分？？？。</p>","autoDesc":true}');export{r as comp,k as data};
