import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,a}from"./app-DSYRoKiT.js";const o={},e=a(`<h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h2><table><thead><tr><th>JsonPath</th><th>说明</th></tr></thead><tbody><tr><td><code>$</code></td><td>文档根元素</td></tr><tr><td><code>@</code></td><td>当前元素</td></tr><tr><td><code>.</code>或<code>[]</code></td><td>匹配下级元素</td></tr><tr><td><code>..</code></td><td>递归匹配所有子元素</td></tr><tr><td><code>*</code></td><td>通配符，匹配下级元素</td></tr><tr><td><code>[]</code></td><td>下标运算符，根据索引获取元素，<strong>XPath索引从1开始，JsonPath索引从0开始</strong></td></tr><tr><td><code>[start:end:step]</code></td><td>数据切片操作，XPath不支持</td></tr><tr><td><code>?()</code></td><td>过滤表达式</td></tr><tr><td><code>()</code></td><td>脚本表达式，使用底层脚本引擎，XPath不支持</td></tr></tbody></table><h2 id="过滤器" tabindex="-1"><a class="header-anchor" href="#过滤器"><span>过滤器</span></a></h2><p>过滤器是用于过滤数组的逻辑表达式，一个通常的表达式形如：<code>[?(@.age &gt; 18)]</code>，可以通过逻辑表达式<code>&amp;&amp;</code>或<code>||</code>组合多个过滤器表达式，例如<code>[?(@.price &lt; 10 &amp;&amp; @.category == &#39;fiction&#39;)]</code>，字符串必须用单引号包围，例如<code>[?(@.color == &#39;blue&#39;)]</code>。</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>==</td><td></td></tr><tr><td>!=</td><td></td></tr><tr><td>&lt;</td><td></td></tr><tr><td>&lt;=</td><td></td></tr><tr><td>&gt;</td><td></td></tr><tr><td>&gt;=</td><td></td></tr><tr><td>=~</td><td>正则匹配</td></tr></tbody></table><h2 id="demo" tabindex="-1"><a class="header-anchor" href="#demo"><span>Demo</span></a></h2><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;store&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;book&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
				<span class="token property">&quot;category&quot;</span><span class="token operator">:</span> <span class="token string">&quot;reference&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Nigel Rees&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Sayings of the Century&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;price&quot;</span><span class="token operator">:</span> <span class="token number">8.95</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
				<span class="token property">&quot;category&quot;</span><span class="token operator">:</span> <span class="token string">&quot;fiction&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Evelyn Waugh&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Sword of Honour&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;price&quot;</span><span class="token operator">:</span> <span class="token number">12.99</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
				<span class="token property">&quot;category&quot;</span><span class="token operator">:</span> <span class="token string">&quot;fiction&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Herman Melville&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Moby Dick&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;isbn&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0-553-21311-3&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;price&quot;</span><span class="token operator">:</span> <span class="token number">8.99</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
				<span class="token property">&quot;category&quot;</span><span class="token operator">:</span> <span class="token string">&quot;fiction&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;J. R. R. Tolkien&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;The Lord of the Rings&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;isbn&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0-395-19395-8&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;price&quot;</span><span class="token operator">:</span> <span class="token number">22.99</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
		<span class="token property">&quot;bicycle&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token property">&quot;color&quot;</span><span class="token operator">:</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span>
			<span class="token property">&quot;price&quot;</span><span class="token operator">:</span> <span class="token number">19.95</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>JsonPath</th><th>Result</th></tr></thead><tbody><tr><td><code>$.store.book[*].author</code></td><td>所有book的author节点</td></tr><tr><td><code>$..author</code></td><td>所有author节点</td></tr><tr><td><code>$.store.*</code></td><td>store下的所有节点，book数组和bicycle节点</td></tr><tr><td><code>$.store..price</code></td><td>store下的所有price节点</td></tr><tr><td><code>$..book[2]</code></td><td>匹配第3个book节点</td></tr><tr><td><code>$..book[(@.length-1)]</code>，或 <code>$..book[-1:]</code></td><td>匹配倒数第1个book节点</td></tr><tr><td><code>$..book[0,1]</code>，或 <code>$..book[:2]</code></td><td>匹配前两个book节点</td></tr><tr><td><code>$..book[?(@.isbn)]</code></td><td>过滤含isbn字段的节点</td></tr><tr><td><code>$..book[?(@.price&lt;10)]</code></td><td>过滤<code>price&lt;10</code>的节点</td></tr><tr><td><code>$..*</code></td><td>递归匹配所有子节点</td></tr></tbody></table>`,8),p=[e];function d(r,c){return n(),s("div",null,p)}const u=t(o,[["render",d],["__file","05-jsonpath.html.vue"]]),k=JSON.parse(`{"path":"/gudie/05-jsonpath.html","title":"JsonPath 指南","lang":"zh-CN","frontmatter":{"title":"JsonPath 指南","date":"2024-04-20T00:00:00.000Z","categories":["java","测试"],"tags":["JsonPath","json"],"description":"语法 过滤器 过滤器是用于过滤数组的逻辑表达式，一个通常的表达式形如：[?(@.age > 18)]，可以通过逻辑表达式&&或||组合多个过滤器表达式，例如[?(@.price < 10 && @.category == 'fiction')]，字符串必须用单引号包围，例如[?(@.color == 'blue')]。 Demo","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/gudie/05-jsonpath.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"JsonPath 指南"}],["meta",{"property":"og:description","content":"语法 过滤器 过滤器是用于过滤数组的逻辑表达式，一个通常的表达式形如：[?(@.age > 18)]，可以通过逻辑表达式&&或||组合多个过滤器表达式，例如[?(@.price < 10 && @.category == 'fiction')]，字符串必须用单引号包围，例如[?(@.color == 'blue')]。 Demo"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-21T09:35:03.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"JsonPath"}],["meta",{"property":"article:tag","content":"json"}],["meta",{"property":"article:published_time","content":"2024-04-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-21T09:35:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JsonPath 指南\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-21T09:35:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":2,"title":"过滤器","slug":"过滤器","link":"#过滤器","children":[]},{"level":2,"title":"Demo","slug":"demo","link":"#demo","children":[]}],"git":{"createdTime":1713692103000,"updatedTime":1713692103000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":1}]},"readingTime":{"minutes":1.26,"words":379},"filePathRelative":"gudie/05-jsonpath.md","localizedDate":"2024年4月20日","excerpt":"<h2>语法</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>JsonPath</th>\\n<th>说明</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>$</code></td>\\n<td>文档根元素</td>\\n</tr>\\n<tr>\\n<td><code>@</code></td>\\n<td>当前元素</td>\\n</tr>\\n<tr>\\n<td><code>.</code>或<code>[]</code></td>\\n<td>匹配下级元素</td>\\n</tr>\\n<tr>\\n<td><code>..</code></td>\\n<td>递归匹配所有子元素</td>\\n</tr>\\n<tr>\\n<td><code>*</code></td>\\n<td>通配符，匹配下级元素</td>\\n</tr>\\n<tr>\\n<td><code>[]</code></td>\\n<td>下标运算符，根据索引获取元素，<strong>XPath索引从1开始，JsonPath索引从0开始</strong></td>\\n</tr>\\n<tr>\\n<td><code>[start:end:step]</code></td>\\n<td>数据切片操作，XPath不支持</td>\\n</tr>\\n<tr>\\n<td><code>?()</code></td>\\n<td>过滤表达式</td>\\n</tr>\\n<tr>\\n<td><code>()</code></td>\\n<td>脚本表达式，使用底层脚本引擎，XPath不支持</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}`);export{u as comp,k as data};
