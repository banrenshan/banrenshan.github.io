import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as i,c as l,b as n,d as a,e,a as t}from"./app-DvhfW1jQ.js";const c="/assets/image-20231104200858752-Cu1ZKHEU.png",d={},u=t('<p>校验注解分为下面几类：</p><ul><li>静态编译型: <ul><li>生成式: lombok 的 <code>@NoNull</code></li><li>校验式: <code>jsr305</code> ，一套用来给代码分析工具( FindBugs、IntelliJ、Checkstyle 和 PMD)检查代码缺陷用的注解</li></ul></li><li>动态代理型: <code>jsr303</code>(Bean Validation规范)</li></ul><h1 id="jsr305注解规范" tabindex="-1"><a class="header-anchor" href="#jsr305注解规范"><span>JSR305注解规范</span></a></h1><p><code>jsr305</code>是一个规范，具体来说是一套用来给代码分析工具( FindBugs、IntelliJ、Checkstyle 和 PMD)检查代码缺陷用的注解，类似<code>jsr303</code>(Bean Validation规范)。</p><p>诸如 FindBugs、IntelliJ、Checkstyle 和 PMD 这样的静态分析工具在 Java 开发中得到了广泛应用。这些工具都很强大，但是有一些共同的问题它们都很难解决。比如何时值可以为 null，或者何时数字值不能为负。完备的 API 会将这些设计细节记录在 JavaDoc 之中，但是分析工具却无法发现类似细节，从而有可能将其忽略或是导致错误的检测结果。</p><p>为了解决这些问题，有些静态分析工具开发人员试图使用注解来定义相关细节。比如 FindBugs 和 IntelliJ 都定义了自己的注解，以表示方法何时返回 null。不过，这两个工具使用的注解有细微不同，也因此有了标准化的需求。由 FindBugs 创建人 Bill Pugh 带领制定的 JSR-305 标准，试图创建一套标准注解供分析工具使用，同时希望允许开发人员根据自己的需要添加额外的注解。当前提案中包括供判断是否为空、正负号、开发语言和线程等方面的众多注解。</p><h2 id="spring-支持" tabindex="-1"><a class="header-anchor" href="#spring-支持"><span>Spring 支持</span></a></h2>',7),r={href:"https://jcp.org/en/jsr/detail?id=305",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,[a("没有必要也不建议在项目classpath中添加JSR-305的依赖关系来利用Spring的 null-safe API。只有在编写基于Spring的类库（Libraries ）时，应在Gradle配置中添加 "),n("code",null,"com.google.code.findbugs:jsr305:3.0.2"),a(" 的 "),n("code",null,"compileOnly"),a(" 或 Maven "),n("code",null,"provided"),a(" scope，以免出现编译警告。")],-1),v={href:"https://docs.spring.io/spring-framework/docs/6.0.8-SNAPSHOT/javadoc-api/org/springframework/lang/Nullable.html",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"@Nullable",-1),b=n("code",null,"null",-1),g={href:"https://docs.spring.io/spring-framework/docs/6.0.8-SNAPSHOT/javadoc-api/org/springframework/lang/NonNull.html",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"@NonNull",-1),y=n("code",null,"null",-1),w={href:"https://docs.spring.io/spring-framework/docs/6.0.8-SNAPSHOT/javadoc-api/org/springframework/lang/NonNullApi.html",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"@NonNullApi",-1),V={href:"https://docs.spring.io/spring-framework/docs/6.0.8-SNAPSHOT/javadoc-api/org/springframework/lang/NonNullFields.html",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"@NonNullFields",-1),S=t('<blockquote><p>目前还不支持泛型参数、可变长参数和数组元素</p></blockquote><p>示例：</p><figure><img src="'+c+`" alt="image-20231104200858752" tabindex="0" loading="lazy"><figcaption>image-20231104200858752</figcaption></figure><h1 id="lombok-的-nonull" tabindex="-1"><a class="header-anchor" href="#lombok-的-nonull"><span>lombok 的 @NoNull</span></a></h1><p>如果放在参数上，lombok将在方法/构造函数体的开头插入一个null检查，并抛出一个NullPointerException，该参数的名称作为消息。如果放在字段上，任何为该字段赋值的生成方法也会产生这些空检查。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@Setter</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Question</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@NonNull</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成的代码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Question</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">String</span> <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
     <span class="token comment">// 增加了对参数的判空，而不是对字段的判空</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setText</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">&quot;text is marked non-null but is null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 增加了对参数的判空，而不是对字段的判空</span>
    <span class="token keyword">public</span> <span class="token class-name">Question</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">&quot;text is marked non-null but is null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>当注解到字段时，在生成类时，<strong>任何赋值该字段的地方</strong>会检查参数是否为空</p></blockquote><h1 id="bean-validation" tabindex="-1"><a class="header-anchor" href="#bean-validation"><span>Bean Validation</span></a></h1><p>约束应用的范围：</p><ul><li><p>字段级别</p></li><li><p>方法级别</p></li><li><p>容器元素</p></li><li><p>类级别</p></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@NotNull</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> manufacturer<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@NotNull</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getManufacturer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> manufacturer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token annotation punctuation">@NotNull</span> <span class="token class-name">String</span><span class="token operator">&gt;</span> data<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token class-name">String</span><span class="token operator">&gt;</span> data<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token class-name">String</span><span class="token operator">&gt;</span> data<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Optional</span><span class="token operator">&lt;</span><span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span><span class="token operator">&gt;</span> num<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@Valid 开启级联验证：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@NotNull</span>
    <span class="token annotation punctuation">@Valid</span>
    <span class="token keyword">private</span> <span class="token class-name">Person</span> driver<span class="token punctuation">;</span>

    <span class="token comment">//...</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@NotNull</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从BeanValidation1.1开始，约束不仅可以应用于JavaBeans及其属性，还可以应用于任何Java类型的方法和构造函数的参数和返回值。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>dependencies <span class="token punctuation">{</span>
    annotationProcessor &#39;org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>validator<span class="token operator">:</span>hibernate<span class="token operator">-</span>validator<span class="token operator">-</span>annotation<span class="token operator">-</span>processor<span class="token operator">:</span><span class="token number">8.0</span><span class="token number">.0</span><span class="token punctuation">.</span>Final&#39;
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用该依赖检查注解是否正确使用，例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Echo</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@NotNull</span>
    <span class="token annotation punctuation">@Positive</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在编译期间可以检查出下面的错误：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>The annotation @Positive is disallowed <span class="token keyword">for</span> this data type.
    @Positive
    ^
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="spring支持" tabindex="-1"><a class="header-anchor" href="#spring支持"><span>Spring支持</span></a></h2><p>Spring 对 Bean Validation API 进行了全面支持， 包括在启动的时候注册 Bean Validation provider 为spring bean。您在只需要在验证位置注入<code>jakarta.validation.ValidatorFactory</code>或<code>jakarta.validation.Validator</code>。</p><p>您可以使用<code>LocalValidatorFactoryBean</code>将默认Validator配置为Spring bean，如下例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@Bean</span>
	<span class="token keyword">public</span> <span class="token class-name">LocalValidatorFactoryBean</span> <span class="token function">validator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LocalValidatorFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>LocalValidatorFactoryBean 配置 默认引导机制。Bean验证提供程序，如Hibernate Validator，如果出现在类路径中，就会被自动检测到。</p><p><code>LocalValidatorFactoryBean</code> 同时实现了 <code>jakarta.validation.ValidatorFactory</code> 和 <code>jakarta.validation.Validator</code>，以及Spring的 <code>org.springframework.validation.Validator</code>。你可以将这些接口的引用注入到需要调用验证逻辑的Bean中。</p><h2 id="自定义注解" tabindex="-1"><a class="header-anchor" href="#自定义注解"><span>自定义注解</span></a></h2><p>每个验证约束由两部分组成。</p><ul><li>一个 <code>@Constraint</code> 注解，声明了约束及其可配置的属性。</li><li><code>jakarta.validation.ConstraintValidator</code> 接口实现，实现约束的行为。</li></ul><p>为了将声明与实现联系起来，每个 <code>@Constraint</code> 注解都会引用一个相应的 <code>ConstraintValidator</code> 实现类。在运行时，当你的domain模型中出现约束注解时， <code>ConstraintValidatorFactory</code> 会实例化所引用的实现。</p><p>默认情况下，<code>LocalValidatorFactoryBean</code> 使用<code>SpringConstraintValidatorFactory</code>创建 <code>ConstraintValidator</code> 实例。这让你的自定义 <code>ConstraintValidators</code> 像其他 Spring Bean 一样受益于依赖注入。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Constraint</span><span class="token punctuation">(</span>validatedBy<span class="token operator">=</span><span class="token class-name">MyConstraintValidator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyConstraint</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConstraintValidator</span> <span class="token keyword">implements</span> <span class="token class-name">ConstraintValidator</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Foo</span> aDependency<span class="token punctuation">;</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>ConstraintValidator 的实现可以像其他Spring Bean一样被 @Autowired</p></blockquote><h2 id="spring驱动的方法验证" tabindex="-1"><a class="header-anchor" href="#spring驱动的方法验证"><span>Spring驱动的方法验证</span></a></h2><p>Bean Validation 的 方法验证，由 MethodValidationPostProcessor bean 集成。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">MethodValidationPostProcessor</span> <span class="token function">validationPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MethodValidationPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了有资格进行Spring驱动的方法验证，<strong>所有目标类都需要使用Spring的@Validated进行注释</strong>，该注释还可以选择性地声明要使用的验证组。</p><h2 id="databinder" tabindex="-1"><a class="header-anchor" href="#databinder"><span>DataBinder</span></a></h2><p>DataBinder 对验证过程进行了API抽象，下面式一个示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Foo</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">DataBinder</span> binder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataBinder</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
binder<span class="token punctuation">.</span><span class="token function">setValidator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FooValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// bind to the target object</span>
binder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>propertyValues<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// validate the target object</span>
binder<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// get BindingResult that includes any validation errors</span>
<span class="token class-name">BindingResult</span> results <span class="token operator">=</span> binder<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以通过 <code>dataBinder.addValidators</code> 和 <code>dataBinder.replaceValidators</code> 为 <code>DataBinder</code> 配置多个 <code>Validator</code> 实例。</p><h2 id="spring-mvc-支持" tabindex="-1"><a class="header-anchor" href="#spring-mvc-支持"><span>Spring MVC 支持</span></a></h2><p>默认情况下，如果类路径上存在Bean Validation（例如，Hibernate Validator），则LocalValidatorFactoryBean将注册为全局Validator，用于控制器方法参数上的@Valid和@Validated。</p><p>请注意，您也可以在注册本地Validator实现，如下例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@InitBinder</span>
	<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initBinder</span><span class="token punctuation">(</span><span class="token class-name">WebDataBinder</span> binder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		binder<span class="token punctuation">.</span><span class="token function">addValidators</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FooValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetHeaderController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;save&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token annotation punctuation">@Validated</span> <span class="token class-name">UserReq</span> req<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetHeaderController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;save&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token annotation punctuation">@Valid</span> <span class="token class-name">UserReq</span> req<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在 Controller 层 ，开始 对象参数的校验，可以使用 @Validated 或者 @Valid ，两者功能基本相同。但是对简单参数，必须使用 Validated 注解且必须定义在类级别（AOP代理类）：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@Validated</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetHeaderController</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;名称 is required&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;邮箱 is required&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> email<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p>同样的，你也可以在service层使用检验，但是必须使用 Validated 注解 service， 就像上面的controller。</p></blockquote>`,48);function N(B,_){const s=p("ExternalLinkIcon");return i(),l("div",null,[u,n("p",null,[a("Spring注解是用 "),n("a",r,[a("JSR 305"),e(s)]),a(" 注解进行元注解的。JSR-305元注解让IDEA等工具以通用方式提供 null-safety 支持，而无需对Spring注解进行硬编码支持。")]),k,n("ul",null,[n("li",null,[n("a",v,[m,e(s)]),a(": 表明一个特定的参数、返回值或字段可以是 "),b,a(" 的。")]),n("li",null,[n("a",g,[h,e(s)]),a(": 表明特定的参数、返回值或字段不能为 "),y]),n("li",null,[n("a",w,[j,e(s)]),a(": 包级注解，表明该包下面所有的参数和返回值都不能为空。")]),n("li",null,[n("a",V,[f,e(s)]),a(": 包级注解，表明该包下面所有的字段不能为空。")])]),S])}const P=o(d,[["render",N],["__file","校验注解.html.vue"]]),q=JSON.parse('{"path":"/Spring/%E6%A0%A1%E9%AA%8C%E6%B3%A8%E8%A7%A3.html","title":"Spring Validation","lang":"zh-CN","frontmatter":{"title":"Spring Validation","date":"2023-10-08T00:00:00.000Z","categories":["Spring"],"tags":["Spring","Validation"],"description":"校验注解分为下面几类： 静态编译型: 生成式: lombok 的 @NoNull 校验式: jsr305 ，一套用来给代码分析工具( FindBugs、IntelliJ、Checkstyle 和 PMD)检查代码缺陷用的注解 动态代理型: jsr303(Bean Validation规范) JSR305注解规范 jsr305是一个规范，具体来说是一套用...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/Spring/%E6%A0%A1%E9%AA%8C%E6%B3%A8%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"Spring Validation"}],["meta",{"property":"og:description","content":"校验注解分为下面几类： 静态编译型: 生成式: lombok 的 @NoNull 校验式: jsr305 ，一套用来给代码分析工具( FindBugs、IntelliJ、Checkstyle 和 PMD)检查代码缺陷用的注解 动态代理型: jsr303(Bean Validation规范) JSR305注解规范 jsr305是一个规范，具体来说是一套用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-24T08:19:31.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"Validation"}],["meta",{"property":"article:published_time","content":"2023-10-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-24T08:19:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Validation\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-24T08:19:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"Spring 支持","slug":"spring-支持","link":"#spring-支持","children":[]},{"level":2,"title":"Spring支持","slug":"spring支持","link":"#spring支持","children":[]},{"level":2,"title":"自定义注解","slug":"自定义注解","link":"#自定义注解","children":[]},{"level":2,"title":"Spring驱动的方法验证","slug":"spring驱动的方法验证","link":"#spring驱动的方法验证","children":[]},{"level":2,"title":"DataBinder","slug":"databinder","link":"#databinder","children":[]},{"level":2,"title":"Spring MVC 支持","slug":"spring-mvc-支持","link":"#spring-mvc-支持","children":[]}],"git":{"createdTime":1713946771000,"updatedTime":1713946771000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":1}]},"readingTime":{"minutes":6.04,"words":1811},"filePathRelative":"Spring/校验注解.md","localizedDate":"2023年10月8日","excerpt":"<p>校验注解分为下面几类：</p>\\n<ul>\\n<li>静态编译型:\\n<ul>\\n<li>生成式: lombok 的 <code>@NoNull</code></li>\\n<li>校验式: <code>jsr305</code> ，一套用来给代码分析工具( FindBugs、IntelliJ、Checkstyle 和 PMD)检查代码缺陷用的注解</li>\\n</ul>\\n</li>\\n<li>动态代理型: <code>jsr303</code>(Bean Validation规范)</li>\\n</ul>\\n<h1>JSR305注解规范</h1>\\n<p><code>jsr305</code>是一个规范，具体来说是一套用来给代码分析工具( FindBugs、IntelliJ、Checkstyle 和 PMD)检查代码缺陷用的注解，类似<code>jsr303</code>(Bean Validation规范)。</p>","autoDesc":true}');export{P as comp,q as data};
