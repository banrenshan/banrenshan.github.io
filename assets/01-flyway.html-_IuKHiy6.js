import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,a as e}from"./app-DvhfW1jQ.js";const l={},t=e(`<h1 id="flyway" tabindex="-1"><a class="header-anchor" href="#flyway"><span>Flyway</span></a></h1><h2 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h2><ol><li>项目启动，应用程序完成数据库连接池的建立后，Flyway自动运行。</li><li>初次使用时，Flyway会创建一个<code>flyway_schema_history</code>表，用于记录sql执行记录。</li><li>Flyway会扫描项目指定路径下(默认是<code>classpath:db/migration</code>)的所有sql脚本，与<code>flyway_schema_history</code>表脚本记录进行比对。<strong>根据脚本的名称提取版本号来比对</strong></li><li>如果脚本没有执行过，则执行脚本。如果脚本执行过，则比对文件是否发生变更，如果发生了变更，则抛出异常，终止迁移</li></ol><h2 id="在spring-boot中使用" tabindex="-1"><a class="header-anchor" href="#在spring-boot中使用"><span>在spring boot中使用</span></a></h2><ol><li>初始化一个SpringBoot项目，引入MySQL数据库驱动依赖等，并且需要引入Flyway依赖：</li></ol><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.flywaydb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>flyway-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>6.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>添加Flyway配置：</li></ol><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token comment"># 数据库连接配置</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/ssm<span class="token punctuation">-</span>demo<span class="token punctuation">?</span>characterEncoding=utf<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL=false&amp;serverTimezone=GMT%2B8</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> xxx
    <span class="token key atrule">password</span><span class="token punctuation">:</span> xxx
  <span class="token key atrule">flyway</span><span class="token punctuation">:</span>
    <span class="token comment"># 是否启用flyway</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment"># 编码格式，默认UTF-8</span>
    <span class="token key atrule">encoding</span><span class="token punctuation">:</span> UTF<span class="token punctuation">-</span><span class="token number">8</span>
    <span class="token comment"># 迁移sql脚本文件存放路径，默认db/migration</span>
    <span class="token key atrule">locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>db/migration
    <span class="token comment"># 迁移sql脚本文件名称的前缀，默认V</span>
    <span class="token key atrule">sql-migration-prefix</span><span class="token punctuation">:</span> V
    <span class="token comment"># 迁移sql脚本文件名称的分隔符，默认2个下划线__.前面的用作版本号，后面的用作描述信息</span>
    <span class="token key atrule">sql-migration-separator</span><span class="token punctuation">:</span> __
    <span class="token comment"># 迁移sql脚本文件名称的后缀</span>
    <span class="token key atrule">sql-migration-suffixes</span><span class="token punctuation">:</span> .sql
    <span class="token comment"># 迁移时是否进行校验，默认true</span>
    <span class="token key atrule">validate-on-migrate</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment"># 当迁移发现数据库非空且存在没有元数据的表时，自动执行基准迁移，新建schema_version表</span>
    <span class="token key atrule">baseline-on-migrate</span><span class="token punctuation">:</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><p>根据在配置文件的脚本存放路径的配置，在resource目录下建立文件夹<code>db/migration</code>。</p></li><li><p>添加需要运行的sql脚本。sql脚本的命名规范为：V+版本号(版本号的数字间以”.“或”_“分隔开)+双下划线(用来分隔版本号和描述)+文件描述+后缀名，例如：V20201100__create_user.sql。如图所示：</p></li><li><p>启动项目。启动成功后，在数据库中可以看到已按照定义好的脚本，完成数据库变更，并在<code>flyway_schema_history</code>表插入了sql执行记录：</p></li></ol><h2 id="主要配置项" tabindex="-1"><a class="header-anchor" href="#主要配置项"><span>主要配置项</span></a></h2><ul><li><p><code>flyway.baseline-on-migrate</code>： 当迁移时发现目标schema非空，而且带有没有元数据的表时，是否自动执行基准迁移（创建元数据表，然后执行sql脚本），默认false.</p></li><li><p>flyway.baseline-version开始执行基准迁移时对现有的schema的版本打标签，默认值为1.</p></li><li><p><code>flyway.validate-on-migrate</code>迁移时是否校验，默认为true. 校验机制检查本地迁移是否仍与数据库中已执行的迁移具有相同的校验和。主要防止已迁移的本地文件发生了变动，数据库却没有更新这种变化。这是一种预警机制。</p></li><li><p><code>flyway.clean-on-validation-error</code>当发现校验错误时是否自动调用clean，这是开发环境中的方便机制。默认false. 警告！ 不要在生产中启用！</p></li><li><p><code>flyway.ignore-failed-future-migration</code>当读取元数据表时是否忽略错误的迁移，默认false.</p></li><li><p>flyway.out-of-order是否允许无序的迁移，默认false.</p></li><li><p><code>flyway.enabled</code>是否开启flywary，默认true.</p></li><li><p><code>flyway.password</code>：目标数据库的密码.</p></li><li><p><code>flyway.url</code>：迁移时使用的JDBC URL，如果没有指定的话，将使用配置的主数据源</p></li><li><p><code>flyway.user</code>：迁移数据库的用户名</p></li><li><p><code>flyway.schemas</code>设定需要flywary迁移的schema，大小写敏感，默认为连接默认的schema.</p></li><li><p><code>flyway.tableflyway</code>使用的元数据表名，默认为schema_version</p></li><li><p>flyway.placeholder-prefix设置每个placeholder的前缀，默认\${.</p></li><li><p>flyway.placeholder-suffix设置每个placeholder的后缀，默认}.</p></li><li><p>flyway.placeholder-replacementplaceholders是否要被替换，默认true.</p></li><li><p>flyway.placeholders.[placeholder name]设置placeholder的value</p></li><li><p><code>flyway.sql-migration-prefix</code>迁移文件的前缀，默认为V.</p></li><li><p><code>flyway.sql-migration-separator</code>迁移脚本的文件名分隔符，默认<code>__</code></p></li><li><p><code>flyway.sql-migration-suffix</code>迁移脚本的后缀，默认为.sql</p></li><li><p><code>flyway.init-sqls</code>当初始化好连接时要执行的SQL.</p></li><li><p><code>flyway.locations</code>迁移脚本的位置，默认db/migration.</p></li><li><p><code>flyway.encoding</code>设置迁移时的编码，默认UTF-8.</p></li></ul><h2 id="版本迁移的问题" tabindex="-1"><a class="header-anchor" href="#版本迁移的问题"><span>版本迁移的问题</span></a></h2><p>当对flyway升级的时候，会出现兼容性问题，例如checksum不一致：</p><div class="language-Plain line-numbers-mode" data-ext="Plain" data-title="Plain"><pre class="language-Plain"><code>org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;flywayInitializer&#39; defined in class path resource [org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration$FlywayConfiguration.class]: Invocation of init method failed; nested exception is org.flywaydb.core.api.FlywayException: Validate failed: Migration checksum mismatch for migration version 1.0.0.01
-&gt; Applied to database : 1062144176
-&gt; Resolved locally : 1432425380
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过执行修复方法来解决。将已应用迁移的校验和、描述和类型与可用迁移的校验和、描述和类型重新对齐</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>flyway<span class="token punctuation">.</span><span class="token function">repair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,16),i=[t];function o(p,c){return n(),s("div",null,i)}const u=a(l,[["render",o],["__file","01-flyway.html.vue"]]),y=JSON.parse('{"path":"/gudie/01-flyway.html","title":"flyway指南","lang":"zh-CN","frontmatter":{"title":"flyway指南","tags":["java","flyway"],"categories":["数据库","java"],"date":"2022-12-02T13:01:55.000Z","description":"Flyway 工作原理 项目启动，应用程序完成数据库连接池的建立后，Flyway自动运行。 初次使用时，Flyway会创建一个flyway_schema_history表，用于记录sql执行记录。 Flyway会扫描项目指定路径下(默认是classpath:db/migration)的所有sql脚本，与flyway_schema_history表脚本记...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/gudie/01-flyway.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"flyway指南"}],["meta",{"property":"og:description","content":"Flyway 工作原理 项目启动，应用程序完成数据库连接池的建立后，Flyway自动运行。 初次使用时，Flyway会创建一个flyway_schema_history表，用于记录sql执行记录。 Flyway会扫描项目指定路径下(默认是classpath:db/migration)的所有sql脚本，与flyway_schema_history表脚本记..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-21T09:35:03.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"flyway"}],["meta",{"property":"article:published_time","content":"2022-12-02T13:01:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-21T09:35:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"flyway指南\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-12-02T13:01:55.000Z\\",\\"dateModified\\":\\"2024-04-21T09:35:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"工作原理","slug":"工作原理","link":"#工作原理","children":[]},{"level":2,"title":"在spring boot中使用","slug":"在spring-boot中使用","link":"#在spring-boot中使用","children":[]},{"level":2,"title":"主要配置项","slug":"主要配置项","link":"#主要配置项","children":[]},{"level":2,"title":"版本迁移的问题","slug":"版本迁移的问题","link":"#版本迁移的问题","children":[]}],"git":{"createdTime":1713597557000,"updatedTime":1713692103000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":1}]},"readingTime":{"minutes":3.86,"words":1158},"filePathRelative":"gudie/01-flyway.md","localizedDate":"2022年12月2日","excerpt":"\\n<h2>工作原理</h2>\\n<ol>\\n<li>项目启动，应用程序完成数据库连接池的建立后，Flyway自动运行。</li>\\n<li>初次使用时，Flyway会创建一个<code>flyway_schema_history</code>表，用于记录sql执行记录。</li>\\n<li>Flyway会扫描项目指定路径下(默认是<code>classpath:db/migration</code>)的所有sql脚本，与<code>flyway_schema_history</code>表脚本记录进行比对。<strong>根据脚本的名称提取版本号来比对</strong></li>\\n<li>如果脚本没有执行过，则执行脚本。如果脚本执行过，则比对文件是否发生变更，如果发生了变更，则抛出异常，终止迁移</li>\\n</ol>","autoDesc":true}');export{u as comp,y as data};
