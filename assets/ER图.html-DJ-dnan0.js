import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as i,a as p}from"./app-CD92BIt9.js";const r={},a=p("<p>实体图主要有两个作用：</p><ul><li>显示系统范围内的主要实体</li><li>显示实体之间的相互关系</li></ul><p>实体是系统内可以定义的事物或概念，也就是数据库中的表。 在ER图，实现表示成圆角矩形</p><p>实体还可以进一步分为弱实体和复合实体：</p><ul><li>弱实体必须依赖另一个实体存在，例如成绩单必须依赖学生存在，因此成绩单是弱实体。弱实体使用双线矩形表示。</li><li>复合常常用于实现两个多是个实体的M:N关系，他由每个关联实体的主键组成，用矩形内加菱形来表示</li></ul><p>实体属性，对应数据表中的列，表示实体的特性</p><ul><li>复合属性</li><li>多值属性： 双线椭圆表示</li><li>派生属性：非永久性存储于数据库的属性，由其他属性或其他数据（如当前日期）派生出来，用虚线椭圆表示</li><li>可选属性： 在椭圆的文字后用（O）来表示</li><li>联系属性：联系属性用于表示多个实体之间联系所具有的属性，一般来讲M:N的两个实体具有联系属性，在1：1和1：M的实体联系中，联系属性并不需要。</li></ul><p>主键，简写PK,用于界定数据表中记录的唯一性</p><p>外键，用于识别实体之间的关系</p><p>关系，表示两个实体之间以某种方式相互关联</p><p>基数，定义一个实体与另一个实体的关系里面，某方可能出现的次数。</p><p>ER图在以下的层次上抽象：</p><ul><li>概念数据模型</li><li>逻辑数据模型</li><li>物理数据模型</li></ul><p>一般而言，业务分析人员使用概念和逻辑模型来展示系统中存在的业务对象，而数据库设计人员会为概念和逻辑模型加入更多的细节，进而生成物理模型，好为创建实际的数据库做准备。</p><p>下面是三种模式的区别：</p><table><thead><tr><th>ER对象</th><th>概念模型</th><th>逻辑模型</th><th>物理模型</th></tr></thead><tbody><tr><td>实体【名称】</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>关系</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>列</td><td></td><td>Y</td><td>Y</td></tr><tr><td>列的类型</td><td></td><td>随意</td><td>Y</td></tr><tr><td>主键</td><td></td><td></td><td>Y</td></tr><tr><td>外键</td><td></td><td></td><td>Y</td></tr></tbody></table><p>概念模型定义了系统中存在的业务对象以及他们之间的关系。建立概念模型，是为了识别所涉及的业务对象，来呈现系统的宏观图像。概念模型定义了那些实体存在，而非那些表。例如，逻辑和物理模型中可能存在多对多关系的表，但在概念模型下，他们只会表示为无基数的关系。</p><p>逻辑模型是概念模型的详细版本，通过明确定义每个实体中的列并引入操作和事务来让概念模型丰富起来。虽然逻辑模型仍是高层次的设计（非为特定数据库系统绘制），但是已经很接近了。</p><p>物理模型是数据库的实际设计蓝图。物理数据模型通过为每列执行类型，长度，非空等信息来详细刻画逻辑模型。由于物理模型表达了如何在特定的DNMS中构造和关系数据，因此设计时需要考虑实际数据库的需要和限制。</p>",19),d=[a];function l(n,o){return e(),i("div",null,d)}const m=t(r,[["render",l],["__file","ER图.html.vue"]]),h=JSON.parse('{"path":"/post/ER%E5%9B%BE.html","title":"ER图","lang":"zh-CN","frontmatter":{"title":"ER图","tags":["java","gradle"],"categories":["中间件"],"description":"实体图主要有两个作用： 显示系统范围内的主要实体 显示实体之间的相互关系 实体是系统内可以定义的事物或概念，也就是数据库中的表。 在ER图，实现表示成圆角矩形 实体还可以进一步分为弱实体和复合实体： 弱实体必须依赖另一个实体存在，例如成绩单必须依赖学生存在，因此成绩单是弱实体。弱实体使用双线矩形表示。 复合常常用于实现两个多是个实体的M:N关系，他由每...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/post/ER%E5%9B%BE.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"ER图"}],["meta",{"property":"og:description","content":"实体图主要有两个作用： 显示系统范围内的主要实体 显示实体之间的相互关系 实体是系统内可以定义的事物或概念，也就是数据库中的表。 在ER图，实现表示成圆角矩形 实体还可以进一步分为弱实体和复合实体： 弱实体必须依赖另一个实体存在，例如成绩单必须依赖学生存在，因此成绩单是弱实体。弱实体使用双线矩形表示。 复合常常用于实现两个多是个实体的M:N关系，他由每..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-20T07:19:17.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"gradle"}],["meta",{"property":"article:modified_time","content":"2024-04-20T07:19:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ER图\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-20T07:19:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[],"git":{"createdTime":1713597557000,"updatedTime":1713597557000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":1}]},"readingTime":{"minutes":2.88,"words":863},"filePathRelative":"post/ER图.md","localizedDate":"2024年4月20日","excerpt":"<p>实体图主要有两个作用：</p>\\n<ul>\\n<li>显示系统范围内的主要实体</li>\\n<li>显示实体之间的相互关系</li>\\n</ul>\\n<p>实体是系统内可以定义的事物或概念，也就是数据库中的表。 在ER图，实现表示成圆角矩形</p>\\n<p>实体还可以进一步分为弱实体和复合实体：</p>\\n<ul>\\n<li>弱实体必须依赖另一个实体存在，例如成绩单必须依赖学生存在，因此成绩单是弱实体。弱实体使用双线矩形表示。</li>\\n<li>复合常常用于实现两个多是个实体的M:N关系，他由每个关联实体的主键组成，用矩形内加菱形来表示</li>\\n</ul>\\n<p>实体属性，对应数据表中的列，表示实体的特性</p>","autoDesc":true}');export{m as comp,h as data};
