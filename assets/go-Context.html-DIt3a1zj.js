import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as e}from"./app-DvhfW1jQ.js";const t={},o=e(`<p>Go语言中的上下文（Context）是一种用于在 Goroutines 之间传递取消信号、截止时间和其他请求范围值的标准方式。<code>context</code> 包提供了 <code>Context</code> 类型和一些相关的函数，用于在并发程序中有效地传递上下文信息。</p><p>在Go语言中，上下文通常用于以下场景：</p><p>1.请求的传递：当一个请求从客户端发送到服务器时，可以使用上下文来携带与该请求相关的数据。这些数据可以是用户的身份信息、请求的元数据或其他与请求相关的信息。通过将上下文传递给处理该请求的goroutine，可以确保在整个处理过程中访问这些数据。</p><p>2.取消操作：上下文可以用于取消正在进行的操作。当用户或其他代码发送取消信号时，可以将该信号传递给正在执行操作的goroutine。goroutine在接收到取消信号后，可以根据需要执行清理操作并退出。</p><p>3.截止时间：有时候需要在一段时间后终止正在进行的操作。通过将截止时间与上下文一起传递给goroutine，可以确保在超过截止时间后执行适当的清理操作并退出。4.跨多个服务通信：当在分布式系统中使用Go语言时，上下文可以用于跨不同的服务之间传递请求数据、取消信号和截止时间。通过使用上下文，可以确保在整个系统中的各个服务之间保持一致的上下文和请求生命周期管理。</p><h1 id="context接口" tabindex="-1"><a class="header-anchor" href="#context接口"><span>Context接口</span></a></h1><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Context <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span>
    <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
    <span class="token function">Value</span><span class="token punctuation">(</span>key any<span class="token punctuation">)</span> any
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>Deadline 方法 返回<code>Context</code> 的截止时间，表示在这个时间点之后，<code>Context</code> 会被自动取消。如果 <code>Context</code> 没有设置截止时间，该方法返回一个零值 <code>time.Time</code> 和一个布尔值 <code>false</code></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>deadline<span class="token punctuation">,</span> ok <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> ok <span class="token punctuation">{</span>
    <span class="token comment">// Context 有截止时间</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// Context 没有截止时间</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>Done()</code> 方法返回一个只读通道，当 <code>Context</code> 被取消时，该通道会被关闭。你可以通过监听这个通道来检测 <code>Context</code> 是否被取消。如果 <code>Context</code> 永不取消，则返回 <code>nil</code>。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">select</span> <span class="token punctuation">{</span>
<span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment">// Context 已取消</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
    <span class="token comment">// Context 尚未取消</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>Err()</code> 方法返回一个 <code>error</code> 值，表示 <code>Context</code> 被取消时产生的错误。如果 <code>Context</code> 尚未取消，该方法返回 <code>nil</code>。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">if</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token comment">// Context 已取消，处理错误</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>Value(key any) any</code> 方法返回与 <code>Context</code> 关联的键值对，一般用于在 <code>Goroutine</code> 之间传递请求范围内的信息。如果没有关联的值，则返回 <code>nil</code>。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>value <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token keyword">if</span> value <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token comment">// 存在关联的值</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h1 id="context-的创建方式" tabindex="-1"><a class="header-anchor" href="#context-的创建方式"><span>Context 的创建方式</span></a></h1><ul><li><p><code>context.Background()</code> 函数返回一个非 <code>nil</code> 的空 <code>Context</code>，它没有携带任何的值，也没有取消和超时信号。通常作为根 <code>Context</code> 使用。</p></li><li><p><code>context.TODO()</code> 函数返回一个非 <code>nil</code> 的空 <code>Context</code>，它没有携带任何的值，也没有取消和超时信号。虽然它的返回结果和 <code>context.Background()</code> 函数一样，但是它们的使用场景是不一样的，如果不确定使用哪个上下文时，可以使用 <code>context.TODO()</code>。</p></li><li><p><code>context.WithValue(parent Context, key, val any)</code> 函数接收一个父 <code>Context</code> 和一个键值对 <code>key</code>、<code>val</code>，返回一个新的子 <code>Context</code>，并在其中添加一个 <code>key-value</code> 数据对。</p></li><li><p><code>context.WithCancel(parent Context) (ctx Context, cancel CancelFunc)</code> 函数接收一个父 <code>Context</code>，返回一个新的子 <code>Context</code> 和一个取消函数，当取消函数被调用时，子 <code>Context</code> 会被取消，同时会向子 <code>Context</code> 关联的 <code>Done()</code> 通道发送取消信号，届时其衍生的子孙 <code>Context</code> 都会被取消。这个函数适用于手动取消操作的场景。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>ctx<span class="token punctuation">,</span> cancelFunc <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>parentCtx<span class="token punctuation">)</span>  
<span class="token keyword">defer</span> <span class="token function">cancelFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>context.WithCancelCause(parent Context) (ctx Context, cancel CancelCauseFunc)</code> 函数是 <code>Go 1.20</code> 版本才新增的，其功能类似于 <code>context.WithCancel()</code>，但是它可以设置额外的取消原因，也就是 <code>error</code> 信息，返回的 <code>cancel</code> 函数被调用时，需传入一个 <code>error</code> 参数。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>ctx<span class="token punctuation">,</span> cancelFunc <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancelCause</span><span class="token punctuation">(</span>parentCtx<span class="token punctuation">)</span>
<span class="token keyword">defer</span> <span class="token function">cancelFunc</span><span class="token punctuation">(</span>errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;原因&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>context.Cause(c Context) error</code> 函数用于返回取消 <code>Context</code> 的原因，即错误值 <code>error</code>。如果是通过 <code>context.WithCancelCause()</code> 函数返回的取消函数 <code>cancelFunc(myErr)</code> 进行的取消操作，我们可以获取到 <code>myErr</code> 的值。否则，我们将得到与 <code>c.Err()</code> 相同的返回值。如果 <code>Context</code> 尚未被取消，将返回 <code>nil</code>。</p></li><li><p><code>context.WithDeadline(parent Context, d time.Time) (Context, CancelFunc)</code> 函数接收一个父 <code>Context</code> 和一个截止时间作为参数，返回一个新的子 <code>Context</code>。当截止时间到达时，子 <code>Context</code> 其衍生的子孙 <code>Context</code> 会被自动取消。这个函数适用于需要在特定时间点取消操作的场景。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>deadline <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
ctx<span class="token punctuation">,</span> cancelFunc <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>parentCtx<span class="token punctuation">,</span> deadline<span class="token punctuation">)</span>
<span class="token keyword">defer</span> <span class="token function">cancelFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>context.WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)</code> 函数和 <code>context.WithDeadline()</code> 函数的功能是一样的，其底层会调用 <code>WithDeadline()</code> 函数，只不过其第二个参数接收的是一个超时时间，而不是截止时间。这个函数适用于需要在一段时间后取消操作的场景。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>ctx<span class="token punctuation">,</span> cancelFunc <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>parentCtx<span class="token punctuation">,</span> time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">defer</span> <span class="token function">cancelFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h1 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h1><h2 id="传递共享数据" tabindex="-1"><a class="header-anchor" href="#传递共享数据"><span>传递共享数据</span></a></h2><p>编写中间件函数，用于向 <code>HTTP</code> 处理链中添加处理请求 <code>ID</code> 的功能。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> key <span class="token builtin">int</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
   requestIDKey key <span class="token operator">=</span> <span class="token boolean">iota</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">WithRequestId</span><span class="token punctuation">(</span>next http<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler <span class="token punctuation">{</span>
   <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>rw http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 从请求中提取请求ID和用户信息</span>
      requestID <span class="token operator">:=</span> req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;X-Request-ID&quot;</span><span class="token punctuation">)</span>

      <span class="token comment">// 创建子 context，并添加一个请求 Id 的信息</span>
      ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithValue</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestIDKey<span class="token punctuation">,</span> requestID<span class="token punctuation">)</span>

      <span class="token comment">// 创建一个新的请求，设置新 ctx</span>
      req <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">WithContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>

      <span class="token comment">// 将带有请求 ID 的上下文传递给下一个处理器</span>
      next<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span> req<span class="token punctuation">)</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，我们从请求的头部中提取请求 <code>ID</code>。然后使用 <code>context.WithValue</code> 创建一个子上下文，并将请求 <code>ID</code> 作为键值对存储在子上下文中。接着，我们创建一个新的请求对象，并将子上下文设置为新请求的上下文。最后，我们将带有请求 <code>ID</code> 的上下文传递给下一个处理器。 这样，通过使用 <code>WithRequestId</code> 中间件函数，我们可以在处理请求的过程中方便地获取和使用请求 <code>ID</code>，例如在 <strong>日志记录、跟踪和调试等方面</strong>。</p><h2 id="传递取消信号-结束任务" tabindex="-1"><a class="header-anchor" href="#传递取消信号-结束任务"><span>传递取消信号，结束任务</span></a></h2><p>启动一个工作协程，接收到取消信号就停止工作。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
   <span class="token string">&quot;context&quot;</span>
   <span class="token string">&quot;fmt&quot;</span>
   <span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   ctx<span class="token punctuation">,</span> cancelFunc <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token keyword">go</span> <span class="token function">Working</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>

   time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
   <span class="token function">cancelFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

   <span class="token comment">// 等待一段时间，以确保工作协程接收到取消信号并退出</span>
   time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">Working</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">for</span> <span class="token punctuation">{</span>
      <span class="token keyword">select</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
         fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;下班啦...&quot;</span><span class="token punctuation">)</span>
         <span class="token keyword">return</span>
      <span class="token keyword">default</span><span class="token punctuation">:</span>
         fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;陈明勇正在工作中...&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们创建了一个 <code>Working</code> 函数，它会不断执行工作任务。我们使用 <code>context.WithCancel</code> 创建了一个上下文 <code>ctx</code> 和一个取消函数 <code>cancelFunc</code>。然后，启动了一个工作协程，并将上下文传递给它。</p><p>在主函数中，需要等待一段时间（<strong>3</strong> 秒）模拟业务逻辑的执行。然后，调用取消函数 <code>cancelFunc</code>，通知工作协程停止工作。工作协程在每次循环中都会检查上下文的状态，一旦接收到取消信号，就会退出循环。</p><p>最后，等待一段时间（<strong>1</strong> 秒），以确保工作协程接收到取消信号并退出。</p><h2 id="超时控制" tabindex="-1"><a class="header-anchor" href="#超时控制"><span>超时控制</span></a></h2><p>模拟耗时操作，超时控制。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
   <span class="token string">&quot;context&quot;</span>
   <span class="token string">&quot;fmt&quot;</span>
   <span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 使用 WithTimeout 创建一个带有超时的上下文对象</span>
   ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
   <span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

   <span class="token comment">// 在另一个 goroutine 中执行耗时操作</span>
   <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 模拟一个耗时的操作，例如数据库查询</span>
      time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
      <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

   <span class="token keyword">select</span> <span class="token punctuation">{</span>
   <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;操作已超时&quot;</span><span class="token punctuation">)</span>
   <span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">:</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;操作完成&quot;</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，首先使用 <code>context.WithTimeout()</code> 创建了一个带有 <strong>3</strong> 秒超时的上下文对象 <code>ctx, cancel := context.WithTimeout(ctx, 3*time.Second)</code>。</p><p>接下来，在一个新的 <code>goroutine</code> 中执行一个模拟的耗时操作，例如等待 <strong>5</strong> 秒钟。当耗时操作完成后，调用 <code>cancel()</code> 方法来取消超时上下文。</p><p>最后，在主 <code>goroutine</code> 中使用 <code>select</code> 语句等待超时上下文的完成信号。如果在 <strong>3</strong> 秒内耗时操作完成，那么会输出 &quot;操作完成&quot;。如果超过了 <strong>3</strong> 秒仍未完成，超时上下文的 <code>Done()</code> 通道会被关闭，输出 &quot;操作已超时&quot;。</p><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span><strong>最佳实践</strong></span></a></h2><p>context.Background 只应用在最高等级，作为所有派生 context 的根。</p><p>context.TODO 应用在不确定要使用什么的地方，或者当前函数以后会更新以便使用 context。</p><p>context 取消是建议性的，这些函数可能需要一些时间来清理和退出。</p><p>context.Value 应该很少使用，它不应该被用来传递可选参数。这使得 API 隐式的并且可以引起错误。取而代之的是，这些值应该作为参数传递。</p><p>不要将 context 存储在结构中，在函数中显式传递它们，最好是作为第一个参数。</p><p>永远不要传递不存在的 context 。相反，如果您不确定使用什么，使用一个 ToDo context。</p><p>Context 结构没有取消方法，因为只有派生 context 的函数才应该取消 context。</p>`,35),c=[o];function p(i,l){return s(),a("div",null,c)}const r=n(t,[["render",p],["__file","go-Context.html.vue"]]),k=JSON.parse('{"path":"/Go/go-Context.html","title":"Go Context","lang":"zh-CN","frontmatter":{"title":"Go Context","date":"2024-04-24T00:00:00.000Z","tags":["Go"],"categories":["Go"],"description":"Go语言中的上下文（Context）是一种用于在 Goroutines 之间传递取消信号、截止时间和其他请求范围值的标准方式。context 包提供了 Context 类型和一些相关的函数，用于在并发程序中有效地传递上下文信息。 在Go语言中，上下文通常用于以下场景： 1.请求的传递：当一个请求从客户端发送到服务器时，可以使用上下文来携带与该请求相关的...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/Go/go-Context.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"Go Context"}],["meta",{"property":"og:description","content":"Go语言中的上下文（Context）是一种用于在 Goroutines 之间传递取消信号、截止时间和其他请求范围值的标准方式。context 包提供了 Context 类型和一些相关的函数，用于在并发程序中有效地传递上下文信息。 在Go语言中，上下文通常用于以下场景： 1.请求的传递：当一个请求从客户端发送到服务器时，可以使用上下文来携带与该请求相关的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-24T08:19:31.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:published_time","content":"2024-04-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-24T08:19:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go Context\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-24T08:19:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"传递共享数据","slug":"传递共享数据","link":"#传递共享数据","children":[]},{"level":2,"title":"传递取消信号，结束任务","slug":"传递取消信号-结束任务","link":"#传递取消信号-结束任务","children":[]},{"level":2,"title":"超时控制","slug":"超时控制","link":"#超时控制","children":[]},{"level":2,"title":"最佳实践","slug":"最佳实践","link":"#最佳实践","children":[]}],"git":{"createdTime":1713946771000,"updatedTime":1713946771000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":1}]},"readingTime":{"minutes":7.87,"words":2361},"filePathRelative":"Go/go-Context.md","localizedDate":"2024年4月24日","excerpt":"<p>Go语言中的上下文（Context）是一种用于在 Goroutines 之间传递取消信号、截止时间和其他请求范围值的标准方式。<code>context</code> 包提供了 <code>Context</code> 类型和一些相关的函数，用于在并发程序中有效地传递上下文信息。</p>\\n<p>在Go语言中，上下文通常用于以下场景：</p>\\n<p>1.请求的传递：当一个请求从客户端发送到服务器时，可以使用上下文来携带与该请求相关的数据。这些数据可以是用户的身份信息、请求的元数据或其他与请求相关的信息。通过将上下文传递给处理该请求的goroutine，可以确保在整个处理过程中访问这些数据。</p>","autoDesc":true}');export{r as comp,k as data};
