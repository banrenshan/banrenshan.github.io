import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,a as e}from"./app-Brzzz3sI.js";const l="/assets/image-20240421175643962-CaKtAJSc.png",i="/assets/image-20240421175735249-CLJ_ubGR.png",t="/assets/image-20240421175911931-CaTyIagZ.png",o="/assets/image-20240421180458924-BGj18Xxp.png",c="/assets/image-20240421174950546-C3Ei-BON.png",d="/assets/image-20240421180955751-B0gfQr7v.png",p="/assets/image-20240421181027604-Cx7bwgGi.png",r={},u=e(`<h2 id="docker-安装oracle" tabindex="-1"><a class="header-anchor" href="#docker-安装oracle"><span>docker 安装Oracle</span></a></h2><ol><li><p>安装</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code># 下载镜像
docker pull oracleinanutshell/oracle-xe-11g

# 启动容器
docker run -d -p 49161:1521 -e ORACLE_ALLOW_REMOTE=true oracleinanutshell/oracle-xe-11g
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>初始密码</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>hostname: localhost
port: 49161
sid: xe
username: system
password: oracle
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>设置用户密码</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>create user zzq identified by 1234;
GRANT CREATE SESSION TO zzq;
grant connect,resource,dba to zzq;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><h3 id="date" tabindex="-1"><a class="header-anchor" href="#date"><span>DATE</span></a></h3><p><code>DATE</code>数据类型允许以一秒的精度存储包括<strong>日期</strong>和<strong>时间</strong>的<code>时间点值</code>。它可以存储月，年，日，世纪，时，分和秒。它典型地用来表示什么时候事情已经发生或将要发生</p><p>输入和输出的标准日期格式是<code>DD-MON-YY</code>，由<code>NLS_DATE_FORMAT</code>参数的值表示</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 日期转换字符串</span>
<span class="token keyword">SELECT</span> TO_CHAR<span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span><span class="token string">&#39;YYYY-MM-DD&#39;</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> dual<span class="token punctuation">;</span> 
<span class="token keyword">SELECT</span> TO_CHAR<span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span><span class="token string">&#39;yyyy-mm-dd&#39;</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> dual<span class="token punctuation">;</span> <span class="token comment">-- 大小写好像没有不同</span>

<span class="token comment">-- 字符串转日期</span>
<span class="token keyword">SELECT</span> TO_DATE<span class="token punctuation">(</span><span class="token string">&#39;2023-01-01&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;yyyy-mm-dd&#39;</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> dual<span class="token punctuation">;</span> 

<span class="token comment">-- 字符串转日期，但必须是 &#39;YYYY-MM-DD&#39; 格式</span>
<span class="token keyword">SELECT</span> <span class="token keyword">DATE</span> <span class="token string">&#39;2023-01-01&#39;</span> <span class="token keyword">FROM</span> dual<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="timestamp-类型" tabindex="-1"><a class="header-anchor" href="#timestamp-类型"><span>TIMESTAMP 类型</span></a></h3><p>除了包括了DATE数据类型的年月日时分秒的信息，还有小数秒的信息。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> SYSTIMESTAMP <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span>
<span class="token comment">-- 类型转换</span>
<span class="token keyword">SELECT</span> CAST<span class="token punctuation">(</span>SYSDATE <span class="token keyword">AS</span> <span class="token keyword">TIMESTAMP</span><span class="token punctuation">)</span>  <span class="token keyword">FROM</span> dual<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h2><h3 id="all" tabindex="-1"><a class="header-anchor" href="#all"><span>ALL</span></a></h3><p>Oracle <code>ALL</code>操作符用于将值与<code>子查询返回的值列表</code>或<code>结果集</code>进行比较：</p><ul><li>ALL运算符前面必须有一个运算符，例如：<code>=</code>，<code>!=</code>,<code>&gt;</code>，<code>&gt;=</code>，<code>&lt;</code>，<code>&lt;=</code>，后跟一个列表或子查询。</li><li>列表或子查询必须用圆括号包围</li></ul><p>使用<code>ALL</code>运算符将值与列表进行比较时，Oracle将初始条件扩展到列表的所有元素，并使用<code>AND</code>运算符将它们组合在一起，如下所示：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
    <span class="token operator">*</span>
<span class="token keyword">FROM</span>
    table_name
<span class="token keyword">WHERE</span>
    c <span class="token operator">&gt;</span> <span class="token keyword">ALL</span> <span class="token punctuation">(</span>
        v1<span class="token punctuation">,</span>
        v2<span class="token punctuation">,</span>
        v3
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际的sql等同于：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
    <span class="token operator">*</span>
<span class="token keyword">FROM</span>
    table_name
<span class="token keyword">WHERE</span>
    c <span class="token operator">&gt;</span> v1
    <span class="token operator">AND</span> c <span class="token operator">&gt;</span> v2
    <span class="token operator">AND</span> c <span class="token operator">&gt;</span> v3<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用<code>ALL</code>运算符将值与子查询返回的结果集进行比较，则Oracle有两种等同的转换方式，如下所示：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> product_name<span class="token punctuation">,</span>
       list_price
<span class="token keyword">FROM</span> products
<span class="token keyword">WHERE</span> list_price <span class="token operator">&gt;</span> <span class="token keyword">ALL</span>
    <span class="token punctuation">(</span> 
      <span class="token keyword">SELECT</span> list_price
      <span class="token keyword">FROM</span> products
      <span class="token keyword">WHERE</span> category_id <span class="token operator">=</span> <span class="token number">1</span> 
    <span class="token punctuation">)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> product_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一种转换：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> product_name<span class="token punctuation">,</span>
       list_price
<span class="token keyword">FROM</span> products p1
<span class="token keyword">WHERE</span> <span class="token operator">NOT</span><span class="token punctuation">(</span> 
  	p1<span class="token punctuation">.</span>list_price <span class="token operator">&lt;=</span> <span class="token keyword">ANY</span><span class="token punctuation">(</span>
      			 <span class="token keyword">SELECT</span> list_price
             <span class="token keyword">FROM</span> products p2
             <span class="token keyword">WHERE</span> category_id <span class="token operator">=</span> <span class="token number">1</span> 
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> product_name<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二种转换：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> product_name<span class="token punctuation">,</span>
       list_price
<span class="token keyword">FROM</span> products p1
<span class="token keyword">WHERE</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span>
    <span class="token punctuation">(</span>
      <span class="token keyword">SELECT</span> p2<span class="token punctuation">.</span>list_price
      <span class="token keyword">FROM</span> products p2
      <span class="token keyword">WHERE</span> p2<span class="token punctuation">.</span>category_id <span class="token operator">=</span> <span class="token number">1</span>
      <span class="token operator">AND</span> p2<span class="token punctuation">.</span>list_price <span class="token operator">&gt;=</span> p1<span class="token punctuation">.</span>list_price 
    <span class="token punctuation">)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> product_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="union" tabindex="-1"><a class="header-anchor" href="#union"><span>UNION</span></a></h3><p><code>UNION</code>运算符是一个集合运算符，它将两个或多个<code>SELECT</code>语句的结果集组合到一个结果集中。 以下说明了组合两个查询的结果集的<code>UNION</code>运算符的语法：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
    column_list_1
<span class="token keyword">FROM</span>
    T1
<span class="token keyword">UNION</span> 
<span class="token keyword">SELECT</span>
    column_list_1
<span class="token keyword">FROM</span>
    T2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此声明中，column_list_1和column_list_2必须具有相同顺序的相同列数。 另外，对应列的数据类型必须是相同的数据类型组 。</p><p><strong>Oracle UNION图示</strong></p><p>假设有两个表 - <code>T1</code>和<code>T2</code>：</p><ul><li><code>T1</code>有三行：<code>1</code>,<code>2</code>和<code>3</code></li><li><code>T2</code>也有三行：<code>2</code>,<code>3</code>和<code>4</code></li></ul><p>下图说明了T1和T2表的UNION运算图示：</p><figure><img src="`+l+'" alt="image-20240421175735249" tabindex="0" loading="lazy"><figcaption>image-20240421175735249</figcaption></figure><p>UNION运算符删除(消除)重复的行 - 2和3</p><p>下图显示了UNION ALL运算符T1和T2表的结果：</p><figure><img src="'+i+'" alt="image-20240421175735249" tabindex="0" loading="lazy"><figcaption>image-20240421175735249</figcaption></figure><p>正如上面所看到的，UNION ALL保留了重复的行 - 2和3。</p><p>要对由UNION运算符返回的结果集进行排序，可以将ORDER BY子句添加到最后一个SELECT语句中。</p><h3 id="intersect-交集" tabindex="-1"><a class="header-anchor" href="#intersect-交集"><span>INTERSECT（交集）</span></a></h3><p>Oracle INTERSECT运算符比较两个查询的结果，并返回两个查询输出的相同行。与UNION运算符相似，使用INTERSECT运算符时必须遵循以下规则：</p><ul><li>两个查询中列的数量和顺序必须相同。</li><li>相应列的数据类型必须处于相同的数据类型组中，例如数字或字符。</li></ul><p><strong>Oracle INTERSECT说明图</strong></p><p>假设有两个查询返回<code>T1</code>和<code>T2</code>表中的结果集。</p><ul><li><code>T1</code>结果集包括：<code>1</code>，<code>2</code>，<code>3</code>行。</li><li><code>T2</code>结果集包括：<code>2</code>,<code>3</code>,<code>4</code>行。</li></ul><p><code>T1</code>和<code>T2</code>的相交结果返回是<code>2</code>和<code>3</code>。因为这些是由两个查询输出的相同值。</p><p>下图说明了<code>T1</code>和<code>T2</code>的交集：</p><figure><img src="'+t+'" alt="image-20240421175911931" tabindex="0" loading="lazy"><figcaption>image-20240421175911931</figcaption></figure><h3 id="minus" tabindex="-1"><a class="header-anchor" href="#minus"><span>MINUS</span></a></h3><p>Oracle MINUS运算符比较两个查询，并返回第一个查询中但不是第二个查询输出的行。 换句话说，MINUS运算符从一个结果集中减去另一个结果集。 与UNION和INTERSECT操作符类似，上面的查询必须符合以下规则：</p><ul><li>列数和它们的顺序必须匹配一致。</li><li>相应列的数据类型必须处于相同的数据类型组中，例如数字或字符。</li></ul><p>假设第一个查询<code>T1</code>表返回包含<code>1</code>,<code>2</code>和<code>3</code>的结果集。第二个查询<code>T2</code>表返回包含<code>2</code>,<code>3</code>和<code>4</code>的结果集。</p><p>下图说明了T1和T2的MINUS运算结果：</p><figure><img src="'+o+`" alt="image-20240421180458924" tabindex="0" loading="lazy"><figcaption>image-20240421180458924</figcaption></figure><h3 id="any" tabindex="-1"><a class="header-anchor" href="#any"><span>ANY</span></a></h3><p>Oracle ANY运算符用于将值与子查询返回的值或结果集列表进行比较。</p><ul><li>ANY运算符前面必须有一个运算符，例如：=，!=，&gt;，&gt;=，&lt;，&lt;=。</li><li>列表或子查询必须用圆括号包围。</li></ul><p>使用ANY运算符将值与列表进行比较时，Oracle将初始条件扩展到列表的所有元素，并使用OR运算符将它们组合，如下所示：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
    <span class="token operator">*</span>
<span class="token keyword">FROM</span>
    table_name
<span class="token keyword">WHERE</span>
    c <span class="token operator">&gt;</span> <span class="token keyword">ANY</span> <span class="token punctuation">(</span>
        v1<span class="token punctuation">,</span>
        v2<span class="token punctuation">,</span>
        v3
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Oracle将上述查询转换为以下内容：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
    <span class="token operator">*</span>
<span class="token keyword">FROM</span>
    table_name
<span class="token keyword">WHERE</span>
    c <span class="token operator">&gt;</span> v1
    <span class="token operator">OR</span> c <span class="token operator">&gt;</span> v2
    <span class="token operator">OR</span> c <span class="token operator">&gt;</span> v3<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="exists" tabindex="-1"><a class="header-anchor" href="#exists"><span>Exists</span></a></h3><p>Oracle Exists运算符是返回true或false的布尔运算符。EXISTS运算符通常与子查询一起使用来测试行的存在：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
    <span class="token operator">*</span>
<span class="token keyword">FROM</span>
    table_name
    <span class="token keyword">WHERE</span>
        <span class="token keyword">EXISTS</span><span class="token punctuation">(</span>subquery<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果子查询返回任何行，则EXISTS运算符返回true，否则返回false。 另外，当子查询返回第一行，EXISTS操作符终止子查询的处理。</p><h2 id="分页查询" tabindex="-1"><a class="header-anchor" href="#分页查询"><span>分页查询</span></a></h2><p>如果使用的是<em>Oracle 11g</em>及以下版本的：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> my_user <span class="token keyword">WHERE</span> rownum<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果是使用的高版本：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> my_user <span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token number">5</span> <span class="token keyword">ROWS</span> ONLY<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面是分页的详细语法：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token punctuation">[</span> <span class="token keyword">OFFSET</span> <span class="token keyword">offset</span> <span class="token keyword">ROWS</span><span class="token punctuation">]</span>
 <span class="token keyword">FETCH</span>  <span class="token keyword">NEXT</span> <span class="token punctuation">[</span>  row_count <span class="token operator">|</span> <span class="token keyword">percent</span> <span class="token keyword">PERCENT</span>  <span class="token punctuation">]</span> <span class="token keyword">ROWS</span>  <span class="token punctuation">[</span> ONLY <span class="token operator">|</span> <span class="token keyword">WITH</span> TIES <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="offset子句" tabindex="-1"><a class="header-anchor" href="#offset子句"><span><strong>OFFSET子句</strong></span></a></h3><p><code>OFFSET</code>子句指定在行限制开始之前要跳过行数。<code>OFFSET</code>子句是可选的。 如果跳过它，则偏移量为<code>0</code>，行限制从第一行开始计算。</p><p>偏移量必须是一个数字或一个表达式，其值为一个数字。偏移量遵守以下规则：</p><ul><li>如果偏移量是负值，则将其视为<code>0</code>。</li><li>如果偏移量为<code>NULL</code>或大于查询返回的行数，则不返回任何行。</li><li>如果偏移量包含一个分数，则分数部分被截断。</li></ul><p>示例：从第二行开始，拿2条数据：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> my_user <span class="token keyword">offset</span> <span class="token number">1</span> <span class="token keyword">rows</span> <span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token number">2</span> <span class="token keyword">ROWS</span> ONLY<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="fetch子句" tabindex="-1"><a class="header-anchor" href="#fetch子句"><span><strong>FETCH子句</strong></span></a></h3><p><code>FETCH</code>子句指定要返回的行数或百分比。</p><p>为了语义清晰的目的，您可以使用关键字<code>ROW</code>而不是<code>ROWS</code>，<code>FIRST</code>而不是<code>NEXT</code>。 例如，以下子句的行为和产生的结果相同：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token number">1</span> <span class="token keyword">ROWS</span>
<span class="token keyword">FETCH</span> <span class="token keyword">FIRST</span> <span class="token number">1</span> <span class="token keyword">ROW</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>以下查询返回库存量最高的前<code>1％</code>的产品：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
    product_name<span class="token punctuation">,</span>
    quantity
<span class="token keyword">FROM</span>
    inventories
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> products
        <span class="token keyword">USING</span><span class="token punctuation">(</span>product_id<span class="token punctuation">)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
    quantity <span class="token keyword">DESC</span> 
<span class="token keyword">FETCH</span> <span class="token keyword">FIRST</span> <span class="token number">1</span> <span class="token keyword">PERCENT</span> <span class="token keyword">ROWS</span> ONLY<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>库存(<code>inventories</code>)表总共有<code>1112</code>行，因此，<code>1112</code>中的<code>1％</code>是<code>11.1</code>，四舍五入为<code>12</code>(行)。</p><h3 id="only-with-ties选项" tabindex="-1"><a class="header-anchor" href="#only-with-ties选项"><span><strong>ONLY | WITH TIES选项</strong></span></a></h3><ul><li>ONLY返回<code>FETCH NEXT</code>后的行</li><li><code>WITH TIES</code>返回与最后一行相同的排序键。请注意，如果使用<code>WITH TIES</code>，则必须在查询中指定一个<code>ORDER BY</code>子句。如果不这样做，查询将不会返回额外的行。</li></ul><p>以下查询使用<code>WITH TIES</code>选项的行限制子句：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
 product_name<span class="token punctuation">,</span>
 quantity
<span class="token keyword">FROM</span>
 inventories
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> products
 <span class="token keyword">USING</span><span class="token punctuation">(</span>product_id<span class="token punctuation">)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
 quantity <span class="token keyword">DESC</span> 
<span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token number">10</span> <span class="token keyword">ROWS</span> <span class="token keyword">WITH</span> TIES<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上面示例查询语句，得到以下结果 :</p><figure><img src="`+c+`" alt="image-20240421174950546" tabindex="0" loading="lazy"><figcaption>image-20240421174950546</figcaption></figure><p>即使查询请求了<code>10</code>行数据，因为它具有<code>WITH TIES</code>选项，查询还返回了另外两行。 请注意，这两个附加行在<code>quantity</code>列的值与第<code>10</code>行<code>quantity</code>列的值相同。</p><h2 id="管理操作" tabindex="-1"><a class="header-anchor" href="#管理操作"><span>管理操作</span></a></h2><h3 id="查看数据库的版本" tabindex="-1"><a class="header-anchor" href="#查看数据库的版本"><span>查看数据库的版本</span></a></h3><p>方式一：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> v$version<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+d+`" alt="image-20240421180955751" tabindex="0" loading="lazy"><figcaption>image-20240421180955751</figcaption></figure><p>方式二：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product_component_version<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="image-20240421181027604" tabindex="0" loading="lazy"><figcaption>image-20240421181027604</figcaption></figure><h2 id="创建用户" tabindex="-1"><a class="header-anchor" href="#创建用户"><span>创建用户</span></a></h2><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 用户名必须以c##开头</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> c<span class="token comment">##zzq IDENTIFIED BY Zhao_19910425;</span>
<span class="token comment">-- s</span>
<span class="token keyword">GRANT</span> <span class="token keyword">CREATE</span> <span class="token keyword">SESSION</span> <span class="token keyword">to</span> c<span class="token comment">##zzq;</span>
<span class="token keyword">GRANT</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">to</span> c<span class="token comment">##zzq;</span>
<span class="token keyword">GRANT</span> UNLIMITED <span class="token keyword">TABLESPACE</span> <span class="token keyword">to</span> c<span class="token comment">##zzq;</span>
<span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span> <span class="token keyword">ANY</span> <span class="token keyword">TABLE</span> <span class="token keyword">to</span> c<span class="token comment">##zzq;</span>
<span class="token keyword">GRANT</span> <span class="token keyword">UPDATE</span> <span class="token keyword">ANY</span> <span class="token keyword">TABLE</span> <span class="token keyword">to</span> c<span class="token comment">##zzq;</span>
<span class="token keyword">GRANT</span> <span class="token keyword">INSERT</span> <span class="token keyword">ANY</span> <span class="token keyword">TABLE</span> <span class="token keyword">to</span> c<span class="token comment">##zzq;</span>
<span class="token keyword">GRANT</span> <span class="token keyword">DROP</span> <span class="token keyword">ANY</span> <span class="token keyword">TABLE</span> <span class="token keyword">to</span> c<span class="token comment">##zzq;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,101),k=[u];function v(m,g){return n(),a("div",null,k)}const E=s(r,[["render",v],["__file","07-oracle.html.vue"]]),T=JSON.parse('{"path":"/gudie/07-oracle.html","title":"Oracle基础 指南","lang":"zh-CN","frontmatter":{"title":"Oracle基础 指南","date":"2024-04-20T00:00:00.000Z","categories":["数据库"],"tags":["oracle"],"description":"docker 安装Oracle 安装 初始密码 设置用户密码 数据类型 DATE DATE数据类型允许以一秒的精度存储包括日期和时间的时间点值。它可以存储月，年，日，世纪，时，分和秒。它典型地用来表示什么时候事情已经发生或将要发生 输入和输出的标准日期格式是DD-MON-YY，由NLS_DATE_FORMAT参数的值表示 TIMESTAMP 类型 除了...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/gudie/07-oracle.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"Oracle基础 指南"}],["meta",{"property":"og:description","content":"docker 安装Oracle 安装 初始密码 设置用户密码 数据类型 DATE DATE数据类型允许以一秒的精度存储包括日期和时间的时间点值。它可以存储月，年，日，世纪，时，分和秒。它典型地用来表示什么时候事情已经发生或将要发生 输入和输出的标准日期格式是DD-MON-YY，由NLS_DATE_FORMAT参数的值表示 TIMESTAMP 类型 除了..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-24T06:29:19.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"oracle"}],["meta",{"property":"article:published_time","content":"2024-04-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-24T06:29:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Oracle基础 指南\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-24T06:29:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"docker 安装Oracle","slug":"docker-安装oracle","link":"#docker-安装oracle","children":[]},{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[{"level":3,"title":"DATE","slug":"date","link":"#date","children":[]},{"level":3,"title":"TIMESTAMP 类型","slug":"timestamp-类型","link":"#timestamp-类型","children":[]}]},{"level":2,"title":"运算符","slug":"运算符","link":"#运算符","children":[{"level":3,"title":"ALL","slug":"all","link":"#all","children":[]},{"level":3,"title":"UNION","slug":"union","link":"#union","children":[]},{"level":3,"title":"INTERSECT（交集）","slug":"intersect-交集","link":"#intersect-交集","children":[]},{"level":3,"title":"MINUS","slug":"minus","link":"#minus","children":[]},{"level":3,"title":"ANY","slug":"any","link":"#any","children":[]},{"level":3,"title":"Exists","slug":"exists","link":"#exists","children":[]}]},{"level":2,"title":"分页查询","slug":"分页查询","link":"#分页查询","children":[{"level":3,"title":"OFFSET子句","slug":"offset子句","link":"#offset子句","children":[]},{"level":3,"title":"FETCH子句","slug":"fetch子句","link":"#fetch子句","children":[]},{"level":3,"title":"ONLY | WITH TIES选项","slug":"only-with-ties选项","link":"#only-with-ties选项","children":[]}]},{"level":2,"title":"管理操作","slug":"管理操作","link":"#管理操作","children":[{"level":3,"title":"查看数据库的版本","slug":"查看数据库的版本","link":"#查看数据库的版本","children":[]}]},{"level":2,"title":"创建用户","slug":"创建用户","link":"#创建用户","children":[]}],"git":{"createdTime":1713918011000,"updatedTime":1713940159000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":2}]},"readingTime":{"minutes":6.86,"words":2058},"filePathRelative":"gudie/07-oracle.md","localizedDate":"2024年4月20日","excerpt":"<h2>docker 安装Oracle</h2>\\n<ol>\\n<li>\\n<p>安装</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code># 下载镜像\\ndocker pull oracleinanutshell/oracle-xe-11g\\n\\n# 启动容器\\ndocker run -d -p 49161:1521 -e ORACLE_ALLOW_REMOTE=true oracleinanutshell/oracle-xe-11g\\n</code></pre></div></li>\\n<li>\\n<p>初始密码</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>hostname: localhost\\nport: 49161\\nsid: xe\\nusername: system\\npassword: oracle\\n</code></pre></div></li>\\n<li>\\n<p>设置用户密码</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>create user zzq identified by 1234;\\nGRANT CREATE SESSION TO zzq;\\ngrant connect,resource,dba to zzq;\\n</code></pre></div></li>\\n</ol>","autoDesc":true}');export{E as comp,T as data};
