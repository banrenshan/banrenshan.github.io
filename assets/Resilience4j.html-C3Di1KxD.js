import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-g-OKA8ms.js";const e="/assets/1621905009574-efb3e8d2-37b4-4c11-a31d-217d6ca40521-XsmuXXG6.png",p="/assets/1621905043342-a94cf788-6465-4725-8411-c9d235694a40-BzSjXxDf.png",c="/assets/1621907196798-f3dc2a24-6363-48f5-a47b-cd4ca0728914-h7HJdWQL.png",o="/assets/1621912949221-8935c2a6-f611-4ac4-8e98-f5666bbaa829-CpP5pu3h.png",i={},l=t(`<h1 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h1><p>Resilience4j一个轻量级（只依赖Vavr第三方库）的，易于使用的容错框架，灵感来源于Netflix Hystrix，依托于java8的函数式编程。</p><p>Resilience4j提供了断路器、限速、重试、Bulkhead等功能。你可以任意选择和搭配这些功能。</p><p>Bulkhead(隔板模式)是一种容错的应用程序设计。 在隔板架构中，应用程序的元素被隔离到池中，因此，如果其中一个失败，则其他元素将继续运行。 它是根据船体的分段隔板（凸头）来命名的。 如果船体受损，则只有损坏的部分会充满水，从而防止船下沉。</p><p>以下示例显示了如何使用CircuitBreaker和Retry装饰lambda表达式，以便在发生异常时最多重试3次。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 创建默认的断路器</span>
<span class="token class-name">CircuitBreaker</span> circuitBreaker <span class="token operator">=</span> <span class="token class-name">CircuitBreaker</span><span class="token punctuation">.</span><span class="token function">ofDefaults</span><span class="token punctuation">(</span><span class="token string">&quot;backendService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建默认的重试器，重拾3次，间隔为500ms</span>
<span class="token class-name">Retry</span> retry <span class="token operator">=</span> <span class="token class-name">Retry</span><span class="token punctuation">.</span><span class="token function">ofDefaults</span><span class="token punctuation">(</span><span class="token string">&quot;backendService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建默认的隔离器</span>
<span class="token class-name">Bulkhead</span> bulkhead <span class="token operator">=</span> <span class="token class-name">Bulkhead</span><span class="token punctuation">.</span><span class="token function">ofDefaults</span><span class="token punctuation">(</span><span class="token string">&quot;backendService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//具体的业务调用</span>
<span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> supplier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> backendService<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span>param1<span class="token punctuation">,</span> param2<span class="token punctuation">)</span>

<span class="token comment">// 使用装扮器装扮函数</span>
<span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> decoratedSupplier <span class="token operator">=</span> <span class="token class-name">Decorators</span><span class="token punctuation">.</span><span class="token function">ofSupplier</span><span class="token punctuation">(</span>supplier<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">withCircuitBreaker</span><span class="token punctuation">(</span>circuitBreaker<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">withBulkhead</span><span class="token punctuation">(</span>bulkhead<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">withRetry</span><span class="token punctuation">(</span>retry<span class="token punctuation">)</span>  
  <span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 执行函数，并设置后退函数</span>
<span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token class-name">Try</span><span class="token punctuation">.</span><span class="token function">ofSupplier</span><span class="token punctuation">(</span>decoratedSupplier<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">recover</span><span class="token punctuation">(</span>throwable <span class="token operator">-&gt;</span> <span class="token string">&quot;Hello from Recovery&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 不使用装扮器，直接使用断路器调用函数</span>
<span class="token class-name">String</span> result <span class="token operator">=</span> circuitBreaker
  <span class="token punctuation">.</span><span class="token function">executeSupplier</span><span class="token punctuation">(</span>backendService<span class="token operator">::</span><span class="token function">doSomething</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用ThreadPoolBulkhead在另外的线程中异步运行</span>
 <span class="token class-name">ThreadPoolBulkhead</span> threadPoolBulkhead <span class="token operator">=</span> <span class="token class-name">ThreadPoolBulkhead</span><span class="token punctuation">.</span><span class="token function">ofDefaults</span><span class="token punctuation">(</span><span class="token string">&quot;backendService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 设定超时机制，超时需要Scheduler来调度</span>
<span class="token class-name">ScheduledExecutorService</span> scheduledExecutorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">TimeLimiter</span> timeLimiter <span class="token operator">=</span> <span class="token class-name">TimeLimiter</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token class-name">Decorators</span><span class="token punctuation">.</span><span class="token function">ofSupplier</span><span class="token punctuation">(</span>supplier<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withThreadPoolBulkhead</span><span class="token punctuation">(</span>threadPoolBulkhead<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withTimeLimiter</span><span class="token punctuation">(</span>timeLimiter<span class="token punctuation">,</span> scheduledExecutorService<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withCircuitBreaker</span><span class="token punctuation">(</span>circuitBreaker<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withFallback</span><span class="token punctuation">(</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token class-name">TimeoutException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> 
                         <span class="token class-name">CallNotPermittedException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> 
                         <span class="token class-name">BulkheadFullException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  
                  throwable <span class="token operator">-&gt;</span> <span class="token string">&quot;Hello from Recovery&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCompletableFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以配置重试之间的等待间隔，还可以配置回退算法。</p><p>当所有重试均失败时，该示例使用Vavr的monad从异常中恢复并调用另一个lambda表达式作为后备。</p><h1 id="模块" tabindex="-1"><a class="header-anchor" href="#模块"><span>模块</span></a></h1><p>核心模块</p><ul><li>resilience4j-circuitbreaker: Circuit breaking</li><li>resilience4j-ratelimiter: Rate limiting</li><li>resilience4j-bulkhead: Bulkheading</li><li>resilience4j-retry: Automatic retrying (sync and async)</li><li>resilience4j-cache: Result caching</li><li>resilience4j-timelimiter: Timeout handling</li></ul><p>扩展模块</p><ul><li>resilience4j-retrofit: Retrofit adapter</li><li>resilience4j-feign: Feign adapter</li><li>resilience4j-consumer: Circular Buffer Event consumer</li><li>resilience4j-kotlin: Kotlin coroutines support</li></ul><p>框架模块</p><ul><li>resilience4j-spring-boot: Spring Boot Starter</li><li>resilience4j-spring-boot2: Spring Boot 2 Starter</li><li>resilience4j-ratpack: Ratpack Starter</li><li>resilience4j-vertx: Vertx Future decorator</li></ul><p>Reactive 模块</p><ul><li>resilience4j-rxjava2: Custom RxJava2 operators</li><li>resilience4j-reactor: Custom Spring Reactor operators</li></ul><p>Metrics modules</p><ul><li>resilience4j-micrometer: Micrometer Metrics exporter</li><li>resilience4j-metrics: Dropwizard Metrics exporter</li><li>resilience4j-prometheus: Prometheus Metrics exporter</li></ul><h1 id="circuitbreaker" tabindex="-1"><a class="header-anchor" href="#circuitbreaker"><span>CircuitBreaker</span></a></h1><p>断路器又三个正常状态：CLOSE，OPEN和HALF_OPEN ,两个特殊状态 DISABLED和FORCED_OPEN.</p><figure><img src="`+e+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>断路器使用滑动窗口来存储和汇总调用结果，这个窗口可以基于计数或时间。基于计数的滑动窗口汇总了最近N个调用的结果。 基于时间的滑动窗口汇总了最近N秒的调用结果。</p><ul><li>基于计数的滑动窗口由N个测量值的圆形数组实现。如果计数窗口大小为10，则圆形阵列始终具有10个测量值。滑动窗口以增量方式更新汇总结果。 当记录新的call结果时，将更新总汇总。 收回最旧的度量后，将从总聚合中减去该度量，然后重置存储桶。 （逐项扣除）</li><li>基于时间的滑动窗口是由N个部分汇总结果（存储桶）的圆形数组实现的。如果时间窗口大小为10秒，则圆形数组将始终具有10个部分汇总结果（存储桶）。 每个存储段都会汇总在某个纪元秒内发生的所有调用的结果。 圆形数组的头存储区存储当前纪元的call结果。 其他部分聚合存储前几秒的call结果。滑动窗口不会单独存储call结果（元组），而是以增量方式更新部分聚合（存储桶）和总聚合。当记录新的call结果时，总聚合将增量更新。 当最旧的存储桶被收回时，该存储桶的部分总聚合将从总聚合中减去，然后重置该存储桶（逐项扣除）。 <code>部分聚合</code> 由3个整数组成，以计算失败的call数，慢速call数和总call数。 一个长存储所有call的总持续时间。</li></ul><h2 id="故障率和慢速调用率阈值" tabindex="-1"><a class="header-anchor" href="#故障率和慢速调用率阈值"><span>故障率和慢速调用率阈值</span></a></h2><p>当故障率等于或大于配置的阈值时，CircuitBreaker的状态将从“CLOSE”更改为“OPEN”。 例如，当超过50％的call失败时。默认情况下，所有异常均视为失败。 您可以定义应视为失败的异常列表。 除非忽略所有其他异常，否则所有其他异常均被视为成功。 也可以忽略异常，以使它们既不算作失败也不算成功。</p><p>当慢速呼叫的百分比等于或大于配置的阈值时，CircuitBreaker也会从CLOSED变为OPEN。 例如，当超过50％的call时间超过5秒。 这有助于减轻被调用系统的负担。</p><p>如果记录的call数量达到指定的要求，才会计算故障率和慢速呼叫率。 例如，如果所需call的最小数量为10，则必须至少记录10个call，然后才能计算出故障率。 如果仅评估了9个call，则即使所有9个call均失败，CircuitBreaker也不会跳闸。</p><p>当断路器打开时，返回CallNotPermittedException 异常。 经过一段等待时间后，CircuitBreaker状态从OPEN变为HALF_OPEN，并允许可配置数量的call以查看后端是否可用， 除非所有允许的call都已完成，否则将通过CallNotPermittedException拒绝进一步的call。</p><p>断路器支持另外两个特殊状态，即DISABLED（始终允许访问）和FORCED_OPEN（始终拒绝访问）。 在这两种状态下，不会生成任何断路器事件（状态转换除外），也不会记录任何度量。 退出这些状态的唯一方法是触发状态转换或重置断路器。</p><p>CircuitBreaker是线程安全的，如下所示：</p><ul><li>CircuitBreaker的状态存储在AtomicReference中</li><li>CircuitBreaker使用原子操作来更新状态。</li><li>从“滑动窗口”记录call和读取快照是同步操作</li></ul><p>如果有20个并发线程请求执行函数的许可，并且CircuitBreaker的状态关闭，则允许所有线程调用该功能。 即使滑动窗口的大小为15。滑动窗口也不意味着仅允许15个调用并发运行。 如果要限制并发线程的数量，请使用Bulkhead。 您可以组合使用Bulkhead和CircuitBreaker。</p><p><strong>单个线程的示意图</strong></p><figure><img src="'+p+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>三个线程的示意图</strong></p><figure><img src="'+c+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="如何使用" tabindex="-1"><a class="header-anchor" href="#如何使用"><span>如何使用</span></a></h2><p>基于ConcurrentHashMap的CircuitBreakerRegistry，可提供线程安全性和原子性保证。 您可以使用CircuitBreakerRegistry来管理（创建和检索）CircuitBreaker实例。 您可以为所有CircuitBreaker实例创建一个具有全局默认CircuitBreakerConfig的CircuitBreakerRegistry，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CircuitBreakerRegistry</span> circuitBreakerRegistry <span class="token operator">=</span> <span class="token class-name">CircuitBreakerRegistry</span><span class="token punctuation">.</span><span class="token function">ofDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="断路器配置" tabindex="-1"><a class="header-anchor" href="#断路器配置"><span>断路器配置</span></a></h3><p>您可以提供自定义的全局CircuitBreakerConfig。 为了创建定制的全局CircuitBreakerConfig，可以使用CircuitBreakerConfig构建器。 您可以使用构建器来配置以下属性。</p><table><thead><tr><th>配置的属性</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>failureRateThreshold</td><td>50</td><td>以百分比配置故障率阈值。当故障率等于或大于阈值时，CircuitBreaker转换为打开状态。</td></tr><tr><td>slowCallRateThreshold</td><td>100</td><td>当call持续时间slowCallDurationThreshold时，CircuitBreaker会将call视为慢速call 当慢速call的百分比等于或大于阈值时，CircuitBreaker转换为打开状态</td></tr><tr><td>slowCallDurationThreshold</td><td>60000 [ms]</td><td>当call的调用时间超过改值时，认为时慢速的</td></tr><tr><td>permittedNumberOfCalls InHalfOpenState</td><td>10</td><td>配置CircuitBreaker半打开时允许的call数。</td></tr><tr><td>maxWaitDurationInHalfOpenState</td><td>0</td><td>该时间用于控制CircuitBreaker在切换到打开之前可以保持在Half Open状态的最长时间。值0表示断路器将在HalfOpen状态下无限期等待，直到所有允许的call完成。</td></tr><tr><td>slidingWindowType</td><td>COUNT_BASED</td><td>配置滑动窗口的类型，如果是 COUNT_BASED, 最后的 slidingWindowSize个call被记录和汇总；如果是 TIME_BASED, 最后slidingWindowSize秒数内的请求被记录和汇总</td></tr><tr><td>slidingWindowSize</td><td>100</td><td>配置滑动窗口的大小，该窗口用于在CircuitBreaker关闭时记录call结果。</td></tr><tr><td>minimumNumberOfCalls</td><td>100</td><td>配置CircuitBreaker可以计算错误率或慢速呼叫率之前所需的最小呼叫数（每个滑动窗口时段）。例如，如果minimumNumberOfCalls为10，则必须至少记录10个呼叫，然后才能计算失败率。如果仅记录了9个呼叫，则即使所有9个呼叫均失败，CircuitBreaker也不会转换为打开。</td></tr><tr><td>waitDurationInOpenState</td><td>60000 [ms]</td><td>从断开到半开之前CircuitBreaker应该等待的时间。</td></tr><tr><td>automaticTransition FromOpenToHalfOpenEnabled</td><td>false</td><td>如果设置为true，则意味着CircuitBreaker将自动从打开状态转换为半打开状态，不需要调用即可触发该转换。 一旦waitDurationInOpenState通过，就会创建一个线程来监视CircuitBreakers的所有实例，以将其转换为HALF_OPEN。 而如果将其设置为false，则即使在传递了waitDurationInOpenState之后，也只有在进行调用时才发生向HALF_OPEN的转换。 这里的优点是没有线程监视所有CircuitBreakers的状态。</td></tr><tr><td>recordExceptions</td><td>empty</td><td>记录为故障的异常列表。 除非通过ignoreExceptions表明确忽略，否则任何与列表之一匹配或继承的异常都将视为失败。 如果指定ignoreExceptions例外列表，则所有其他例外都将视为成功，除非它们被显式忽略</td></tr><tr><td>ignoreExceptions</td><td>empty</td><td>忽略的异常列表，既不算作失败也不算成功。 从列表之一匹配或继承的任何异常都不会被视为失败或成功，即使该异常是recordExceptions其中的一部分</td></tr><tr><td>recordException</td><td>throwable -&gt; true 所有异常</td><td>一个自定义谓词，用于评估是否应将异常记录为失败。 如果异常应计为失败，则谓词必须返回true。 除非成功将ignoreExceptions异常显式忽略，否则应该算是成功</td></tr><tr><td>ignoreException</td><td>throwable -&gt; false 没有yi</td><td>一个自定义谓词，用于评估是否应忽略异常，并且该异常既不算作失败也不算成功。 如果应忽略异常，则谓词必须返回true。 如果异常应计为失败，则谓词必须返回false。</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 自定义CircuitBreaker的配置</span>
<span class="token class-name">CircuitBreakerConfig</span> circuitBreakerConfig <span class="token operator">=</span> <span class="token class-name">CircuitBreakerConfig</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">failureRateThreshold</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">slowCallRateThreshold</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">waitDurationInOpenState</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">slowCallDurationThreshold</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">permittedNumberOfCallsInHalfOpenState</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">minimumNumberOfCalls</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">slidingWindowType</span><span class="token punctuation">(</span><span class="token class-name">SlidingWindowType</span><span class="token punctuation">.</span><span class="token constant">TIME_BASED</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">slidingWindowSize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">recordException</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token constant">INTERNAL_SERVER_ERROR</span>
                 <span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">recordExceptions</span><span class="token punctuation">(</span><span class="token class-name">IOException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">ignoreExceptions</span><span class="token punctuation">(</span><span class="token class-name">BusinessException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">OtherBusinessException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用自定义配置创建CircuitBreakerRegistry</span>
<span class="token class-name">CircuitBreakerRegistry</span> circuitBreakerRegistry <span class="token operator">=</span> 
  <span class="token class-name">CircuitBreakerRegistry</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>circuitBreakerConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建默认的断路器</span>
<span class="token class-name">CircuitBreaker</span> circuitBreakerWithDefaultConfig <span class="token operator">=</span> 
  circuitBreakerRegistry<span class="token punctuation">.</span><span class="token function">circuitBreaker</span><span class="token punctuation">(</span><span class="token string">&quot;name1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 自定义断路器</span>
<span class="token class-name">CircuitBreaker</span> circuitBreakerWithCustomConfig <span class="token operator">=</span> circuitBreakerRegistry
  <span class="token punctuation">.</span><span class="token function">circuitBreaker</span><span class="token punctuation">(</span><span class="token string">&quot;name2&quot;</span><span class="token punctuation">,</span> circuitBreakerConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建由多个实例共享的配置:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CircuitBreakerConfig</span> circuitBreakerConfig <span class="token operator">=</span> <span class="token class-name">CircuitBreakerConfig</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">failureRateThreshold</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

circuitBreakerRegistry<span class="token punctuation">.</span><span class="token function">addConfiguration</span><span class="token punctuation">(</span><span class="token string">&quot;someSharedConfig&quot;</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">CircuitBreaker</span> circuitBreaker <span class="token operator">=</span> circuitBreakerRegistry
  <span class="token punctuation">.</span><span class="token function">circuitBreaker</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;someSharedConfig&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>覆盖默认配置:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CircuitBreakerConfig</span> defaultConfig <span class="token operator">=</span> circuitBreakerRegistry
   <span class="token punctuation">.</span><span class="token function">getDefaultConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">CircuitBreakerConfig</span> overwrittenConfig <span class="token operator">=</span> <span class="token class-name">CircuitBreakerConfig</span>
  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>defaultConfig<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">waitDurationInOpenState</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您不想使用CircuitBreakerRegistry管理CircuitBreaker实例，也可以直接创建实例:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Create a custom configuration for a CircuitBreaker</span>
<span class="token class-name">CircuitBreakerConfig</span> circuitBreakerConfig <span class="token operator">=</span> <span class="token class-name">CircuitBreakerConfig</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">recordExceptions</span><span class="token punctuation">(</span><span class="token class-name">IOException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">ignoreExceptions</span><span class="token punctuation">(</span><span class="token class-name">BusinessException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">OtherBusinessException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">CircuitBreaker</span> customCircuitBreaker <span class="token operator">=</span> <span class="token class-name">CircuitBreaker</span>
  <span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;testName&quot;</span><span class="token punctuation">,</span> circuitBreakerConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您还可以使用其生成器方法创建CircuitBreakerRegistry：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> circuitBreakerTags <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;key2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">CircuitBreakerRegistry</span> circuitBreakerRegistry <span class="token operator">=</span> <span class="token class-name">CircuitBreakerRegistry</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withCircuitBreakerConfig</span><span class="token punctuation">(</span><span class="token class-name">CircuitBreakerConfig</span><span class="token punctuation">.</span><span class="token function">ofDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">addRegistryEventConsumer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegistryEventConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEntryAddedEvent</span><span class="token punctuation">(</span><span class="token class-name">EntryAddedEvent</span> entryAddedEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// implementation</span>
        <span class="token punctuation">}</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEntryRemovedEvent</span><span class="token punctuation">(</span><span class="token class-name">EntryRemovedEvent</span> entryRemoveEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// implementation</span>
        <span class="token punctuation">}</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEntryReplacedEvent</span><span class="token punctuation">(</span><span class="token class-name">EntryReplacedEvent</span> entryReplacedEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// implementation</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withTags</span><span class="token punctuation">(</span>circuitBreakerTags<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">CircuitBreaker</span> circuitBreaker <span class="token operator">=</span> circuitBreakerRegistry<span class="token punctuation">.</span><span class="token function">circuitBreaker</span><span class="token punctuation">(</span><span class="token string">&quot;testName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要插入自己的Registry实现，则可以提供Interface RegistryStore的自定义实现，并使用builder方法插入:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CircuitBreakerRegistry</span> registry <span class="token operator">=</span> <span class="token class-name">CircuitBreakerRegistry</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withRegistryStore</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">YourRegistryStoreImplementation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withCircuitBreakerConfig</span><span class="token punctuation">(</span><span class="token class-name">CircuitBreakerConfig</span><span class="token punctuation">.</span><span class="token function">ofDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用断路器装扮函数并调用" tabindex="-1"><a class="header-anchor" href="#使用断路器装扮函数并调用"><span>使用断路器装扮函数并调用</span></a></h3><p>您可以使用CircuitBreaker装饰任何Callable，Supplier，Runnable，Consumer，CheckedRunnable，CheckedSupplier，CheckedConsumer或CompletionStage。</p><p>您可以使用Vavr中的Try.of（...）或Try.run（...）来调用修饰的函数。 这允许使用map，flatMap，filter，recover或andThen链接其他功能。 仅当CircuitBreaker为CLOSED或HALF_OPEN时，才调用链接函数。</p><p>在下面的示例中，如果函数调用成功，则Try.of（...）返回<code>Success &lt;String&gt; Monad</code>。 如果函数引发异常，则返回<code>Failure &lt;Throwable&gt; Monad</code>，并且不调用map。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Given</span>
<span class="token class-name">CircuitBreaker</span> circuitBreaker <span class="token operator">=</span> <span class="token class-name">CircuitBreaker</span><span class="token punctuation">.</span><span class="token function">ofDefaults</span><span class="token punctuation">(</span><span class="token string">&quot;testName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// When I decorate my function</span>
<span class="token class-name">CheckedFunction0</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> decoratedSupplier <span class="token operator">=</span> <span class="token class-name">CircuitBreaker</span>
        <span class="token punctuation">.</span><span class="token function">decorateCheckedSupplier</span><span class="token punctuation">(</span>circuitBreaker<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;This can be any method which returns: &#39;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// and chain an other function with map</span>
<span class="token class-name">Try</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token class-name">Try</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>decoratedSupplier<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>value <span class="token operator">-&gt;</span> value <span class="token operator">+</span> <span class="token string">&quot; world&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Then the Try Monad returns a Success&lt;String&gt;, if all functions ran successfully.</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;This can be any method which returns: &#39;Hello world&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以在CircuitBreakerRegistry上注册事件使用者，并在每次创建，替换或删除CircuitBreaker时采取措施。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CircuitBreakerRegistry</span> circuitBreakerRegistry <span class="token operator">=</span> <span class="token class-name">CircuitBreakerRegistry</span><span class="token punctuation">.</span><span class="token function">ofDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
circuitBreakerRegistry<span class="token punctuation">.</span><span class="token function">getEventPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">onEntryAdded</span><span class="token punctuation">(</span>entryAddedEvent <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">CircuitBreaker</span> addedCircuitBreaker <span class="token operator">=</span> entryAddedEvent<span class="token punctuation">.</span><span class="token function">getAddedEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;CircuitBreaker {} added&quot;</span><span class="token punctuation">,</span> addedCircuitBreaker<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">onEntryRemoved</span><span class="token punctuation">(</span>entryRemovedEvent <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">CircuitBreaker</span> removedCircuitBreaker <span class="token operator">=</span> entryRemovedEvent<span class="token punctuation">.</span><span class="token function">getRemovedEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;CircuitBreaker {} removed&quot;</span><span class="token punctuation">,</span> removedCircuitBreaker<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CircuitBreakerEvent可以是状态转换，断路器重置，成功调用，记录的错误或忽略的错误。 所有事件都包含其他信息，例如事件创建时间和呼叫的处理持续时间。 如果要使用事件，则必须注册事件使用者。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>circuitBreaker<span class="token punctuation">.</span><span class="token function">getEventPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">onSuccess</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">onIgnoredError</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">onReset</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">onStateTransition</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Or if you want to register a consumer listening</span>
<span class="token comment">// to all events, you can do:</span>
circuitBreaker<span class="token punctuation">.</span><span class="token function">getEventPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">onEvent</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以使用CircularEventConsumer将事件存储在具有固定容量的循环缓冲区中。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CircularEventConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CircuitBreakerEvent</span><span class="token punctuation">&gt;</span></span> ringBuffer <span class="token operator">=</span> 
  <span class="token keyword">new</span> <span class="token class-name">CircularEventConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
circuitBreaker<span class="token punctuation">.</span><span class="token function">getEventPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onEvent</span><span class="token punctuation">(</span>ringBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CircuitBreakerEvent</span><span class="token punctuation">&gt;</span></span> bufferedEvents <span class="token operator">=</span> ringBuffer<span class="token punctuation">.</span><span class="token function">getBufferedEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以使用RxJava或RxJava2适配器将EventPublisher转换为响应流。</p><p>您可以通过自定义实现覆盖内存RegistryStore。 例如，如果要使用在一定时间后删除未使用实例的缓存。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CircuitBreakerRegistry</span> circuitBreakerRegistry <span class="token operator">=</span> <span class="token class-name">CircuitBreakerRegistry</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">withRegistryStore</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CacheCircuitBreakerRegistryStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您想在CircuitBreaker将异常记录为失败之后从异常中恢复，则可以链接<code>Try.recover</code>方法。 仅当<code>Try.of</code>返回Failure <code>&lt;Throwable&gt; Monad</code>时，才调用恢复方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Given</span>
<span class="token class-name">CircuitBreaker</span> circuitBreaker <span class="token operator">=</span> <span class="token class-name">CircuitBreaker</span><span class="token punctuation">.</span><span class="token function">ofDefaults</span><span class="token punctuation">(</span><span class="token string">&quot;testName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// When I decorate my function and invoke the decorated function</span>
<span class="token class-name">CheckedFunction0</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> checkedSupplier <span class="token operator">=</span>
  <span class="token class-name">CircuitBreaker</span><span class="token punctuation">.</span><span class="token function">decorateCheckedSupplier</span><span class="token punctuation">(</span>circuitBreaker<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;BAM!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Try</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token class-name">Try</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>checkedSupplier<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">recover</span><span class="token punctuation">(</span>throwable <span class="token operator">-&gt;</span> <span class="token string">&quot;Hello Recovery&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Then the function should be a success, </span>
<span class="token comment">// because the exception could be recovered</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// and the result must match the result of the recovery function.</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Recovery&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要在CircuitBreaker将异常记录为失败之前从异常中恢复，可以执行以下操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> supplier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;BAM!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> supplierWithRecovery <span class="token operator">=</span> <span class="token class-name">SupplierUtils</span>
  <span class="token punctuation">.</span><span class="token function">recover</span><span class="token punctuation">(</span>supplier<span class="token punctuation">,</span> <span class="token punctuation">(</span>exception<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;Hello Recovery&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> result <span class="token operator">=</span> circuitBreaker<span class="token punctuation">.</span><span class="token function">executeSupplier</span><span class="token punctuation">(</span>supplierWithRecovery<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">assertThat</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Recovery&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SupplierUtils和CallableUtils包含其他方法，例如andThen，可以采用这些方法来链接函数。 例如，检查HTTP响应的状态代码，以便可以引发异常。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> supplierWithResultAndExceptionHandler <span class="token operator">=</span> <span class="token class-name">SupplierUtils</span>
  <span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>supplier<span class="token punctuation">,</span> <span class="token punctuation">(</span>result<span class="token punctuation">,</span> exception<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;Hello Recovery&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpResponse</span><span class="token punctuation">&gt;</span></span> supplier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> httpClient<span class="token punctuation">.</span><span class="token function">doRemoteCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpResponse</span><span class="token punctuation">&gt;</span></span> supplierWithResultHandling <span class="token operator">=</span> <span class="token class-name">SupplierUtils</span><span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>supplier<span class="token punctuation">,</span> result <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClientException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">HttpResponse</span> httpResponse <span class="token operator">=</span> circuitBreaker
  <span class="token punctuation">.</span><span class="token function">executeSupplier</span><span class="token punctuation">(</span>supplierWithResultHandling<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>断路器支持重置为原始状态，丢失所有指标并有效重置其滑动窗口。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CircuitBreaker</span> circuitBreaker <span class="token operator">=</span> <span class="token class-name">CircuitBreaker</span><span class="token punctuation">.</span><span class="token function">ofDefaults</span><span class="token punctuation">(</span><span class="token string">&quot;testName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
circuitBreaker<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>手动转换为状态:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CircuitBreaker</span> circuitBreaker <span class="token operator">=</span> <span class="token class-name">CircuitBreaker</span><span class="token punctuation">.</span><span class="token function">ofDefaults</span><span class="token punctuation">(</span><span class="token string">&quot;testName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
circuitBreaker<span class="token punctuation">.</span><span class="token function">transitionToDisabledState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// circuitBreaker.onFailure(...) won&#39;t trigger a state change</span>
circuitBreaker<span class="token punctuation">.</span><span class="token function">transitionToClosedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// will transition to CLOSED state and re-enable normal behaviour, keeping metrics</span>
circuitBreaker<span class="token punctuation">.</span><span class="token function">transitionToForcedOpenState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// circuitBreaker.onSuccess(...) won&#39;t trigger a state change</span>
circuitBreaker<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  will transition to CLOSED state and re-enable normal behaviour, losing metrics</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="bulkhead" tabindex="-1"><a class="header-anchor" href="#bulkhead"><span>Bulkhead</span></a></h1><p>Resilience4j 提供了两种方式实现舱壁模式来隔离线程的执行：</p><ul><li>SemaphoreBulkhead使用信号量</li><li>FixedThreadPoolBulkhead 使用有界队列和固定大小的线程池</li></ul><p>SemaphoreBulkhead在各种线程和I/O模型上都能很好地工作。 它基于信号量，与Hystrix不同，它不提供“影子”线程池选项。 由客户端来确保正确的线程池大小（与配置一致）。</p><p>跟CircuitBreaker 模块一样，Bulkhead也提供了基于内存的BulkheadRegistry 和ThreadPoolBulkheadRegistry ，你可以使用他们来管理（创建和检索）Bulkhead 实例。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">BulkheadRegistry</span> bulkheadRegistry <span class="token operator">=</span> <span class="token class-name">BulkheadRegistry</span><span class="token punctuation">.</span><span class="token function">ofDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">ThreadPoolBulkheadRegistry</span> threadPoolBulkheadRegistry <span class="token operator">=</span> 
  <span class="token class-name">ThreadPoolBulkheadRegistry</span><span class="token punctuation">.</span><span class="token function">ofDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以自定义全局配置，使用BulkheadConfig 构建，相关的可配置属性如下：</p><table><thead><tr><th>属性</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>maxConcurrentCalls</td><td>25</td><td>最大的并行执行数</td></tr><tr><td>maxWaitDuration</td><td>0</td><td>尝试进入饱和舱壁时，应阻塞线程的最长时间。</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Create a custom configuration for a Bulkhead</span>
<span class="token class-name">BulkheadConfig</span> config <span class="token operator">=</span> <span class="token class-name">BulkheadConfig</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">maxConcurrentCalls</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">maxWaitDuration</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Create a BulkheadRegistry with a custom global configuration</span>
<span class="token class-name">BulkheadRegistry</span> registry <span class="token operator">=</span> <span class="token class-name">BulkheadRegistry</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Get or create a Bulkhead from the registry - </span>
<span class="token comment">// bulkhead will be backed by the default config</span>
<span class="token class-name">Bulkhead</span> bulkheadWithDefaultConfig <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">bulkhead</span><span class="token punctuation">(</span><span class="token string">&quot;name1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Get or create a Bulkhead from the registry, </span>
<span class="token comment">// use a custom configuration when creating the bulkhead</span>
<span class="token class-name">Bulkhead</span> bulkheadWithCustomConfig <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">bulkhead</span><span class="token punctuation">(</span><span class="token string">&quot;name2&quot;</span><span class="token punctuation">,</span> custom<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ThreadPoolBulkhead配置的属性有所不同，使用ThreadPoolBulkheadConfig 构建配置项，属性列表如下：</p><table><thead><tr><th>配置属性</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>maxThreadPoolSize</td><td>Runtime.getRuntime() .availableProcessors()</td><td>线程池的最大大小</td></tr><tr><td>coreThreadPoolSize</td><td>Runtime.getRuntime() .availableProcessors() - 1</td><td>线程池的核心大小</td></tr><tr><td>queueCapacity</td><td>100</td><td>等待队列的容量</td></tr><tr><td>keepAliveDuration</td><td>20 [ms]</td><td>当线程数大于内核数时，这是多余的空闲线程最大空闲时间</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ThreadPoolBulkheadConfig</span> config <span class="token operator">=</span> <span class="token class-name">ThreadPoolBulkheadConfig</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">maxThreadPoolSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">coreThreadPoolSize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">queueCapacity</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
<span class="token comment">// Create a BulkheadRegistry with a custom global configuration</span>
<span class="token class-name">ThreadPoolBulkheadRegistry</span> registry <span class="token operator">=</span> <span class="token class-name">ThreadPoolBulkheadRegistry</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Get or create a ThreadPoolBulkhead from the registry - </span>
<span class="token comment">// bulkhead will be backed by the default config</span>
<span class="token class-name">ThreadPoolBulkhead</span> bulkheadWithDefaultConfig <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">bulkhead</span><span class="token punctuation">(</span><span class="token string">&quot;name1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Get or create a Bulkhead from the registry, </span>
<span class="token comment">// use a custom configuration when creating the bulkhead</span>
<span class="token class-name">ThreadPoolBulkheadConfig</span> custom <span class="token operator">=</span> <span class="token class-name">BulkheadConfig</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">maxThreadPoolSize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">ThreadPoolBulkhead</span> bulkheadWithCustomConfig <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">bulkhead</span><span class="token punctuation">(</span><span class="token string">&quot;name2&quot;</span><span class="token punctuation">,</span> custom<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以猜到，Bulkhead具有各种类似于CircuitBreaker的高阶装饰器功能。 您可以用隔板装饰任何Callable，Supplier，Runnable，Consumer，CheckedRunnable，CheckedSupplier，CheckedConsumer或CompletionStage。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Given</span>
<span class="token class-name">Bulkhead</span> bulkhead <span class="token operator">=</span> <span class="token class-name">Bulkhead</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// When I decorate my function</span>
<span class="token class-name">CheckedFunction0</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> decoratedSupplier <span class="token operator">=</span> <span class="token class-name">Bulkhead</span>
  <span class="token punctuation">.</span><span class="token function">decorateCheckedSupplier</span><span class="token punctuation">(</span>bulkhead<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;This can be any method which returns: &#39;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// and chain an other function with map</span>
<span class="token class-name">Try</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token class-name">Try</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>decoratedSupplier<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>value <span class="token operator">-&gt;</span> value <span class="token operator">+</span> <span class="token string">&quot; world&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Then the Try Monad returns a Success&lt;String&gt;, if all functions ran successfully.</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;This can be any method which returns: &#39;Hello world&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span>bulkhead<span class="token punctuation">.</span><span class="token function">getMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAvailableConcurrentCalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ThreadPoolBulkheadConfig</span> config <span class="token operator">=</span> <span class="token class-name">ThreadPoolBulkheadConfig</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">maxThreadPoolSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">coreThreadPoolSize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">queueCapacity</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">ThreadPoolBulkhead</span> bulkhead <span class="token operator">=</span> <span class="token class-name">ThreadPoolBulkhead</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> supplier <span class="token operator">=</span> <span class="token class-name">ThreadPoolBulkhead</span>
    <span class="token punctuation">.</span><span class="token function">executeSupplier</span><span class="token punctuation">(</span>bulkhead<span class="token punctuation">,</span> backendService<span class="token operator">::</span><span class="token function">doSomething</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以在BulkheadRegistry上注册事件使用者，并在创建，替换或删除Bulkhead时执行操作。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">BulkheadRegistry</span> registry <span class="token operator">=</span> <span class="token class-name">BulkheadRegistry</span><span class="token punctuation">.</span><span class="token function">ofDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
registry<span class="token punctuation">.</span><span class="token function">getEventPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">onEntryAdded</span><span class="token punctuation">(</span>entryAddedEvent <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">Bulkhead</span> addedBulkhead <span class="token operator">=</span> entryAddedEvent<span class="token punctuation">.</span><span class="token function">getAddedEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Bulkhead {} added&quot;</span><span class="token punctuation">,</span> addedBulkhead<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">onEntryRemoved</span><span class="token punctuation">(</span>entryRemovedEvent <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">Bulkhead</span> removedBulkhead <span class="token operator">=</span> entryRemovedEvent<span class="token punctuation">.</span><span class="token function">getRemovedEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Bulkhead {} removed&quot;</span><span class="token punctuation">,</span> removedBulkhead<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>BulkHead发出BulkHeadEvents流。 发出两种类型的事件：允许执行，拒绝执行和完成执行。 如果要使用这些事件，则必须注册一个事件使用者。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>bulkhead<span class="token punctuation">.</span><span class="token function">getEventPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">onCallPermitted</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">onCallRejected</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">onCallFinished</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="timelimiter" tabindex="-1"><a class="header-anchor" href="#timelimiter"><span>TimeLimiter</span></a></h1><p>超时器，跟断路器一样，提供了基于内存的TimeLimiterRegistry ，可以使用该实例管理TimeLimiter</p><p>TimeLimiterRegistry timeLimiterRegistry = TimeLimiterRegistry.ofDefaults();</p><p>使用TimeLimiterConfig自定义超时器的配置，可以配置的内容有两种：</p><p>* 超时时间</p><p>* 是否调用cancle</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token class-name">TimeLimiterConfig</span> config <span class="token operator">=</span> <span class="token class-name">TimeLimiterConfig</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

 <span class="token punctuation">.</span><span class="token function">cancelRunningFuture</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>

 <span class="token punctuation">.</span><span class="token function">timeoutDuration</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

 <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Create a TimeLimiterRegistry with a custom global configuration</span>

<span class="token class-name">TimeLimiterRegistry</span> timeLimiterRegistry <span class="token operator">=</span> <span class="token class-name">TimeLimiterRegistry</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Get or create a TimeLimiter from the registry - </span>

<span class="token comment">// TimeLimiter will be backed by the default config</span>

<span class="token class-name">TimeLimiter</span> timeLimiterWithDefaultConfig <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">timeLimiter</span><span class="token punctuation">(</span><span class="token string">&quot;name1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Get or create a TimeLimiter from the registry, </span>

<span class="token comment">// use a custom configuration when creating the TimeLimiter</span>

<span class="token class-name">TimeLimiterConfig</span> config <span class="token operator">=</span> <span class="token class-name">TimeLimiterConfig</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

 <span class="token punctuation">.</span><span class="token function">cancelRunningFuture</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>

 <span class="token punctuation">.</span><span class="token function">timeoutDuration</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

 <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">TimeLimiter</span> timeLimiterWithCustomConfig <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">timeLimiter</span><span class="token punctuation">(</span><span class="token string">&quot;name2&quot;</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">TimeLimiter</span>具有较高阶的装饰器函数来装饰<span class="token class-name">CompletionStage</span>或<span class="token class-name">Future</span>，以限制执行时间。



<span class="token comment">// Given I have a helloWorldService.sayHelloWorld() method which takes too long</span>

<span class="token class-name">HelloWorldService</span> helloWorldService <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">HelloWorldService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Create a TimeLimiter</span>

<span class="token class-name">TimeLimiter</span> timeLimiter <span class="token operator">=</span> <span class="token class-name">TimeLimiter</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// The Scheduler is needed to schedule a timeout on a non-blocking CompletableFuture</span>

<span class="token class-name">ScheduledExecutorService</span> scheduler <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// The non-blocking variant with a CompletableFuture</span>

<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> timeLimiter<span class="token punctuation">.</span><span class="token function">executeCompletionStage</span><span class="token punctuation">(</span>

 scheduler<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span>helloWorldService<span class="token operator">::</span><span class="token function">sayHelloWorld</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCompletableFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// The blocking variant which is basically future.get(timeoutDuration, MILLISECONDS)</span>

<span class="token class-name">String</span> result <span class="token operator">=</span> timeLimiter<span class="token punctuation">.</span><span class="token function">executeFutureSupplier</span><span class="token punctuation">(</span>

 <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> helloWorldService<span class="token operator">::</span><span class="token function">sayHelloWorld</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存"><span>缓存</span></a></h1><p>以下示例显示如何使用Cache抽象装饰lambda表达式。 缓存抽象将lambda表达式的结果放入缓存实例（JCache）中，并在调用lambda表达式之前尝试从缓存中检索以前的缓存结果。 如果从分布式缓存中检索缓存失败，则会处理该异常并调用lambda表达式。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Create a CacheContext by wrapping a JCache instance.</span>

<span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span>Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cacheInstance <span class="token operator">=</span> <span class="token class-name">Caching</span>

  <span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token string">&quot;cacheName&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cacheContext <span class="token operator">=</span> <span class="token class-name">Cache</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>cacheInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Decorate your call to BackendService.doSomething()</span>

<span class="token class-name">CheckedFunction1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cachedFunction <span class="token operator">=</span> <span class="token class-name">Decorators</span>

   <span class="token punctuation">.</span><span class="token function">ofCheckedSupplier</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> backendService<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

   <span class="token punctuation">.</span><span class="token function">withCache</span><span class="token punctuation">(</span>cacheContext<span class="token punctuation">)</span>

   <span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token class-name">Try</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> cachedFunction<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">&quot;cacheKey&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>缓存发出CacheEvents流。 事件可以是高速缓存命中，高速缓存未命中或错误。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>cacheContext<span class="token punctuation">.</span><span class="token function">getEventPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

   <span class="token punctuation">.</span><span class="token function">onCacheHit</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

   <span class="token punctuation">.</span><span class="token function">onCacheMiss</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

   <span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Ehcache</span> 使用实例：

compile &#39;org<span class="token punctuation">.</span>ehcache<span class="token operator">:</span>ehcache<span class="token operator">:</span><span class="token number">3.7</span><span class="token number">.1</span>&#39;

 

<span class="token comment">// Configure a cache (once)</span>

<span class="token keyword">this</span><span class="token punctuation">.</span>cacheManager <span class="token operator">=</span> <span class="token class-name">Caching</span><span class="token punctuation">.</span><span class="token function">getCachingProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token class-name">Cache</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>cacheManager

   <span class="token punctuation">.</span><span class="token function">createCache</span><span class="token punctuation">(</span><span class="token string">&quot;booksCache&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MutableConfiguration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Get books using a cache</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> books <span class="token operator">=</span> <span class="token class-name">Cache</span><span class="token punctuation">.</span><span class="token function">decorateSupplier</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> library<span class="token operator">::</span><span class="token function">getBooks</span><span class="token punctuation">)</span>

   <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token constant">BOOKS_CACHE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不建议在生产环境中使用JCache参考实现，因为它会导致一些并发问题。 使用Ehcache，Caffeine，Redisson，Hazelcast，Ignite或其他JCache实现。</p><h1 id="重试" tabindex="-1"><a class="header-anchor" href="#重试"><span>重试</span></a></h1><p>像断路器一样，提供了基于内存的RetryRegistry ：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RetryRegistry</span> retryRegistry <span class="token operator">=</span> <span class="token class-name">RetryRegistry</span><span class="token punctuation">.</span><span class="token function">ofDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>属性</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>maxAttempts</td><td>3</td><td>最大尝试次数（首次调用也被算作一次）</td></tr><tr><td>waitDuration</td><td>500 [ms]</td><td>重试之间的固定等待时间</td></tr><tr><td>intervalFunction</td><td>numOfAttempts -&gt; waitDuration</td><td>发生故障后修改等待间隔的功能。 默认情况下，等待时间保持不变。</td></tr><tr><td>intervalBiFunction</td><td><code> (numOfAttempts, Either&lt;throwable, result) -&gt; waitDuration</code></td><td>根据尝试次数和结果或异常修改失败后的等待间隔的功能。 与intervalFunction一起使用时，将抛出IllegalStateException。</td></tr><tr><td>retryOnResultPredicate</td><td>result -&gt; false</td><td>配置一个谓词，该谓词评估是否应重试结果。 如果要重试结果，则谓词必须返回true，否则必须返回false。</td></tr><tr><td>retryOnExceptionPredicate</td><td>throwable -&gt; true</td><td>配置一个谓词，该谓词评估是否应重试异常。 如果应重试异常，则谓词必须返回true，否则必须返回false。</td></tr><tr><td>retryExceptions</td><td>empty</td><td>配置Throwable类的列表，这些类被记录为失败并因此被重试。 此参数支持子类型。 注意：如果使用的是Checked Exception，则必须使用CheckedSupplier</td></tr><tr><td>ignoreExceptions</td><td>empty</td><td>配置被忽略因而不会重试的Throwable类的列表。 此参数支持子类型。</td></tr><tr><td>failAfterMaxRetries</td><td>false</td><td>当重试已达到配置的maxAttempts且结果仍未通过retryOnResultPredicate时，启用或禁用抛出MaxRetriesExceededException的布尔值</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RetryConfig</span> config <span class="token operator">=</span> <span class="token class-name">RetryConfig</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">maxAttempts</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">waitDuration</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">retryOnResult</span><span class="token punctuation">(</span>response <span class="token operator">-&gt;</span> response<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">500</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">retryOnException</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e <span class="token keyword">instanceof</span> <span class="token class-name">WebServiceException</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">retryExceptions</span><span class="token punctuation">(</span><span class="token class-name">IOException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">ignoreExceptions</span><span class="token punctuation">(</span><span class="token class-name">BusinessException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">OtherBusinessException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">failAfterMaxAttempts</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Create a RetryRegistry with a custom global configuration</span>
<span class="token class-name">RetryRegistry</span> registry <span class="token operator">=</span> <span class="token class-name">RetryRegistry</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Get or create a Retry from the registry - </span>
<span class="token comment">// Retry will be backed by the default config</span>
<span class="token class-name">Retry</span> retryWithDefaultConfig <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">retry</span><span class="token punctuation">(</span><span class="token string">&quot;name1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Get or create a Retry from the registry, </span>
<span class="token comment">// use a custom configuration when creating the retry</span>
<span class="token class-name">RetryConfig</span> custom <span class="token operator">=</span> <span class="token class-name">RetryConfig</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">waitDuration</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Retry</span> retryWithCustomConfig <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">retry</span><span class="token punctuation">(</span><span class="token string">&quot;name2&quot;</span><span class="token punctuation">,</span> custom<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以猜到，重试具有各种高级装饰器功能，就像CircuitBreaker一样。 您可以使用重试装饰任何Callable，Supplier，Runnable，Consumer，CheckedRunnable，CheckedSupplier，CheckedConsumer或CompletionStage。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Given I have a HelloWorldService which throws an exception</span>
<span class="token class-name">HelloWorldService</span>  helloWorldService <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">HelloWorldService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">given</span><span class="token punctuation">(</span>helloWorldService<span class="token punctuation">.</span><span class="token function">sayHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">willThrow</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebServiceException</span><span class="token punctuation">(</span><span class="token string">&quot;BAM!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Create a Retry with default configuration</span>
<span class="token class-name">Retry</span> retry <span class="token operator">=</span> <span class="token class-name">Retry</span><span class="token punctuation">.</span><span class="token function">ofDefaults</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Decorate the invocation of the HelloWorldService</span>
<span class="token class-name">CheckedFunction0</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> retryableSupplier <span class="token operator">=</span> <span class="token class-name">Retry</span>
  <span class="token punctuation">.</span><span class="token function">decorateCheckedSupplier</span><span class="token punctuation">(</span>retry<span class="token punctuation">,</span> helloWorldService<span class="token operator">::</span><span class="token function">sayHelloWorld</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// When I invoke the function</span>
<span class="token class-name">Try</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token class-name">Try</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>retryableSupplier<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">(</span>throwable<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;Hello world from recovery function&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Then the helloWorldService should be invoked 3 times</span>
<span class="token class-name">BDDMockito</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>helloWorldService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token function">times</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sayHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// and the exception should be handled by the recovery function</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world from recovery function&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以在RetryRegistry上注册事件使用者，并在创建，替换或删除重试时执行操作。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RetryRegistry</span> registry <span class="token operator">=</span> <span class="token class-name">RetryRegistry</span><span class="token punctuation">.</span><span class="token function">ofDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
registry<span class="token punctuation">.</span><span class="token function">getEventPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">onEntryAdded</span><span class="token punctuation">(</span>entryAddedEvent <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">Retry</span> addedRetry <span class="token operator">=</span> entryAddedEvent<span class="token punctuation">.</span><span class="token function">getAddedEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Retry {} added&quot;</span><span class="token punctuation">,</span> addedRetry<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">onEntryRemoved</span><span class="token punctuation">(</span>entryRemovedEvent <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">Retry</span> removedRetry <span class="token operator">=</span> entryRemovedEvent<span class="token punctuation">.</span><span class="token function">getRemovedEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Retry {} removed&quot;</span><span class="token punctuation">,</span> removedRetry<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不想在重试尝试之间使用固定的等待时间，则可以配置一个IntervalFunction，该函数用于计算每次尝试的等待时间。 Resilience4j提供了几种工厂方法来简化IntervalFunction的创建。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">IntervalFunction</span> defaultWaitInterval <span class="token operator">=</span> <span class="token class-name">IntervalFunction</span>
  <span class="token punctuation">.</span><span class="token function">ofDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// This interval function is used internally </span>
<span class="token comment">// when you only configure waitDuration</span>
<span class="token class-name">IntervalFunction</span> fixedWaitInterval <span class="token operator">=</span> <span class="token class-name">IntervalFunction</span>
  <span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">IntervalFunction</span> intervalWithExponentialBackoff <span class="token operator">=</span> <span class="token class-name">IntervalFunction</span>
  <span class="token punctuation">.</span><span class="token function">ofExponentialBackoff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">IntervalFunction</span> intervalWithCustomExponentialBackoff <span class="token operator">=</span> <span class="token class-name">IntervalFunction</span>
  <span class="token punctuation">.</span><span class="token function">ofExponentialBackoff</span><span class="token punctuation">(</span><span class="token class-name">IntervalFunction</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_INITIAL_INTERVAL</span><span class="token punctuation">,</span> <span class="token number">2d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">IntervalFunction</span> randomWaitInterval <span class="token operator">=</span> <span class="token class-name">IntervalFunction</span>
  <span class="token punctuation">.</span><span class="token function">ofRandomized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Overwrite the default intervalFunction with your custom one</span>
<span class="token class-name">RetryConfig</span> retryConfig <span class="token operator">=</span> <span class="token class-name">RetryConfig</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">intervalFunction</span><span class="token punctuation">(</span>intervalWithExponentialBackoff<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="ratelimiter" tabindex="-1"><a class="header-anchor" href="#ratelimiter"><span>RateLimiter</span></a></h1><p>速率限制是一项必不可少的技术，它可以为扩展您的API做好准备并建立服务的高可用性和可靠性。 而且，此技术还提供了很多不同的选择，例如如何处理检测到的限制超额，或您要限制哪种类型的请求。 您可以简单地拒绝此超限请求，或建立队列以稍后执行它们，或以某种方式组合这两种方法。</p><p>Resilience4j提供了一个RateLimiter，它将从纪元开始将所有纳秒级分为多个周期。 每个周期都有一个由RateLimiterConfig.limitRefreshPeriod配置的持续时间。 在每个周期的开始，RateLimiter会将活动许可的数量设置为RateLimiterConfig.limitForPeriod。</p><p>RateLimiter的默认实现是AtomicRateLimiter，它通过AtomicReference管理其状态。 AtomicRateLimiter.State是完全不可变的，并且具有以下字段：</p><p>* activeCycle : 上次调用使用的cycle号</p><p>* activePermissions :上次call后的可用权限计数。如果保留某些权限，则可以为负</p><p>* nanosToWait :等待上一次call的等待时间（以纳秒为单位）</p><p>还有一个使用信号量的SemaphoreBasedRateLimiter和一个计划程序，该计划程序将在每个RateLimiterConfig＃limitRefreshPeriod之后刷新权限。</p><p>创建默认的速率器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RateLimiterRegistry</span> rateLimiterRegistry <span class="token operator">=</span> <span class="token class-name">RateLimiterRegistry</span><span class="token punctuation">.</span><span class="token function">ofDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>RateLimiterConfig配置速率器：</p><table><thead><tr><th>属性</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>timeoutDuration</td><td>5 [s]</td><td>线程等待权限的默认等待时间</td></tr><tr><td>limitRefreshPeriod</td><td>500 [ns]</td><td>限制刷新的时间段。 在每个时间段之后，速率限制器将其权限计数重新设置为limitForPeriod值</td></tr><tr><td>limitForPeriod</td><td>50</td><td>一个限制刷新期间可用的权限数</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RateLimiterConfig</span> config <span class="token operator">=</span> <span class="token class-name">RateLimiterConfig</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">limitRefreshPeriod</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">limitForPeriod</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">timeoutDuration</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Create registry</span>
<span class="token class-name">RateLimiterRegistry</span> rateLimiterRegistry <span class="token operator">=</span> <span class="token class-name">RateLimiterRegistry</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Use registry</span>
<span class="token class-name">RateLimiter</span> rateLimiterWithDefaultConfig <span class="token operator">=</span> rateLimiterRegistry
  <span class="token punctuation">.</span><span class="token function">rateLimiter</span><span class="token punctuation">(</span><span class="token string">&quot;name1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">RateLimiter</span> rateLimiterWithCustomConfig <span class="token operator">=</span> rateLimiterRegistry
  <span class="token punctuation">.</span><span class="token function">rateLimiter</span><span class="token punctuation">(</span><span class="token string">&quot;name2&quot;</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如您所料，RateLimiter具有各种类似于CircuitBreaker的高阶装饰器功能。 您可以使用RateLimiter装饰任何Callable，Supplier，Runnable，Consumer，CheckedRunnable，CheckedSupplier，CheckedConsumer或CompletionStage。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Decorate your call to BackendService.doSomething()</span>
<span class="token class-name">CheckedRunnable</span> restrictedCall <span class="token operator">=</span> <span class="token class-name">RateLimiter</span>
    <span class="token punctuation">.</span><span class="token function">decorateCheckedRunnable</span><span class="token punctuation">(</span>rateLimiter<span class="token punctuation">,</span> backendService<span class="token operator">::</span><span class="token function">doSomething</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Try</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>restrictedCall<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">andThenTry</span><span class="token punctuation">(</span>restrictedCall<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">onFailure</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">RequestNotPermitted</span> throwable<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Wait before call it again :)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以使用changeTimeoutDuration和changeLimitForPeriod方法在运行时更改速率限制器参数。</p><p>新的超时时间不会影响当前正在等待许可的线程。</p><p>新的限制不会影响当前期限的权限，并且仅从下一个限制开始适用。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Decorate your call to BackendService.doSomething()</span>
<span class="token class-name">CheckedRunnable</span> restrictedCall <span class="token operator">=</span> <span class="token class-name">RateLimiter</span>
    <span class="token punctuation">.</span><span class="token function">decorateCheckedRunnable</span><span class="token punctuation">(</span>rateLimiter<span class="token punctuation">,</span> backendService<span class="token operator">::</span><span class="token function">doSomething</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// during second refresh cycle limiter will get 100 permissions</span>
rateLimiter<span class="token punctuation">.</span><span class="token function">changeLimitForPeriod</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以在RateLimiterRegistry上注册事件使用者，并在创建，替换或删除RateLimiter时执行操作。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RateLimiterRegistry</span> registry <span class="token operator">=</span> <span class="token class-name">RateLimiterRegistry</span><span class="token punctuation">.</span><span class="token function">ofDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
registry<span class="token punctuation">.</span><span class="token function">getEventPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">onEntryAdded</span><span class="token punctuation">(</span>entryAddedEvent <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">RateLimiter</span> addedRateLimiter <span class="token operator">=</span> entryAddedEvent<span class="token punctuation">.</span><span class="token function">getAddedEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;RateLimiter {} added&quot;</span><span class="token punctuation">,</span> addedRateLimiter<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">onEntryRemoved</span><span class="token punctuation">(</span>entryRemovedEvent <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">RateLimiter</span> removedRateLimiter <span class="token operator">=</span> entryRemovedEvent<span class="token punctuation">.</span><span class="token function">getRemovedEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;RateLimiter {} removed&quot;</span><span class="token punctuation">,</span> removedRateLimiter<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RateLimiter发出RateLimiterEvents流。 事件可以是成功的许可获取或获取失败。</p><p>所有事件都包含其他信息，例如事件创建时间和速率限制器名称。</p><p>如果要使用事件，则必须注册事件使用者。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>rateLimiter<span class="token punctuation">.</span><span class="token function">getEventPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">onSuccess</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">onFailure</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以通过自定义实现覆盖内存RegistryStore。 例如，如果要使用在一定时间后删除未使用实例的缓存。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RateLimiterRegistry</span> rateLimiterRegistry <span class="token operator">=</span> <span class="token class-name">RateLimiterRegistry</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">withRegistryStore</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CacheRateLimiterRegistryStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="和spring-boot结合" tabindex="-1"><a class="header-anchor" href="#和spring-boot结合"><span>和spring boot结合</span></a></h1><h2 id="依赖" tabindex="-1"><a class="header-anchor" href="#依赖"><span>依赖</span></a></h2><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>repositories <span class="token punctuation">{</span>
    <span class="token function">jCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

dependencies <span class="token punctuation">{</span>
  compile <span class="token interpolation-string"><span class="token string">&quot;io.github.resilience4j:resilience4j-spring-boot2:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">resilience4jVersion</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span>
  <span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&#39;org.springframework.boot:spring-boot-starter-actuator&#39;</span><span class="token punctuation">)</span>
  <span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&#39;org.springframework.boot:spring-boot-starter-aop&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关配置" tabindex="-1"><a class="header-anchor" href="#相关配置"><span>相关配置</span></a></h2><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">resilience4j.circuitbreaker</span><span class="token punctuation">:</span>
    <span class="token key atrule">instances</span><span class="token punctuation">:</span>
        <span class="token key atrule">backendA</span><span class="token punctuation">:</span>
            <span class="token key atrule">registerHealthIndicator</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
            <span class="token key atrule">slidingWindowSize</span><span class="token punctuation">:</span> <span class="token number">100</span>
        <span class="token key atrule">backendB</span><span class="token punctuation">:</span>
            <span class="token key atrule">registerHealthIndicator</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
            <span class="token key atrule">slidingWindowSize</span><span class="token punctuation">:</span> <span class="token number">10</span>
            <span class="token key atrule">permittedNumberOfCallsInHalfOpenState</span><span class="token punctuation">:</span> <span class="token number">3</span>
            <span class="token key atrule">slidingWindowType</span><span class="token punctuation">:</span> TIME_BASED
            <span class="token key atrule">minimumNumberOfCalls</span><span class="token punctuation">:</span> <span class="token number">20</span>
            <span class="token key atrule">waitDurationInOpenState</span><span class="token punctuation">:</span> 50s
            <span class="token key atrule">failureRateThreshold</span><span class="token punctuation">:</span> <span class="token number">50</span>
            <span class="token key atrule">eventConsumerBufferSize</span><span class="token punctuation">:</span> <span class="token number">10</span>
            <span class="token key atrule">recordFailurePredicate</span><span class="token punctuation">:</span> io.github.robwin.exception.RecordFailurePredicate
            
<span class="token key atrule">resilience4j.retry</span><span class="token punctuation">:</span>
    <span class="token key atrule">instances</span><span class="token punctuation">:</span>
        <span class="token key atrule">backendA</span><span class="token punctuation">:</span>
            <span class="token key atrule">maxAttempts</span><span class="token punctuation">:</span> <span class="token number">3</span>
            <span class="token key atrule">waitDuration</span><span class="token punctuation">:</span> 10s
            <span class="token key atrule">enableExponentialBackoff</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
            <span class="token key atrule">exponentialBackoffMultiplier</span><span class="token punctuation">:</span> <span class="token number">2</span>
            <span class="token key atrule">retryExceptions</span><span class="token punctuation">:</span>
                <span class="token punctuation">-</span> org.springframework.web.client.HttpServerErrorException
                <span class="token punctuation">-</span> java.io.IOException
            <span class="token key atrule">ignoreExceptions</span><span class="token punctuation">:</span>
                <span class="token punctuation">-</span> io.github.robwin.exception.BusinessException
        <span class="token key atrule">backendB</span><span class="token punctuation">:</span>
            <span class="token key atrule">maxAttempts</span><span class="token punctuation">:</span> <span class="token number">3</span>
            <span class="token key atrule">waitDuration</span><span class="token punctuation">:</span> 10s
            <span class="token key atrule">retryExceptions</span><span class="token punctuation">:</span>
                <span class="token punctuation">-</span> org.springframework.web.client.HttpServerErrorException
                <span class="token punctuation">-</span> java.io.IOException
            <span class="token key atrule">ignoreExceptions</span><span class="token punctuation">:</span>
                <span class="token punctuation">-</span> io.github.robwin.exception.BusinessException
                
<span class="token key atrule">resilience4j.bulkhead</span><span class="token punctuation">:</span>
    <span class="token key atrule">instances</span><span class="token punctuation">:</span>
        <span class="token key atrule">backendA</span><span class="token punctuation">:</span>
            <span class="token key atrule">maxConcurrentCalls</span><span class="token punctuation">:</span> <span class="token number">10</span>
        <span class="token key atrule">backendB</span><span class="token punctuation">:</span>
            <span class="token key atrule">maxWaitDuration</span><span class="token punctuation">:</span> 10ms
            <span class="token key atrule">maxConcurrentCalls</span><span class="token punctuation">:</span> <span class="token number">20</span>
            
<span class="token key atrule">resilience4j.thread-pool-bulkhead</span><span class="token punctuation">:</span>
  <span class="token key atrule">instances</span><span class="token punctuation">:</span>
    <span class="token key atrule">backendC</span><span class="token punctuation">:</span>
      <span class="token key atrule">maxThreadPoolSize</span><span class="token punctuation">:</span> <span class="token number">1</span>
      <span class="token key atrule">coreThreadPoolSize</span><span class="token punctuation">:</span> <span class="token number">1</span>
      <span class="token key atrule">queueCapacity</span><span class="token punctuation">:</span> <span class="token number">1</span>
        
<span class="token key atrule">resilience4j.ratelimiter</span><span class="token punctuation">:</span>
    <span class="token key atrule">instances</span><span class="token punctuation">:</span>
        <span class="token key atrule">backendA</span><span class="token punctuation">:</span>
            <span class="token key atrule">limitForPeriod</span><span class="token punctuation">:</span> <span class="token number">10</span>
            <span class="token key atrule">limitRefreshPeriod</span><span class="token punctuation">:</span> 1s
            <span class="token key atrule">timeoutDuration</span><span class="token punctuation">:</span> <span class="token number">0</span>
            <span class="token key atrule">registerHealthIndicator</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
            <span class="token key atrule">eventConsumerBufferSize</span><span class="token punctuation">:</span> <span class="token number">100</span>
        <span class="token key atrule">backendB</span><span class="token punctuation">:</span>
            <span class="token key atrule">limitForPeriod</span><span class="token punctuation">:</span> <span class="token number">6</span>
            <span class="token key atrule">limitRefreshPeriod</span><span class="token punctuation">:</span> 500ms
            <span class="token key atrule">timeoutDuration</span><span class="token punctuation">:</span> 3s
            
<span class="token key atrule">resilience4j.timelimiter</span><span class="token punctuation">:</span>
    <span class="token key atrule">instances</span><span class="token punctuation">:</span>
        <span class="token key atrule">backendA</span><span class="token punctuation">:</span>
            <span class="token key atrule">timeoutDuration</span><span class="token punctuation">:</span> 2s
            <span class="token key atrule">cancelRunningFuture</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">backendB</span><span class="token punctuation">:</span>
            <span class="token key atrule">timeoutDuration</span><span class="token punctuation">:</span> 1s
            <span class="token key atrule">cancelRunningFuture</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以覆盖默认配置、定义共享配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">resilience4j.circuitbreaker</span><span class="token punctuation">:</span>
    <span class="token key atrule">configs</span><span class="token punctuation">:</span>
        <span class="token key atrule">default</span><span class="token punctuation">:</span>
            <span class="token key atrule">slidingWindowSize</span><span class="token punctuation">:</span> <span class="token number">100</span>
            <span class="token key atrule">permittedNumberOfCallsInHalfOpenState</span><span class="token punctuation">:</span> <span class="token number">10</span>
            <span class="token key atrule">waitDurationInOpenState</span><span class="token punctuation">:</span> <span class="token number">10000</span>
            <span class="token key atrule">failureRateThreshold</span><span class="token punctuation">:</span> <span class="token number">60</span>
            <span class="token key atrule">eventConsumerBufferSize</span><span class="token punctuation">:</span> <span class="token number">10</span>
            <span class="token key atrule">registerHealthIndicator</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">someShared</span><span class="token punctuation">:</span>
            <span class="token key atrule">slidingWindowSize</span><span class="token punctuation">:</span> <span class="token number">50</span>
            <span class="token key atrule">permittedNumberOfCallsInHalfOpenState</span><span class="token punctuation">:</span> <span class="token number">10</span>
    <span class="token key atrule">instances</span><span class="token punctuation">:</span>
        <span class="token key atrule">backendA</span><span class="token punctuation">:</span>
            <span class="token key atrule">baseConfig</span><span class="token punctuation">:</span> default
            <span class="token key atrule">waitDurationInOpenState</span><span class="token punctuation">:</span> <span class="token number">5000</span>
        <span class="token key atrule">backendB</span><span class="token punctuation">:</span>
            <span class="token key atrule">baseConfig</span><span class="token punctuation">:</span> someShared
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你还可以通过代码覆盖yaml中的配置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">CircuitBreakerConfigCustomizer</span> <span class="token function">testCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">CircuitBreakerConfigCustomizer</span>
        <span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;backendA&quot;</span><span class="token punctuation">,</span> builder <span class="token operator">-&gt;</span> builder<span class="token punctuation">.</span><span class="token function">slidingWindowSize</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Resilience4j 提供了自定义配置的类：</p><table><thead><tr><th>Resilienc4j Type</th><th>Instance Customizer class</th></tr></thead><tbody><tr><td>Circuit breaker</td><td>CircuitBreakerConfigCustomizer</td></tr><tr><td>Retry</td><td>RetryConfigCustomizer</td></tr><tr><td>Rate limiter</td><td>RateLimiterConfigCustomizer</td></tr><tr><td>Bulkhead</td><td>BulkheadConfigCustomizer</td></tr><tr><td>ThreadPoolBulkhead</td><td>ThreadPoolBulkheadConfigCustomizer</td></tr><tr><td>Time Limiter</td><td>TimeLimiterConfigCustomizer</td></tr></tbody></table><h2 id="注解" tabindex="-1"><a class="header-anchor" href="#注解"><span>注解</span></a></h2><p>spring boot提供了注解支持，这些注解标注的方法的返回值可以是异步或同步的</p><p>Bulkhead注解的type属性可以指定采用何种类型的隔离器，默认是semaphore ：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bulkhead</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">Bulkhead<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span><span class="token constant">THREADPOOL</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">doSomethingAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token annotation punctuation">@CircuitBreaker</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND</span><span class="token punctuation">,</span> fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;fallback&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RateLimiter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Bulkhead</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retry</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND</span><span class="token punctuation">,</span> fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;fallback&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@TimeLimiter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">String</span> param1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token class-name">String</span> param1<span class="token punctuation">,</span> <span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token class-name">String</span> param1<span class="token punctuation">,</span> <span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，fallback必须放在同个类中，并且有相同的方法签名并追加一个异常参数。</p><p>如果有多个fallback方法，则最近的方法会执行，例如上面的方法抛出 NumberFormatException，IllegalArgumentException方法会执行。</p><p>仅当多个方法具有相同的返回类型，并且您要一劳永逸地为它们定义相同的后备方法时，才可以使用异常参数定义一个全局后备方法。</p><h3 id="注解的顺序" tabindex="-1"><a class="header-anchor" href="#注解的顺序"><span>注解的顺序</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Retry ( CircuitBreaker ( RateLimiter ( TimeLimiter ( Bulkhead ( Function ) ) ) ) )
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果需要其他顺序，则必须使用功能链样式而不是Spring批注样式，或使用以下属性来显式设置外观顺序：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token punctuation">-</span> resilience4j.retry.retryAspectOrder
<span class="token punctuation">-</span> resilience4j.circuitbreaker.circuitBreakerAspectOrder
<span class="token punctuation">-</span> resilience4j.ratelimiter.rateLimiterAspectOrder
<span class="token punctuation">-</span> resilience4j.timelimiter.timeLimiterAspectOrder
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如，让短路器在重试器后执行，你必须设置<code>retryAspectOrder</code> 的值大于<code>circuitBreakerAspectOrder</code> ：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">resilience4j</span><span class="token punctuation">:</span>
  <span class="token key atrule">circuitbreaker</span><span class="token punctuation">:</span>
    <span class="token key atrule">circuitBreakerAspectOrder</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">retry</span><span class="token punctuation">:</span>
    <span class="token key atrule">retryAspectOrder</span><span class="token punctuation">:</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="指标端点" tabindex="-1"><a class="header-anchor" href="#指标端点"><span>指标端点</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>/actuator/metrics
{
    &quot;names&quot;: [
        &quot;resilience4j.circuitbreaker.calls&quot;,
        &quot;resilience4j.circuitbreaker.buffered.calls&quot;,
        &quot;resilience4j.circuitbreaker.state&quot;,
        &quot;resilience4j.circuitbreaker.failure.rate&quot;
        ]
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取具体的指标信息，<code>GET /actuator/metrics/{metric.name}</code>,例如：<code>/actuator/metrics/resilience4j.circuitbreaker.calls</code>：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;resilience4j.circuitbreaker.calls&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;measurements&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;statistic&quot;</span><span class="token operator">:</span> <span class="token string">&quot;VALUE&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token number">3</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;availableTags&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;kind&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;values&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token string">&quot;not_permitted&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;successful&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;failed&quot;</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;values&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token string">&quot;backendB&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;backendA&quot;</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想要使用 prometheus，需要添加依赖 io.micrometer:micrometer-registry-prometheus，端点是/actuator/prometheus</p><h3 id="health-端点" tabindex="-1"><a class="header-anchor" href="#health-端点"><span>health 端点</span></a></h3><p>默认，CircuitBreaker 和 RateLimiter 的health端点是禁用的。当CircuitBreaker打开时，由于应用程序状态为DOWN，因此会禁用运行状况指示器。 这可能不是您想要实现的。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">management.health.circuitbreakers.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">management.health.ratelimiters.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>

<span class="token key atrule">resilience4j.circuitbreaker</span><span class="token punctuation">:</span>
  <span class="token key atrule">configs</span><span class="token punctuation">:</span>
    <span class="token key atrule">default</span><span class="token punctuation">:</span>
      <span class="token key atrule">registerHealthIndicator</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>


<span class="token key atrule">resilience4j.ratelimiter</span><span class="token punctuation">:</span>
  <span class="token key atrule">configs</span><span class="token punctuation">:</span>
    <span class="token key atrule">default</span><span class="token punctuation">:</span>
      <span class="token key atrule">registerHealthIndicator</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>闭合的CircuitBreaker状态映射为UP，打开状态映射为DOWN，半打开状态映射为UNKNOWN。</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;UP&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;details&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;circuitBreakers&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;UP&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;details&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;backendB&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;UP&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;details&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;failureRate&quot;</span><span class="token operator">:</span> <span class="token string">&quot;-1.0%&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;failureRateThreshold&quot;</span><span class="token operator">:</span> <span class="token string">&quot;50.0%&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;slowCallRate&quot;</span><span class="token operator">:</span> <span class="token string">&quot;-1.0%&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;slowCallRateThreshold&quot;</span><span class="token operator">:</span> <span class="token string">&quot;100.0%&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;bufferedCalls&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;slowCalls&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;slowFailedCalls&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;failedCalls&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;notPermittedCalls&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;state&quot;</span><span class="token operator">:</span> <span class="token string">&quot;CLOSED&quot;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;backendA&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;UP&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;details&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;failureRate&quot;</span><span class="token operator">:</span> <span class="token string">&quot;-1.0%&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;failureRateThreshold&quot;</span><span class="token operator">:</span> <span class="token string">&quot;50.0%&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;slowCallRate&quot;</span><span class="token operator">:</span> <span class="token string">&quot;-1.0%&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;slowCallRateThreshold&quot;</span><span class="token operator">:</span> <span class="token string">&quot;100.0%&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;bufferedCalls&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;slowCalls&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;slowFailedCalls&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;failedCalls&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;notPermittedCalls&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;state&quot;</span><span class="token operator">:</span> <span class="token string">&quot;CLOSED&quot;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="events端点" tabindex="-1"><a class="header-anchor" href="#events端点"><span>events端点</span></a></h3><p>发出的CircuitBreaker，Retry，RateLimiter，Bulkhead和TimeLimiter事件存储在单独的循环事件消费者缓冲区中。 可以在application.yml文件（eventConsumerBufferSize）中配置事件消费者缓冲区的大小。</p><p>端点 <code>/ctuator/circuitbreakers</code> 列出了所有CircuitBreaker实例的名称。 该端点也可用于Retry，RateLimiter，Bulkhead和TimeLimiter。</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;circuitBreakers&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;backendA&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;backendB&quot;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>端点/ actuator / circuitbreakerevents默认情况下列出所有CircuitBreaker实例的最近100个发出的事件。 该端点也可用于Retry，RateLimiter，Bulkhead和TimeLimiter。</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;circuitBreakerEvents&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;circuitBreakerName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;backendA&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ERROR&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;creationTime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2017-01-10T15:39:17.117+01:00[Europe/Berlin]&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;errorMessage&quot;</span><span class="token operator">:</span> <span class="token string">&quot;org.springframework.web.client.HttpServerErrorException: 500 This is a remote exception&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;durationInMs&quot;</span><span class="token operator">:</span> <span class="token number">0</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;circuitBreakerName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;backendA&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;SUCCESS&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;creationTime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2017-01-10T15:39:20.518+01:00[Europe/Berlin]&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;durationInMs&quot;</span><span class="token operator">:</span> <span class="token number">0</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;circuitBreakerName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;backendB&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ERROR&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;creationTime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2017-01-10T15:41:31.159+01:00[Europe/Berlin]&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;errorMessage&quot;</span><span class="token operator">:</span> <span class="token string">&quot;org.springframework.web.client.HttpServerErrorException: 500 This is a remote exception&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;durationInMs&quot;</span><span class="token operator">:</span> <span class="token number">0</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;circuitBreakerName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;backendB&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;SUCCESS&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;creationTime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2017-01-10T15:41:33.526+01:00[Europe/Berlin]&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;durationInMs&quot;</span><span class="token operator">:</span> <span class="token number">0</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="spring-cloud-结合" tabindex="-1"><a class="header-anchor" href="#spring-cloud-结合"><span>spring cloud 结合</span></a></h1><p>将Spring Cloud 2 Starter of Resilience4j添加到您的编译依赖项中。</p><p>Spring Cloud 2 Starter允许您将Spring Cloud Config用作在运行时管理和刷新属性。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>repositories <span class="token punctuation">{</span>
    <span class="token function">jCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

dependencies <span class="token punctuation">{</span>
    compile <span class="token string">&quot;io.github.resilience4j:resilience4j-spring-cloud2:\${resilience4jVersion}&quot;</span>
    <span class="token function">compile</span><span class="token punctuation">(</span>&#39;org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">:</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>actuator&#39;<span class="token punctuation">)</span>
    <span class="token function">compile</span><span class="token punctuation">(</span>&#39;org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">:</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>aop&#39;<span class="token punctuation">)</span>
    <span class="token function">compile</span><span class="token punctuation">(</span>&#39;org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">:</span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>config&#39;<span class="token punctuation">)</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="和feign结合" tabindex="-1"><a class="header-anchor" href="#和feign结合"><span>和feign结合</span></a></h1><p>当前仅支持断路器、限流器和fallback.</p><h2 id="装扮接口" tabindex="-1"><a class="header-anchor" href="#装扮接口"><span>装扮接口</span></a></h2><p>Resilience4jFeign.builder是用于创建feign的容错实例的主要类。</p><p>它扩展了Feign.builder，添加自定义InvocationHandlerFactory。 Resilience4jFeign使用其自己的InvocationHandlerFactory来应用装饰器。 可以使用FeignDecorators类来构建装饰器。 可以组合多个装饰器。</p><p>以下示例显示如何使用RateLimiter和CircuitBreaker装饰feign接口：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@RequestLine</span><span class="token punctuation">(</span><span class="token string">&quot;GET /greeting&quot;</span><span class="token punctuation">)</span>
            <span class="token class-name">String</span> <span class="token function">getGreeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token annotation punctuation">@RequestLine</span><span class="token punctuation">(</span><span class="token string">&quot;POST /greeting&quot;</span><span class="token punctuation">)</span>
            <span class="token class-name">String</span> <span class="token function">createGreeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

<span class="token class-name">CircuitBreaker</span> circuitBreaker <span class="token operator">=</span> <span class="token class-name">CircuitBreaker</span><span class="token punctuation">.</span><span class="token function">ofDefaults</span><span class="token punctuation">(</span><span class="token string">&quot;backendName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">RateLimiter</span> rateLimiter <span class="token operator">=</span> <span class="token class-name">RateLimiter</span><span class="token punctuation">.</span><span class="token function">ofDefaults</span><span class="token punctuation">(</span><span class="token string">&quot;backendName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">FeignDecorators</span> decorators <span class="token operator">=</span> <span class="token class-name">FeignDecorators</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                 <span class="token punctuation">.</span><span class="token function">withRateLimiter</span><span class="token punctuation">(</span>rateLimiter<span class="token punctuation">)</span>
                                 <span class="token punctuation">.</span><span class="token function">withCircuitBreaker</span><span class="token punctuation">(</span>circuitBreaker<span class="token punctuation">)</span>
                                 <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MyService</span> myService <span class="token operator">=</span> <span class="token class-name">Resilience4jFeign</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>decorators<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span><span class="token class-name">MyService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;http://localhost:8080/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用MyService实例的任何方法将先调用CircuitBreaker，然后再调用RateLimiter。</p><p>如果这些机制之一生效，则将引发相应的RuntimeException，例如CircuitBreakerOpenException或RequestNotPermitted（提示：这些不会扩展FeignException类）。<img src="`+o+`" alt="img" loading="lazy"></p><h2 id="装扮器的顺序" tabindex="-1"><a class="header-anchor" href="#装扮器的顺序"><span>装扮器的顺序</span></a></h2><p>装饰器的应用顺序与声明它们的顺序相对应。</p><p>在构建FeignDecorators时，请注意这一点，因为顺序会影响最终的行为，这一点很重要。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">FeignDecorators</span> decoratorsA <span class="token operator">=</span> <span class="token class-name">FeignDecorators</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                         <span class="token punctuation">.</span><span class="token function">withCircuitBreaker</span><span class="token punctuation">(</span>circuitBreaker<span class="token punctuation">)</span>
                                         <span class="token punctuation">.</span><span class="token function">withRateLimiter</span><span class="token punctuation">(</span>rateLimiter<span class="token punctuation">)</span>
                                         <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                         
        <span class="token class-name">FeignDecorators</span> decoratorsB <span class="token operator">=</span> <span class="token class-name">FeignDecorators</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                         <span class="token punctuation">.</span><span class="token function">withRateLimiter</span><span class="token punctuation">(</span>rateLimiter<span class="token punctuation">)</span>
                                         <span class="token punctuation">.</span><span class="token function">withCircuitBreaker</span><span class="token punctuation">(</span>circuitBreaker<span class="token punctuation">)</span>
                                         <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用decoratorsA时，将在CircuitBreaker之前调用RateLimiter。 这意味着即使CircuitBreaker打开，RateLimiter仍将限制呼叫速率。 decoratorsB应用相反的顺序。 这意味着一旦CircuitBreaker打开，RateLimiter将不再起作用。</p><h2 id="fallback" tabindex="-1"><a class="header-anchor" href="#fallback"><span>Fallback</span></a></h2><p>可以定义在抛出异常时调用的fallback。 当HTTP请求失败时，也可能在FeignDecorators中的一个激活时，例如CircuitBreaker，就会发生异常。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@RequestLine</span><span class="token punctuation">(</span><span class="token string">&quot;GET /greeting&quot;</span><span class="token punctuation">)</span>
            <span class="token class-name">String</span> <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

<span class="token class-name">MyService</span> requestFailedFallback <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;fallback greeting&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">MyService</span> circuitBreakerFallback <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;CircuitBreaker is open!&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">CircuitBreaker</span> circuitBreaker <span class="token operator">=</span> <span class="token class-name">CircuitBreaker</span><span class="token punctuation">.</span><span class="token function">ofDefaults</span><span class="token punctuation">(</span><span class="token string">&quot;backendName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">FeignDecorators</span> decorators <span class="token operator">=</span> <span class="token class-name">FeignDecorators</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                         <span class="token punctuation">.</span><span class="token function">withFallback</span><span class="token punctuation">(</span>requestFailedFallback<span class="token punctuation">,</span> <span class="token class-name">FeignException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                         <span class="token punctuation">.</span><span class="token function">withFallback</span><span class="token punctuation">(</span>circuitBreakerFallback<span class="token punctuation">,</span> <span class="token class-name">CircuitBreakerOpenException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                         <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MyService</span> myService <span class="token operator">=</span> <span class="token class-name">Resilience4jFeign</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>decorators<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span><span class="token class-name">MyService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;http://localhost:8080/&quot;</span><span class="token punctuation">,</span> fallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此示例中，当抛出FeignException时（通常在HTTP请求失败时）将调用requestFailedFallback，而仅在CircuitBreakerOpenException情况下才调用circuitBreakerFallback。 检查FeignDecorators类，以了解更多过滤后备的方法。</p><p>所有回退必须实现在“目标”（Resilience4jFeign.Builder＃target）方法中声明的相同接口，否则将抛出IllegalArgumentException。</p><p>可以分配多个回退来处理相同的Exception，并在前一个失败时调用下一个回退。</p><p>如果需要，回退可以消耗抛出的Exception。 如果回退取决于异常可能具有不同的行为，或者仅记录异常，这将很有用。</p><p>请注意，将为抛出的每个异常实例化这种回退。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@RequestLine</span><span class="token punctuation">(</span><span class="token string">&quot;GET /greeting&quot;</span><span class="token punctuation">)</span>
            <span class="token class-name">String</span> <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFallback</span> <span class="token keyword">implements</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>
            <span class="token keyword">private</span> <span class="token class-name">Exception</span> cause<span class="token punctuation">;</span>

            <span class="token keyword">public</span> <span class="token class-name">MyFallback</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>cause <span class="token operator">=</span> cause<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>cause instanceOf <span class="token class-name">FeignException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token string">&quot;Feign Exception&quot;</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token string">&quot;Other exception&quot;</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">FeignDecorators</span> decorators <span class="token operator">=</span> <span class="token class-name">FeignDecorators</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withFallbackFactory</span><span class="token punctuation">(</span><span class="token class-name">MyFallback</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,214),u=[l];function r(k,d){return s(),a("div",null,u)}const b=n(i,[["render",r],["__file","Resilience4j.html.vue"]]),g=JSON.parse('{"path":"/post/Resilience4j.html","title":"Resilience4j","lang":"zh-CN","frontmatter":{"title":"Resilience4j","tags":["java"],"categories":["技术"],"date":"2022-12-02T12:54:32.000Z","description":"简介 Resilience4j一个轻量级（只依赖Vavr第三方库）的，易于使用的容错框架，灵感来源于Netflix Hystrix，依托于java8的函数式编程。 Resilience4j提供了断路器、限速、重试、Bulkhead等功能。你可以任意选择和搭配这些功能。 Bulkhead(隔板模式)是一种容错的应用程序设计。 在隔板架构中，应用程序的元素...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/post/Resilience4j.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"Resilience4j"}],["meta",{"property":"og:description","content":"简介 Resilience4j一个轻量级（只依赖Vavr第三方库）的，易于使用的容错框架，灵感来源于Netflix Hystrix，依托于java8的函数式编程。 Resilience4j提供了断路器、限速、重试、Bulkhead等功能。你可以任意选择和搭配这些功能。 Bulkhead(隔板模式)是一种容错的应用程序设计。 在隔板架构中，应用程序的元素..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-20T07:19:17.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2022-12-02T12:54:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-20T07:19:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Resilience4j\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-12-02T12:54:32.000Z\\",\\"dateModified\\":\\"2024-04-20T07:19:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"故障率和慢速调用率阈值","slug":"故障率和慢速调用率阈值","link":"#故障率和慢速调用率阈值","children":[]},{"level":2,"title":"如何使用","slug":"如何使用","link":"#如何使用","children":[{"level":3,"title":"断路器配置","slug":"断路器配置","link":"#断路器配置","children":[]},{"level":3,"title":"使用断路器装扮函数并调用","slug":"使用断路器装扮函数并调用","link":"#使用断路器装扮函数并调用","children":[]}]},{"level":2,"title":"依赖","slug":"依赖","link":"#依赖","children":[]},{"level":2,"title":"相关配置","slug":"相关配置","link":"#相关配置","children":[]},{"level":2,"title":"注解","slug":"注解","link":"#注解","children":[{"level":3,"title":"注解的顺序","slug":"注解的顺序","link":"#注解的顺序","children":[]}]},{"level":2,"title":"指标端点","slug":"指标端点","link":"#指标端点","children":[{"level":3,"title":"health 端点","slug":"health-端点","link":"#health-端点","children":[]},{"level":3,"title":"events端点","slug":"events端点","link":"#events端点","children":[]}]},{"level":2,"title":"装扮接口","slug":"装扮接口","link":"#装扮接口","children":[]},{"level":2,"title":"装扮器的顺序","slug":"装扮器的顺序","link":"#装扮器的顺序","children":[]},{"level":2,"title":"Fallback","slug":"fallback","link":"#fallback","children":[]}],"git":{"createdTime":1713597557000,"updatedTime":1713597557000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":1}]},"readingTime":{"minutes":26.88,"words":8063},"filePathRelative":"post/Resilience4j.md","localizedDate":"2022年12月2日","excerpt":"\\n<p>Resilience4j一个轻量级（只依赖Vavr第三方库）的，易于使用的容错框架，灵感来源于Netflix Hystrix，依托于java8的函数式编程。</p>\\n<p>Resilience4j提供了断路器、限速、重试、Bulkhead等功能。你可以任意选择和搭配这些功能。</p>\\n<p>Bulkhead(隔板模式)是一种容错的应用程序设计。 在隔板架构中，应用程序的元素被隔离到池中，因此，如果其中一个失败，则其他元素将继续运行。 它是根据船体的分段隔板（凸头）来命名的。 如果船体受损，则只有损坏的部分会充满水，从而防止船下沉。</p>\\n<p>以下示例显示了如何使用CircuitBreaker和Retry装饰lambda表达式，以便在发生异常时最多重试3次。</p>","autoDesc":true}');export{b as comp,g as data};
