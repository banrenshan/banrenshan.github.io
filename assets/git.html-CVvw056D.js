import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as a,a as i}from"./app-JRZgQj53.js";const n={},s=i(`<h2 id="gitattributes" tabindex="-1"><a class="header-anchor" href="#gitattributes"><span>.gitattributes</span></a></h2><p>当执行 git 动作时，<code>.gitattributes</code> 文件允许你指定 git 管理的文件或路径的属性。换句话说，每当有文件保存或者创建时，git 会根据指定的属性来自动地保存。</p><p><code>.gitattributes </code>文件格式如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>要匹配的文件模式 属性1 属性2 ...
在.gitattributes文件的一行中，一个属性（以text属性为例）可能有4种状态：
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>设置text</li><li>不设置-text</li><li>设置值text=string</li><li>未声明，通常不出现该属性即可；但是为了覆盖其他文件中的声明，也可以<code>!text</code></li></ul><h3 id="eol属性" tabindex="-1"><a class="header-anchor" href="#eol属性"><span>eol属性</span></a></h3><p><em>eol</em>(end of line)，用于配置文件的结尾:</p><ul><li>eol=lf ，[回车] ：入库时将行尾规范为LF，检出时行尾不强制转换为 CRLF</li><li>eol=crlf，[换行、回车] ：入库时将行尾规范为LF，检出时将行尾转换为CRLF</li></ul><blockquote><p>开发者使用的操作系统不同，默认的文件结尾行就会不同。在 Windows 上默认的是回车换行（Carriage Return Line Feed, CRLF），然而，在 Linux/MacOS 上则是换行（Line Feed, LF）。</p></blockquote><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p>Demo1:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>*           text=auto  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>文件的行尾自动转换。如果是文本文件，则在文件入Git库时，行尾自动转换为LF。如果已经在入Git库中的文件的行尾是GRLF，则文件在入Git库时，不再转换为LF。</p></blockquote><p>Demo2:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>*.txt       text  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>对于<code>.txt</code>文件，标记为文本文件，并进行行尾规范化。</p></blockquote><p>Demo3:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>*.jpg       -text  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>对于<code>.jpg</code>文件，标记为非文本文件</p></blockquote><p>Demo4:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>*.vcproj    text eol=crlf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>对于<code>.vcproj</code>文件，标记为文本文件，在文件入Git库时进行规范化，行尾转换为LF。在检测到出工作目录时，行尾自动转换为GRLF。</p></blockquote><p>Demo5:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>*.sh        text eol=lf  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>对于sh文件，标记为文本文件，在文件入Git库时进行规范化，即行尾为LF。在检出到工作目录时，行尾也不会转换为CRLF（即保持LF）。</p></blockquote><p>Demo6:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>*.py        eol=lf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>对于py文件，只针对工作目录中的文件，行尾为LF</p></blockquote><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><p>确保仓库根目录下已经存在<code>.gitattributes</code>文件，下面的命令就会根据文件<code> .gitattributes</code> 中的定义，更新文件的结尾行:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cached</span> <span class="token parameter variable">-r</span>
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="为所有git库设置统一的-gitattributes文件" tabindex="-1"><a class="header-anchor" href="#为所有git库设置统一的-gitattributes文件"><span>为所有Git库设置统一的.gitattributes文件：</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--get</span> core.attributesFile
<span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--get</span> core.attributesFile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,33),l=[s];function r(o,d){return t(),a("div",null,l)}const u=e(n,[["render",r],["__file","git.html.vue"]]),g=JSON.parse('{"path":"/tool/git.html","title":"git","lang":"zh-CN","frontmatter":{"title":"git","date":"2023-10-08T00:00:00.000Z","categories":["git"],"tags":["git","开发工具"],"description":".gitattributes 当执行 git 动作时，.gitattributes 文件允许你指定 git 管理的文件或路径的属性。换句话说，每当有文件保存或者创建时，git 会根据指定的属性来自动地保存。 .gitattributes 文件格式如下： 设置text 不设置-text 设置值text=string 未声明，通常不出现该属性即可；但是为了...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/tool/git.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"git"}],["meta",{"property":"og:description","content":".gitattributes 当执行 git 动作时，.gitattributes 文件允许你指定 git 管理的文件或路径的属性。换句话说，每当有文件保存或者创建时，git 会根据指定的属性来自动地保存。 .gitattributes 文件格式如下： 设置text 不设置-text 设置值text=string 未声明，通常不出现该属性即可；但是为了..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-10T12:45:31.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"git"}],["meta",{"property":"article:tag","content":"开发工具"}],["meta",{"property":"article:published_time","content":"2023-10-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-10T12:45:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"git\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-10T12:45:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":".gitattributes","slug":"gitattributes","link":"#gitattributes","children":[{"level":3,"title":"eol属性","slug":"eol属性","link":"#eol属性","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]}]}],"git":{"createdTime":1718023531000,"updatedTime":1718023531000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":1}]},"readingTime":{"minutes":1.98,"words":595},"filePathRelative":"tool/git.md","localizedDate":"2023年10月8日","excerpt":"<h2>.gitattributes</h2>\\n<p>当执行 git 动作时，<code>.gitattributes</code> 文件允许你指定 git 管理的文件或路径的属性。换句话说，每当有文件保存或者创建时，git 会根据指定的属性来自动地保存。</p>\\n<p><code>.gitattributes </code>文件格式如下：</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>要匹配的文件模式 属性1 属性2 ...\\n在.gitattributes文件的一行中，一个属性（以text属性为例）可能有4种状态：\\n</code></pre></div>","autoDesc":true}');export{u as comp,g as data};
