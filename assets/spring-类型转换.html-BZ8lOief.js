import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o,c as t,a as r}from"./app-DvhfW1jQ.js";const a={},d=r('<p>将验证视为业务逻辑有利也有弊，<code>Spring</code>提供了一种验证和数据绑定的设计，不排除其中任何一种。具体来说，验证不应与<code>web</code>层绑定，并且应该易于本地化，并且可以插入任何可用的验证器。考虑到这些问题，<code>Spring</code>提供了一个<code>Validator</code>契约，该契约在应用程序的每一层受到支持。</p><p>数据绑定有助于将用户输入动态绑定到应用程序的域模型（或用于处理用户输入的任何对象）。Spring提供了<code>DataBinder</code>来做到这一点。<code>Validator</code>和<code>DataBinder</code>组成<code>validation</code>包，主要用于但不限于web层。</p><p><code>BeanWrapper</code>是<code>Spring</code>框架中的一个基本概念，在很多地方都有使用。但是，您可能不需要直接使用<code>BeanWrapper</code>。</p><p><code>Spring</code>的<code>DataBinder</code>和较低级别的<code>BeanWrapper</code>都使用<code>PropertyEditorSupport</code>实现来解析和格式化属性值。<code>PropertyEditor</code>和<code>PropertyEditorSupport</code>类型是<code>JavaBeans</code>规范的一部分，也将在本章中进行解释。Spring的<code>core.covert</code>包提供了一个通用的类型转换工具，以及用于格式化UI字段值的更高级别的<code>format</code>包。您可以使用这些包作为<code>PropertyEditorSupport</code>实现的替代方案。</p><p><code>Spring</code>通过配置基础设施和Spring自己的<code>Validator</code>合约的适配器来支持<code>JavaBean</code>验证。应用程序可以全局启用Bean验证，如Java Bean Validation中所述，并专门用于所有验证需求。在web层中，应用程序可以进一步为每个<code>DataBinder</code>注册控制器本地Spring <code>Validator</code>实例，如配置<code>DataBinder</code>中所述，这对于插入自定义验证逻辑非常有用。</p><h2 id="使用spring的validator接口" tabindex="-1"><a class="header-anchor" href="#使用spring的validator接口"><span>使用Spring的Validator接口</span></a></h2><p>Spring提供了一个Validator接口，您可以使用它来验证对象。 Validator接口使用Errors对象工作，以便在验证时验证器可以将验证失败报告给Errors对象。</p>',7),i=[d];function n(c,p){return o(),t("div",null,i)}const s=e(a,[["render",n],["__file","spring-类型转换.html.vue"]]),m=JSON.parse('{"path":"/Spring/spring-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html","title":"Spring 类型转换","lang":"zh-CN","frontmatter":{"title":"Spring 类型转换","date":"2024-04-27T00:00:00.000Z","categories":["Spring"],"tags":["Spring","类型转换"],"description":"将验证视为业务逻辑有利也有弊，Spring提供了一种验证和数据绑定的设计，不排除其中任何一种。具体来说，验证不应与web层绑定，并且应该易于本地化，并且可以插入任何可用的验证器。考虑到这些问题，Spring提供了一个Validator契约，该契约在应用程序的每一层受到支持。 数据绑定有助于将用户输入动态绑定到应用程序的域模型（或用于处理用户输入的任何对...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/Spring/spring-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"Spring 类型转换"}],["meta",{"property":"og:description","content":"将验证视为业务逻辑有利也有弊，Spring提供了一种验证和数据绑定的设计，不排除其中任何一种。具体来说，验证不应与web层绑定，并且应该易于本地化，并且可以插入任何可用的验证器。考虑到这些问题，Spring提供了一个Validator契约，该契约在应用程序的每一层受到支持。 数据绑定有助于将用户输入动态绑定到应用程序的域模型（或用于处理用户输入的任何对..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-10T12:45:31.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"类型转换"}],["meta",{"property":"article:published_time","content":"2024-04-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-10T12:45:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring 类型转换\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-10T12:45:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"使用Spring的Validator接口","slug":"使用spring的validator接口","link":"#使用spring的validator接口","children":[]}],"git":{"createdTime":1714556533000,"updatedTime":1718023531000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":2}]},"readingTime":{"minutes":1.66,"words":499},"filePathRelative":"Spring/spring-类型转换.md","localizedDate":"2024年4月27日","excerpt":"<p>将验证视为业务逻辑有利也有弊，<code>Spring</code>提供了一种验证和数据绑定的设计，不排除其中任何一种。具体来说，验证不应与<code>web</code>层绑定，并且应该易于本地化，并且可以插入任何可用的验证器。考虑到这些问题，<code>Spring</code>提供了一个<code>Validator</code>契约，该契约在应用程序的每一层受到支持。</p>\\n<p>数据绑定有助于将用户输入动态绑定到应用程序的域模型（或用于处理用户输入的任何对象）。Spring提供了<code>DataBinder</code>来做到这一点。<code>Validator</code>和<code>DataBinder</code>组成<code>validation</code>包，主要用于但不限于web层。</p>","autoDesc":true}');export{s as comp,m as data};
