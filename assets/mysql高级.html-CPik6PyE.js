import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,a as e}from"./app-Brzzz3sI.js";const p="/assets/image-20210830203726044-BMflmZdF.png",t="/assets/image-20210830204112760-DHGGXid3.png",l={},o=e(`<h1 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h1><ul><li>安装过程中，必须初始化data目录以及系统数据库。rpm是自动完成的，win和linux的压缩包则需要开发者自己操作。</li><li>安装过程中会生成临时密码，密码存储在 \`\`\`/var/log/mysqld.log\`\`。\`</li></ul><h2 id="rpm安装" tabindex="-1"><a class="header-anchor" href="#rpm安装"><span>rpm安装</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 1.下载yum仓库，并安装仓库</span>
shell<span class="token operator">&gt;</span> <span class="token function">wget</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-c</span> http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm
shell<span class="token operator">&gt;</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> mysql57-community-release-el7-10.noarch.rpm
<span class="token comment"># 2.安装mysql</span>
shell<span class="token operator">&gt;</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> mysql-community-server
<span class="token comment"># 3.启动</span>
shell<span class="token operator">&gt;</span> systemctl start mysqld.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="linux压缩包安装" tabindex="-1"><a class="header-anchor" href="#linux压缩包安装"><span>linux压缩包安装</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 创建用户</span>
shell<span class="token operator">&gt;</span> <span class="token function">groupadd</span> mysql
shell<span class="token operator">&gt;</span> <span class="token function">useradd</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-g</span> mysql <span class="token parameter variable">-s</span> /bin/false mysql
<span class="token comment"># 解压文件</span>
shell<span class="token operator">&gt;</span> <span class="token builtin class-name">cd</span> /usr/local
shell<span class="token operator">&gt;</span> <span class="token function">tar</span> zxvf /path/to/mysql-VERSION-OS.tar.gz
shell<span class="token operator">&gt;</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> full-path-to-mysql-VERSION-OS mysql
<span class="token comment">#创建数据目录</span>
shell<span class="token operator">&gt;</span> <span class="token builtin class-name">cd</span> mysql
shell<span class="token operator">&gt;</span> <span class="token function">mkdir</span> mysql-files
shell<span class="token operator">&gt;</span> <span class="token function">chown</span> mysql:mysql mysql-files
shell<span class="token operator">&gt;</span> <span class="token function">chmod</span> <span class="token number">750</span> mysql-files
<span class="token comment"># 初始化数据目录和系统数据库</span>
shell<span class="token operator">&gt;</span> bin/mysqld <span class="token parameter variable">--initialize</span> <span class="token parameter variable">--user</span><span class="token operator">=</span>mysql
<span class="token comment"># 支持安全连接（可选）</span>
shell<span class="token operator">&gt;</span> bin/mysql_ssl_rsa_setup
<span class="token comment"># 启动</span>
shell<span class="token operator">&gt;</span> bin/mysqld_safe <span class="token parameter variable">--user</span><span class="token operator">=</span>mysql <span class="token operator">&amp;</span>
<span class="token comment"># shell&gt; bin/mysqld --user=mysql &amp;</span>
<span class="token comment"># 配置自启动</span>
shell<span class="token operator">&gt;</span> <span class="token function">cp</span> support-files/mysql.server /etc/init.d/mysql.server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="window安装" tabindex="-1"><a class="header-anchor" href="#window安装"><span>window安装</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mysqld.exe --initialize-insecure <span class="token parameter variable">--console</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>--initialize-insecure: 不生成初始化密码</li><li>--initialize：生成初始化密码</li></ul><h2 id="安装后" tabindex="-1"><a class="header-anchor" href="#安装后"><span>安装后</span></a></h2><p><strong>修改密码</strong></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">user</span> <span class="token string">&#39;root&#39;</span><span class="token variable">@&#39;localhost&#39;</span> identified <span class="token keyword">by</span> <span class="token string">&#39;1234&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="约束" tabindex="-1"><a class="header-anchor" href="#约束"><span>约束</span></a></h1><h2 id="外键约束" tabindex="-1"><a class="header-anchor" href="#外键约束"><span>外键约束</span></a></h2><ol><li>创建表的时候添加，格式如下:</li></ol><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token punctuation">[</span><span class="token keyword">CONSTRAINT</span> 约束名称<span class="token punctuation">]</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>外键字段<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表名称<span class="token punctuation">(</span>主表字段<span class="token punctuation">)</span> 
    <span class="token punctuation">[</span><span class="token keyword">ON</span> <span class="token keyword">DELETE</span> {<span class="token keyword">RESTRICT</span> <span class="token operator">|</span> <span class="token keyword">CASCADE</span> <span class="token operator">|</span> <span class="token keyword">SET</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token keyword">NO</span> <span class="token keyword">ACTION</span>}<span class="token punctuation">]</span> 
    <span class="token punctuation">[</span><span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> {<span class="token keyword">RESTRICT</span> <span class="token operator">|</span> <span class="token keyword">CASCADE</span> <span class="token operator">|</span> <span class="token keyword">SET</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token keyword">NO</span> <span class="token keyword">ACTION</span>}<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>表创建之后添加：</li></ol><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> employee <span class="token keyword">ADD</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>dept_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> department<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ON DELETE后面的四个参数：代表的是当删除主表的记录时，所做的约定。</p><ul><li>RESTRICT：主记录存在依赖则不允许删除。</li><li>CASCADE（级联）：如果主表的记录删掉，则从表中相关联的记录都将被删掉。</li><li>SET NULL：将外键设置为空。</li><li>NO ACTION：等同于RESTRICT</li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 创建班级表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> z_class <span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
    NAME <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;名称&#39;</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">charset</span> utf8<span class="token punctuation">;</span>
<span class="token comment">-- 创建学生表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> z_student <span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>
    NAME <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;名称&#39;</span><span class="token punctuation">,</span>
    c_id <span class="token keyword">INT</span><span class="token punctuation">,</span>
    <span class="token keyword">CONSTRAINT</span> forign_cId_cls_id <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>c_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> z_class <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">RESTRICT</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">charset</span> utf8<span class="token punctuation">;</span>
<span class="token comment">-- 测试插入</span>
<span class="token keyword">insert</span> <span class="token keyword">INTO</span> z_class<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">value</span><span class="token punctuation">(</span><span class="token string">&#39;一班&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">INTO</span> z_student<span class="token punctuation">(</span>name<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span> <span class="token keyword">value</span><span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">update</span> z_student <span class="token keyword">set</span> name<span class="token operator">=</span><span class="token string">&#39;王五&#39;</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">update</span> z_class <span class="token keyword">set</span> name<span class="token operator">=</span><span class="token string">&#39;二班&#39;</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">update</span> z_class <span class="token keyword">set</span> id<span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">-- [Err] 1451 - Cannot delete or update a parent row: </span>
<span class="token comment">--- a foreign key constraint fails (\`test\`.\`z_student\`, CONSTRAINT \`forign_cId_cls_id\` FOREIGN KEY (\`c_id\`) REFERENCES \`z_class\` (\`id\`))</span>
<span class="token comment">-- 修改更新约束为CASCADE 之后，此时没有抛出异常，并且从表的外键更改，保持和主表的主键一致。</span>
<span class="token keyword">update</span> z_class <span class="token keyword">set</span> id<span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">-- 修改更新约束为 SET NULL ,此时没有抛出异常，主键发生更改，从表的外键置空。</span>
<span class="token keyword">update</span> z_class <span class="token keyword">set</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token comment">-- 修改更新约束为 NO ACTION,此时抛出异常</span>
<span class="token keyword">update</span> z_class <span class="token keyword">set</span> id<span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="视图" tabindex="-1"><a class="header-anchor" href="#视图"><span>视图</span></a></h1><p>视图(View )是一种虚拟存在的表。视图并不在数据库中实际存在,行和列数据来自定义视图的查询中使用的表,并且是在使用视图时动态生成的。通俗的讲,视图就是一条SELECT语句执行后返回的结果集。 视图相对于普通的表的优势主要包括以下几项。</p><ul><li>简单:使用视图的用户完全不需要关心后面对应的表的结构、关联条件和筛选条件,对用户来说已经是过滤好的复合条件的结果集。</li><li>安全:使用视图的用户只能访问他们被允许查询的结果集,对表的权限管理并不能限制到某个行某个列,但是通过视图就可以简单的实现。</li><li>数据独立:一旦视图的结构确定了,可以屏蔽表结构变化对用户的影响,源表增加列对视图没有影响;源表修改列名,则可以通过修改视图来解决,不会造成对访问者的影响。</li></ul><blockquote><p>更新视图中的数据时，同时会更新表中的数据，不建议做更新操作</p></blockquote><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h2><p><strong>创建视图</strong></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token operator">OR</span> <span class="token keyword">REPLACE</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">ALGORITHM</span> <span class="token operator">=</span> {<span class="token keyword">UNDEFINED</span><span class="token operator">|</span> <span class="token keyword">MERGE</span><span class="token operator">|</span> <span class="token keyword">TEMPTABLE</span>}<span class="token punctuation">]</span>
<span class="token keyword">VIEW</span> view_name <span class="token punctuation">[</span><span class="token punctuation">(</span>column_list<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">AS</span> select_statement
<span class="token punctuation">[</span><span class="token keyword">WITH</span> <span class="token punctuation">[</span><span class="token keyword">CASCADED</span> <span class="token operator">|</span> <span class="token keyword">LOCAL</span><span class="token punctuation">]</span> <span class="token keyword">CHECK</span> <span class="token keyword">OPTION</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>修改视图</strong></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token punctuation">[</span><span class="token keyword">ALGORITHM</span> <span class="token operator">=</span> {<span class="token keyword">UNDEFINED</span><span class="token operator">|</span> <span class="token keyword">MERGE</span> <span class="token operator">|</span><span class="token keyword">TEMPTABLE</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token keyword">VIEW</span> view_name <span class="token punctuation">[</span><span class="token punctuation">(</span>column_list<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">AS</span> select_statement
<span class="token punctuation">[</span><span class="token keyword">WITH</span> <span class="token punctuation">[</span><span class="token keyword">CASCADED</span><span class="token operator">|</span> <span class="token keyword">LOCAL</span><span class="token punctuation">]</span> <span class="token keyword">CHECK</span> <span class="token keyword">OPTION</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>WITH [CASCADED | LOCAL] CHECK OPTION决定了是否允许更新数据使记录不再满足视图的条件。 LOCAL :只要 满足本规图的条件就可以更新。 CASCADED :必须满足所有针对该视图的所有视图的条件才可以更新.</p></blockquote><p><strong>查看视图</strong></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">view</span> view_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>删除视图</strong></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> view_ name<span class="token punctuation">[</span>，view_ name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token keyword">RESTRICT</span> <span class="token operator">|</span> <span class="token keyword">CASCADE</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="存储过程和函数" tabindex="-1"><a class="header-anchor" href="#存储过程和函数"><span>存储过程和函数</span></a></h1><p>存储过程和函数是事先经过编译并存储在数据库中的一段SQL语句的集合,调用存储过程和函数可以简化应用开发人员的很多工作,减少数据在数据库和应用服务器之间的传输,对于提高数据处理的效率是有好处的。 存储过程和函数的区别在于：函数必须有返回值,而存储过程没有。</p><h2 id="创建存储过程" tabindex="-1"><a class="header-anchor" href="#创建存储过程"><span>创建存储过程</span></a></h2><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> procedure_name <span class="token punctuation">(</span> <span class="token punctuation">[</span>proc_parameter<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>
<span class="token keyword">begin</span> 
<span class="token comment">-- SQL语句</span>
<span class="token keyword">end</span> ；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">delimiter</span> $

<span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">begin</span>
<span class="token keyword">select</span> <span class="token string">&#39;Hello Mysq1&#39;</span> ；
<span class="token keyword">end</span>$

<span class="token keyword">delimiter</span> ；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>delimiter关键字用来声明SQL语句的分隔符,用来告诉MySQL解释器该段命令是否已经结束了. mysq|是否可以执行了。默认情况下, delimiter是分号。在命令行客户端中, 如果有一行命令以分号结束 ,那么回车后, mysq将会执行该命令。</p></blockquote><h2 id="调用存储过程" tabindex="-1"><a class="header-anchor" href="#调用存储过程"><span>调用存储过程</span></a></h2><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">call</span> procedure_name<span class="token punctuation">(</span> <span class="token punctuation">[</span>proc_parameter<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="查看存储过程" tabindex="-1"><a class="header-anchor" href="#查看存储过程"><span>查看存储过程</span></a></h2><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 查询db_ name数据库中的所有的存储过程</span>
<span class="token keyword">select</span> name <span class="token keyword">from</span> mysq1<span class="token punctuation">.</span><span class="token keyword">proc</span> <span class="token keyword">where</span> db<span class="token operator">=</span><span class="token string">&#39;db_ name&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 查询存储过程的状态信息</span>
<span class="token keyword">show</span> <span class="token keyword">procedure</span> <span class="token keyword">status</span> <span class="token punctuation">;</span>
<span class="token comment">-- 查询某个存储过程的定义</span>
<span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">procedure</span> test<span class="token punctuation">.</span>pro_test1  <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="删除存储过程" tabindex="-1"><a class="header-anchor" href="#删除存储过程"><span>删除存储过程</span></a></h2><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">procedure</span> procedure_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="语法-1" tabindex="-1"><a class="header-anchor" href="#语法-1"><span>语法</span></a></h2><p>存储过程是可以编程的，这意味着可以使用变量、表达式、控制结构等来完成比较复杂的功能。</p><h3 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h3><p>使用DECLARE声明一个变量，该变量scope只能在BEGIN ... END 块中：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">declare</span> var_name<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token keyword">type</span> <span class="token punctuation">[</span><span class="token keyword">default</span> <span class="token keyword">value</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> test1 <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
    <span class="token keyword">DECLARE</span> num <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">-- 声明变量</span>
    <span class="token keyword">SELECT</span> num<span class="token punctuation">;</span>
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span>  <span class="token keyword">PROCEDURE</span> test2<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span> 
    <span class="token keyword">DECLARE</span> num <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">10</span><span class="token punctuation">;</span> 
    <span class="token keyword">SELECT</span> <span class="token number">11</span> <span class="token keyword">INTO</span> num <span class="token punctuation">;</span> <span class="token comment">-- 将查询到的数据填充到变量中</span>
    <span class="token keyword">SELECT</span> num<span class="token punctuation">;</span>
<span class="token keyword">END</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span>  <span class="token keyword">PROCEDURE</span> test2<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span> 
    <span class="token keyword">DECLARE</span> num <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">10</span><span class="token punctuation">;</span> 
    <span class="token keyword">set</span> num<span class="token operator">=</span><span class="token number">1000</span> <span class="token punctuation">;</span> <span class="token comment">-- 设置变量</span>
    <span class="token keyword">SELECT</span> num<span class="token punctuation">;</span>
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="if条件判断" tabindex="-1"><a class="header-anchor" href="#if条件判断"><span>if条件判断</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> test3 <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
    <span class="token keyword">DECLARE</span> num <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">175</span><span class="token punctuation">;</span>
    <span class="token keyword">DECLARE</span> content <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">IF</span> num <span class="token operator">&gt;</span> <span class="token number">180</span> <span class="token keyword">THEN</span>
        <span class="token keyword">SET</span> content <span class="token operator">=</span> <span class="token string">&#39;high&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">ELSEIF</span> num <span class="token operator">&gt;</span> <span class="token number">170</span> <span class="token keyword">THEN</span>
        <span class="token keyword">SET</span> content <span class="token operator">=</span> <span class="token string">&#39;middle&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">ELSE</span>
        <span class="token keyword">SET</span> content <span class="token operator">=</span> <span class="token string">&#39;low&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>

    <span class="token keyword">SELECT</span> content<span class="token punctuation">;</span>
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="传递参数" tabindex="-1"><a class="header-anchor" href="#传递参数"><span>传递参数</span></a></h3><ul><li>IN: 表示输入参数</li><li>OUT：表示输出参数</li><li><code>INOUT</code>: 即可用作输入参数，又可以用作输出参数</li></ul><p>输入参数：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> test4 <span class="token punctuation">(</span><span class="token operator">in</span> num <span class="token keyword">INT</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
    <span class="token keyword">DECLARE</span> content <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">IF</span> num <span class="token operator">&gt;</span> <span class="token number">180</span> <span class="token keyword">THEN</span>
        <span class="token keyword">SET</span> content <span class="token operator">=</span> <span class="token string">&#39;high&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">ELSEIF</span> num <span class="token operator">&gt;</span> <span class="token number">170</span> <span class="token keyword">THEN</span>
        <span class="token keyword">SET</span> content <span class="token operator">=</span> <span class="token string">&#39;middle&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">ELSE</span>
        <span class="token keyword">SET</span> content <span class="token operator">=</span> <span class="token string">&#39;low&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>

    <span class="token keyword">SELECT</span> content<span class="token punctuation">;</span>
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出参数：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> test5 <span class="token punctuation">(</span><span class="token operator">in</span> num <span class="token keyword">INT</span><span class="token punctuation">,</span><span class="token keyword">out</span> content <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
    <span class="token keyword">IF</span> num <span class="token operator">&gt;</span> <span class="token number">180</span> <span class="token keyword">THEN</span>
        <span class="token keyword">SET</span> content <span class="token operator">=</span> <span class="token string">&#39;high&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">ELSEIF</span> num <span class="token operator">&gt;</span> <span class="token number">170</span> <span class="token keyword">THEN</span>
        <span class="token keyword">SET</span> content <span class="token operator">=</span> <span class="token string">&#39;middle&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">ELSE</span>
        <span class="token keyword">SET</span> content <span class="token operator">=</span> <span class="token string">&#39;low&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>
<span class="token keyword">END</span>

<span class="token keyword">CALL</span> test5<span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">,</span><span class="token variable">@content</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 调用 @表示会话变量 @@定义系统变量</span>
<span class="token keyword">SELECT</span> <span class="token variable">@content</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用了输出参数之后，我们就不需要使用select 语句来输出结果了。</p></blockquote><h3 id="case结构" tabindex="-1"><a class="header-anchor" href="#case结构"><span>case结构</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 方式一</span>
<span class="token keyword">CASE</span> case_value
<span class="token keyword">WHEN</span> when_value <span class="token keyword">THEN</span> statement
<span class="token punctuation">[</span><span class="token keyword">WHEN</span> when_value <span class="token keyword">THEN</span> statement<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token keyword">ELSE</span> statement<span class="token punctuation">]</span>
<span class="token keyword">END</span> <span class="token keyword">CASE</span> <span class="token punctuation">;</span>
<span class="token comment">-- 方式二</span>
<span class="token keyword">CASE</span>
<span class="token keyword">WHEN</span> condition <span class="token keyword">THEN</span> statement
<span class="token punctuation">[</span><span class="token keyword">WHEN</span> condition <span class="token keyword">THEN</span> statement<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token keyword">ELSE</span> statement<span class="token punctuation">]</span>
<span class="token keyword">END</span> <span class="token keyword">CASE</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">PROCEDURE</span> test6<span class="token punctuation">(</span><span class="token operator">in</span> num <span class="token keyword">INT</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
	<span class="token keyword">declare</span> content <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
	<span class="token keyword">CASE</span> num
		<span class="token keyword">when</span> <span class="token number">1</span> <span class="token keyword">then</span> <span class="token keyword">SET</span> content<span class="token operator">=</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">;</span>
		<span class="token keyword">when</span> <span class="token number">2</span> <span class="token keyword">then</span> <span class="token keyword">SET</span> content<span class="token operator">=</span><span class="token string">&#39;two&#39;</span><span class="token punctuation">;</span>
		<span class="token keyword">ELSE</span> <span class="token keyword">SET</span> content<span class="token operator">=</span><span class="token string">&#39;hhh&#39;</span><span class="token punctuation">;</span>
	<span class="token keyword">END</span> <span class="token keyword">CASE</span><span class="token punctuation">;</span>
	<span class="token keyword">SELECT</span> content<span class="token punctuation">;</span>
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="while循环" tabindex="-1"><a class="header-anchor" href="#while循环"><span>while循环</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">PROCEDURE</span> test7<span class="token punctuation">(</span><span class="token operator">in</span> num <span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
	<span class="token keyword">DECLARE</span> total <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">WHILE</span> num <span class="token operator">&lt;</span><span class="token number">10</span> <span class="token keyword">DO</span> 
	 <span class="token keyword">SET</span> total<span class="token operator">=</span>total<span class="token operator">+</span>num<span class="token punctuation">;</span>
	 <span class="token keyword">set</span> num<span class="token operator">=</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span>
	<span class="token keyword">SELECT</span> total<span class="token punctuation">;</span>
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="repeat结构" tabindex="-1"><a class="header-anchor" href="#repeat结构"><span>repeat结构</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">PROCEDURE</span> test8<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
	<span class="token keyword">DECLARE</span> num <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">REPEAT</span> 
		<span class="token keyword">set</span> num<span class="token operator">=</span>num<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>
		UNTIL num<span class="token operator">&gt;</span><span class="token number">10</span> 
  <span class="token keyword">END</span> <span class="token keyword">REPEAT</span><span class="token punctuation">;</span>
	<span class="token keyword">SELECT</span> num<span class="token punctuation">;</span>
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="loop和leave语句" tabindex="-1"><a class="header-anchor" href="#loop和leave语句"><span>loop和leave语句</span></a></h3><p>loop是个死循环，需要leave退出：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">PROCEDURE</span> test9<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
 <span class="token keyword">DECLARE</span> num <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span><span class="token punctuation">;</span>
 tag1:<span class="token keyword">LOOP</span>
		<span class="token keyword">set</span> num<span class="token operator">=</span>num<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">IF</span> num<span class="token operator">&gt;</span><span class="token number">10</span> <span class="token keyword">THEN</span> 
			<span class="token keyword">LEAVE</span> tag1 <span class="token punctuation">;</span>
		<span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>
 <span class="token keyword">END</span> <span class="token keyword">LOOP</span> tag1<span class="token punctuation">;</span>

  <span class="token keyword">SELECT</span> num<span class="token punctuation">;</span>
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="游标" tabindex="-1"><a class="header-anchor" href="#游标"><span>游标</span></a></h2><p>游标是用来存储查询结果集的数据类型,在存储过程和函数中可以使用游标对结果集进行循环的处理。游标的使用包括游标的声明、OPEN、FETCH和CLOSE ,其语法分别如下：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 声明游标</span>
<span class="token keyword">DECLARE</span> cursor_name <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span> select_statement<span class="token punctuation">;</span>
<span class="token comment">-- 打开游标</span>
<span class="token keyword">OPEN</span> cursor_name
<span class="token comment">-- 获取游标</span>
<span class="token keyword">FETCH</span> cursor_name <span class="token keyword">INTO</span> var_name<span class="token punctuation">[</span><span class="token punctuation">,</span>var_name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment">-- 关闭游标</span>
<span class="token keyword">CLOSE</span>  cursor_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>简单使用</strong></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test11 <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">begin</span>
    <span class="token keyword">declare</span> e_id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">declare</span> e_name <span class="token keyword">varchar</span> <span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">declare</span> e_age <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">declare</span> e_salary <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token comment">-- 声明游标</span>
    <span class="token keyword">declare</span> emp_result <span class="token keyword">cursor</span> <span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
    <span class="token comment">-- 打开游标</span>
    <span class="token keyword">open</span> emp_result<span class="token punctuation">;</span>
    <span class="token comment">-- 获取游标</span>
    <span class="token keyword">fetch</span> emp_result <span class="token keyword">into</span> e_id<span class="token punctuation">,</span>e_name<span class="token punctuation">,</span>e_age<span class="token punctuation">,</span>e_salary<span class="token punctuation">;</span>
    
    <span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">&#39;id=&#39;</span><span class="token punctuation">,</span>e_ id<span class="token punctuation">,</span><span class="token string">&#39;, name=&#39;</span><span class="token punctuation">,</span>e_name<span class="token punctuation">,</span> <span class="token string">&#39;，age=&#39;</span><span class="token punctuation">,</span> e_age<span class="token punctuation">,</span> <span class="token string">&#39;，薪资为: &#39;</span><span class="token punctuation">,</span>e_salary<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">-- 关闭游标</span>
    <span class="token keyword">close</span> emp_result<span class="token punctuation">;</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们只获取了一行数据，如果做到类似java中的循环遍历呢，一种方法是声明count语句，然后循环。另外一种如下：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">begin</span>
    <span class="token keyword">declare</span> e_id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">declare</span> e_name <span class="token keyword">varchar</span> <span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">declare</span> e_age <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">declare</span> e_salary <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">declare</span> has <span class="token keyword">data</span> <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span>
    
    <span class="token keyword">declare</span> emp_result <span class="token keyword">cursor</span> <span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
    
    <span class="token keyword">DECLARE</span> <span class="token keyword">EXIT</span> <span class="token keyword">HANDLER</span> <span class="token keyword">FOR</span> <span class="token operator">NOT</span> FOUND <span class="token keyword">set</span> has_data<span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>
    <span class="token keyword">open</span> emp_result<span class="token punctuation">;</span>
    <span class="token keyword">repeat</span>
        <span class="token keyword">fetch</span> emp_result <span class="token keyword">into</span> e_id<span class="token punctuation">,</span>e_name<span class="token punctuation">,</span>e_age<span class="token punctuation">,</span>e_salary<span class="token punctuation">;</span>
        <span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">&#39;id=&#39;</span><span class="token punctuation">,</span>e_id<span class="token punctuation">,</span><span class="token string">&#39;，name=&#39;</span> <span class="token punctuation">,</span>e_name<span class="token punctuation">,</span> <span class="token string">&#39;，age=&#39;</span><span class="token punctuation">,</span> e_age<span class="token punctuation">,</span> <span class="token string">&#39;，薪资为: &#39;</span> <span class="token punctuation">,</span>e_salary<span class="token punctuation">)</span><span class="token punctuation">;</span>
        until has_data <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">end</span> <span class="token keyword">repeat</span><span class="token punctuation">;</span>
    <span class="token keyword">close</span> emp_result<span class="token punctuation">;</span>
<span class="token keyword">end</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> function_name<span class="token punctuation">(</span><span class="token punctuation">[</span>param <span class="token keyword">type</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">RETURNS</span> <span class="token keyword">type</span>
<span class="token keyword">BEGIN</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">END</span> <span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">function</span> fun1 <span class="token punctuation">(</span>countryId <span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token keyword">RETURNS</span> <span class="token keyword">int</span>
<span class="token keyword">begin</span>
    <span class="token keyword">declare</span> cnum <span class="token keyword">int</span> <span class="token punctuation">;</span>
    <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> cnum <span class="token keyword">from</span> city <span class="token keyword">where</span> country_id <span class="token operator">=</span> countryId<span class="token punctuation">;</span>
    <span class="token keyword">return</span> cnum <span class="token punctuation">;</span>
<span class="token keyword">end</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="触发器" tabindex="-1"><a class="header-anchor" href="#触发器"><span>触发器</span></a></h1><p>在insert/update/delete之前或之后,触发并执行触发器中定义的SQL语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性,日志记录,数据校验等操作。</p><p>使用别名OLD和NEW来引用触发器中发生变化的记录内容,这与其他的数据库是相似的。现在触发器还只支持行级触发,不支持语句级触发。</p><table><thead><tr><th>触发器类型</th><th>NEW和OLD</th></tr></thead><tbody><tr><td>insert</td><td>new 表示新增的数据</td></tr><tr><td>update</td><td>old表示修改之前的，new表示修改之后的</td></tr><tr><td>delete</td><td>old表示删除的数据</td></tr></tbody></table><h2 id="创建触发器" tabindex="-1"><a class="header-anchor" href="#创建触发器"><span>创建触发器</span></a></h2><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">trigger</span> trigger_name
before<span class="token operator">/</span><span class="token keyword">after</span> <span class="token keyword">insert</span><span class="token operator">/</span><span class="token keyword">update</span><span class="token operator">/</span><span class="token keyword">delete</span>
<span class="token keyword">on</span> tb1_name
<span class="token punctuation">[</span> <span class="token keyword">for each row</span> <span class="token punctuation">]</span>
trigger_stmt <span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> double_salary
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">AFTER</span> <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> tb_emp6
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">FOR EACH ROW</span>
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_emp7
    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>NEW<span class="token punctuation">.</span>id<span class="token punctuation">,</span>NEW<span class="token punctuation">.</span>name<span class="token punctuation">,</span>deptId<span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>NEW<span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="删除触发器" tabindex="-1"><a class="header-anchor" href="#删除触发器"><span>删除触发器</span></a></h2><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">trigger</span> trigger_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="查看触发器" tabindex="-1"><a class="header-anchor" href="#查看触发器"><span>查看触发器</span></a></h2><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">trigger</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="mysql体系" tabindex="-1"><a class="header-anchor" href="#mysql体系"><span>mysql体系</span></a></h1><ul><li><p>连接层 最上层是一些客户端和链接服务,包含本地sock通信和大多数基于客户端/服务端工具实现的类似于TCP/IP的通信。主要完成一些类似于连接处理、授权认证相关的安全方案。在该层上引入了线程池的概念,为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</p></li><li><p>服务层 第二层架构主要完成大多数的核心服务功能,如SQL接口,并完成缓存的查询, SQL的分析和优化,部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如过程、函数等。在该层,服务器会解析查询并创建相应的内部解析树,并对其完成相应的优化如确定表的查询的顺序,是否利用索引等,最后生成相应的执行操作。如果是select语句,服务器还会查询内部的缓存,如果缓存空间足够大,这样在解决大量读操作的环境中能够很好的提升系统的性能。</p></li><li><p>引擎层 存储引擎层，存储引擎真正的负责了<code>MySQL</code>中数据的存储和提取.服务器通过<code>API</code>和存储引擎进行通信。不同的存储引擎具有不同的功能.这样我们可以根据自己的需要,来选取合适的存储引擎。</p></li><li><p>存储层 数据存储层，主要是将数据存储在文件系统之上,并完成与存储引擎的交互。和其他数据库相比, <code>MySQL</code>有点与众不同,它的架构可以在多种不同场景中应用并发挥良好作用。主要体现在存储引擎上,插件式的存储引擎架构,将查询处理和其他的系统任务以及数据的存储提取分离。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。</p></li></ul><h2 id="存储引擎" tabindex="-1"><a class="header-anchor" href="#存储引擎"><span>存储引擎</span></a></h2><p>存储引擎就是存储数据,建立索引,更新查询数据等等技术的实现方式。存储引擎是基于表的,而不是基于库的。所以存储引擎也可被称为表 类型。</p><p>Oracle , Sq|Server等数据库只有一种存储引擎。 <code>MySQL</code>提供了插件式的存储引擎架构。所以<code>MySQL</code>存在多种存储引擎,可以根据需要使用相应引擎,或者编写存储引擎。</p><p><code>MySQL5.0</code>支持的存储引擎包含: <code>InnoDB</code> 、<code>MyISAM</code>、<code>BDB</code>、 MEMORY、 MERGE、 EXAMPLE、 <code>NDB Cluster</code>、ARCHIVE、 <code>CSV</code><code>BLACKHOLE</code>、FEDERATED等 ,其中<code>InnoDB</code>和<code>BDB</code>提供事务安全表,其他存储引擎是非事务安全表。</p><p>可以通过指定<code>show engines</code> ,来查询当前数据库支持的存储引擎:</p><figure><img src="`+p+`" alt="image-20210830203726044" tabindex="0" loading="lazy"><figcaption>image-20210830203726044</figcaption></figure><p>创建新表时如果不指定存储引擎,那么系统就会使用默认的存储引擎, MySQL5.5之前的默认存储引擎是MyISAM , 5.5之后就改为了InnoDB。查看Mysq|数据库默认的存储引擎,指令:</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">like</span> <span class="token string">&#39;%storage_engine%&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+t+'" alt="image-20210830204112760" tabindex="0" loading="lazy"><figcaption>image-20210830204112760</figcaption></figure><h3 id="存储方式" tabindex="-1"><a class="header-anchor" href="#存储方式"><span><strong>存储方式</strong></span></a></h3><p>InnoDB 存储表和索引有以下两种方式 ：</p><ul><li><p>使用共享表空间存储， 这种方式创建的表的表结构保存在.frm文件中， 数据和索引保存在 innodb_data_home_dir 和 innodb_data_file_path定义的表空间中，可以是多个文件。</p></li><li><p>使用多表空间存储， 这种方式创建的表的表结构仍然存在 .frm 文件中，但是每个表的数据和索引单独保存在 .ibd 中。</p></li></ul><p>每个MyISAM在磁盘上存储成3个文件，其文件名都和表名相同，但拓展名分别是 ：</p><ul><li><p>.frm (存储表定义)；</p></li><li><p>.MYD(MYData , 存储数据)；</p></li><li><p>.MYI(MYIndex , 存储索引)；</p></li></ul><h3 id="memory" tabindex="-1"><a class="header-anchor" href="#memory"><span>MEMORY</span></a></h3><p>​Memory存储引擎将表的数据存放在内存中。每个MEMORY表实际对应一个磁盘文件，格式是.frm ，该文件中只存储表的结构，而其数据文件，都是存储在内存中，这样有利于数据的快速处理，提高整个表的效率。MEMORY 类型的表访问非常地快，因为他的数据是存放在内存中的，并且默认使用HASH索引 ， 但是服务一旦关闭，表中的数据就会丢失。</p><h3 id="merge" tabindex="-1"><a class="header-anchor" href="#merge"><span>MERGE</span></a></h3><p>​MERGE存储引擎是一组MyISAM表的组合，这些MyISAM表必须结构完全相同，MERGE表本身并没有存储数据，对MERGE类型的表可以进行查询、更新、删除操作，这些操作实际上是对内部的MyISAM表进行的。</p><p>​对于MERGE类型表的插入操作，是通过INSERT_METHOD子句定义插入的表，可以有3个不同的值，使用FIRST 或 LAST 值使得插入操作被相应地作用在第一或者最后一个表上，不定义这个子句或者定义为NO，表示不能对这个MERGE表执行插入操作。</p><p>​可以对MERGE表进行DROP操作，但是这个操作只是删除MERGE表的定义，对内部的表是没有任何影响的。</p>',123),c=[o];function i(d,r){return n(),a("div",null,c)}const m=s(l,[["render",i],["__file","mysql高级.html.vue"]]),v=JSON.parse('{"path":"/gudie/mysql%E9%AB%98%E7%BA%A7.html","title":"安装","lang":"zh-CN","frontmatter":{"description":"安装 安装过程中，必须初始化data目录以及系统数据库。rpm是自动完成的，win和linux的压缩包则需要开发者自己操作。 安装过程中会生成临时密码，密码存储在 ```/var/log/mysqld.log``。` rpm安装 linux压缩包安装 window安装 --initialize-insecure: 不生成初始化密码 --initiali...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/gudie/mysql%E9%AB%98%E7%BA%A7.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"安装"}],["meta",{"property":"og:description","content":"安装 安装过程中，必须初始化data目录以及系统数据库。rpm是自动完成的，win和linux的压缩包则需要开发者自己操作。 安装过程中会生成临时密码，密码存储在 ```/var/log/mysqld.log``。` rpm安装 linux压缩包安装 window安装 --initialize-insecure: 不生成初始化密码 --initiali..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-16T13:02:07.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:modified_time","content":"2024-04-16T13:02:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"安装\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-16T13:02:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"rpm安装","slug":"rpm安装","link":"#rpm安装","children":[]},{"level":2,"title":"linux压缩包安装","slug":"linux压缩包安装","link":"#linux压缩包安装","children":[]},{"level":2,"title":"window安装","slug":"window安装","link":"#window安装","children":[]},{"level":2,"title":"安装后","slug":"安装后","link":"#安装后","children":[]},{"level":2,"title":"外键约束","slug":"外键约束","link":"#外键约束","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}]},{"level":2,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":2,"title":"创建存储过程","slug":"创建存储过程","link":"#创建存储过程","children":[]},{"level":2,"title":"调用存储过程","slug":"调用存储过程","link":"#调用存储过程","children":[]},{"level":2,"title":"查看存储过程","slug":"查看存储过程","link":"#查看存储过程","children":[]},{"level":2,"title":"删除存储过程","slug":"删除存储过程","link":"#删除存储过程","children":[]},{"level":2,"title":"语法","slug":"语法-1","link":"#语法-1","children":[{"level":3,"title":"变量","slug":"变量","link":"#变量","children":[]},{"level":3,"title":"if条件判断","slug":"if条件判断","link":"#if条件判断","children":[]},{"level":3,"title":"传递参数","slug":"传递参数","link":"#传递参数","children":[]},{"level":3,"title":"case结构","slug":"case结构","link":"#case结构","children":[]},{"level":3,"title":"while循环","slug":"while循环","link":"#while循环","children":[]},{"level":3,"title":"repeat结构","slug":"repeat结构","link":"#repeat结构","children":[]},{"level":3,"title":"loop和leave语句","slug":"loop和leave语句","link":"#loop和leave语句","children":[]}]},{"level":2,"title":"游标","slug":"游标","link":"#游标","children":[]},{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[]},{"level":2,"title":"创建触发器","slug":"创建触发器","link":"#创建触发器","children":[]},{"level":2,"title":"删除触发器","slug":"删除触发器","link":"#删除触发器","children":[]},{"level":2,"title":"查看触发器","slug":"查看触发器","link":"#查看触发器","children":[]},{"level":2,"title":"存储引擎","slug":"存储引擎","link":"#存储引擎","children":[{"level":3,"title":"存储方式","slug":"存储方式","link":"#存储方式","children":[]},{"level":3,"title":"MEMORY","slug":"memory","link":"#memory","children":[]},{"level":3,"title":"MERGE","slug":"merge","link":"#merge","children":[]}]}],"git":{"createdTime":1713272527000,"updatedTime":1713272527000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":1}]},"readingTime":{"minutes":12.84,"words":3853},"filePathRelative":"gudie/mysql高级.md","localizedDate":"2024年4月16日","excerpt":"\\n<ul>\\n<li>安装过程中，必须初始化data目录以及系统数据库。rpm是自动完成的，win和linux的压缩包则需要开发者自己操作。</li>\\n<li>安装过程中会生成临时密码，密码存储在 ```/var/log/mysqld.log``。`</li>\\n</ul>\\n<h2>rpm安装</h2>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token comment\\"># 1.下载yum仓库，并安装仓库</span>\\nshell<span class=\\"token operator\\">&gt;</span> <span class=\\"token function\\">wget</span> <span class=\\"token parameter variable\\">-i</span> <span class=\\"token parameter variable\\">-c</span> http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm\\nshell<span class=\\"token operator\\">&gt;</span> yum <span class=\\"token parameter variable\\">-y</span> <span class=\\"token function\\">install</span> mysql57-community-release-el7-10.noarch.rpm\\n<span class=\\"token comment\\"># 2.安装mysql</span>\\nshell<span class=\\"token operator\\">&gt;</span> yum <span class=\\"token parameter variable\\">-y</span> <span class=\\"token function\\">install</span> mysql-community-server\\n<span class=\\"token comment\\"># 3.启动</span>\\nshell<span class=\\"token operator\\">&gt;</span> systemctl start mysqld.service\\n</code></pre></div>","autoDesc":true}');export{m as comp,v as data};
