import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,a as t}from"./app-Brzzz3sI.js";const e={},p=t(`<h2 id="ioc容器和beans" tabindex="-1"><a class="header-anchor" href="#ioc容器和beans"><span>IoC容器和beans</span></a></h2><p>本章介绍Spring Framework实现控制反转（IoC）的原理。 IoC也被称为依赖注入（DI）。通过构造函数、工厂方法创建对象，对象被创建后设置属性等方法构建依赖的过程。容器在创建bean时会注入这些依赖关系。这个过程从根本上来说是相反的，因此名为控制反转（IoC），bean本身通过使用类的直接构造或诸如Service Locator模式之类的机制来控制其依赖关系的实例化。</p><p><code>org.springframework.beans</code>和<code>org.springframework.context</code>包是Spring Framework的IoC容器的基础。<code>BeanFactory</code>接口提供了一种能够管理任何类型对象的高级配置机制。 <code>ApplicationContext</code>是<code>BeanFactory</code>的一个子接口，它增加了与Spring的AOP功能的集成、消息资源处理（用于国际化）、事件发布以及Web应用程序上下文功能。</p><p>简而言之，<code>BeanFactory</code>提供了配置框架和基本功能，而<code>ApplicationContext</code>添加了更多的企业特定功能。 <code>ApplicationContext</code>是<code>BeanFactory</code>的一个完整的超集。</p><p>在Spring中，构成应用程序主干和由Spring IoC容器管理的对象称为bean。bean是一个由Spring IoC实例化，组装并被容器管理的对象。 Bean和它们之间的依赖关系反映在容器使用的配置元数据中。</p><h2 id="容器概览" tabindex="-1"><a class="header-anchor" href="#容器概览"><span>容器概览</span></a></h2><p>接口<code>org.springframework.context.ApplicationContext</code>表示Spring IoC容器，并负责实例化，配置和组装上述<code>Bean</code>。容器通过读取配置元数据获取有关要实例化，配置和组装的对象的指示信息。 配置元数据用可以用<code>XML</code>，<code>Java注释</code>或<code>Java代码</code>表示，它表示组成应用程序的对象以及这些对象之间的相互依赖关系。</p><p>Spring提供了几个<code>ApplicationContext</code>接口的实现。 在独立应用程序中，通常创建<code>ClassPathXmlApplicationContext</code>或<code>FileSystemXmlApplicationContext</code>的实例。虽然XML是用于定义配置元数据的传统格式，但您可以通过提供少量的XML配置来指示容器使用Java注释或代码作为元数据格式，以声明的方式支持其他元数据格式。</p><p>在大多数应用场景中，用户不需要显式的实例化<code>Spring IoC</code>容器的一个或多个实例。例如，在Web应用程序场景中，应用程序的<code>web.xml</code>文件中的简单八行就可以构建整个上下文。</p><h3 id="配置元数据" tabindex="-1"><a class="header-anchor" href="#配置元数据"><span>配置元数据</span></a></h3><p>配置元数据告诉<code>Spring</code>容器实例化，配置和组装对象。传统上，配置元数据是以简单直观的<code>XML</code>格式提供的，这是本章的大部分内容用来传达Spring IoC容器的关键概念和功能。此外还有其他的配置方式：</p><ul><li>基于注解配置：Spring 2.5引入了对基于注释配置元数据的支持。</li><li>基于java代码配置：从Spring 3.0开始，<code>Spring Java Config</code>项目提供的许多功能成为核心Spring Framework的一部分。 因此，您可以使用Java而不是XML文件来定义应用程序类外部的Bean。 要使用这些新功能，请参阅@Configuration，@Bean，@Import和@DependsOn注释。</li></ul><p>基于XML的配置元数据将这些bean配置为顶级<code>&lt;beans/&gt;</code>元素内的<code>&lt;bean/&gt;</code>元素。Java配置通常在<code>@Configuration</code>类中使用<code>@Bean</code>注释的方法。</p><p>这些<code>bean</code>定义对应于组成应用程序的实际对象。通常，您可以定义服务层对象，数据访问对象（DAO），Struts Action实例等表示对象，Hibernate SessionFactories等基础结构对象，JMS队列等。通常，不会在容器中配置细粒度的域对象，因为创建和加载域对象通常是DAO和业务逻辑的责任。但是，您可以使用<code>Spring</code>与<code>AspectJ</code>的集成来配置在IoC容器控制之外创建的对象。参考 <code>Using AspectJ to dependency-inject domain objects with Spring</code></p><p>以下示例显示了基于XML的配置元数据的基本结构：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- more bean definitions go here --&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>id</code>属性是一个字符串，用于标识单个<code>bean</code>定义。 <code>class</code>属性定义了<code>bean</code>的类型并使用完全限定的类名。</p><h3 id="初始化容器" tabindex="-1"><a class="header-anchor" href="#初始化容器"><span>初始化容器</span></a></h3><p>实例化<code>Spring IoC</code>容器很简单。 提供给<code>ApplicationContext</code>构造函数的位置路径（实际上是资源字符串），它允许容器从各种外部资源（例如本地文件系统，Java CLASSPATH等等）加载配置元数据。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;services.xml&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;daos.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以下示例显示服务层对象（services.xml）配置文件：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- services --&gt;</span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>petStore<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.samples.jpetstore.services.PetStoreServiceImpl<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itemDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itemDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token comment">&lt;!-- additional collaborators and configuration for this bean go here --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- more bean definitions for services go here --&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下示例显示数据访问对象daos.xml文件：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountDao<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.samples.jpetstore.dao.jpa.JpaAccountDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- additional collaborators and configuration for this bean go here --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itemDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.samples.jpetstore.dao.jpa.JpaItemDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- additional collaborators and configuration for this bean go here --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- more bean definitions for data access objects go here --&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在前面的示例中，服务层由<code>PetStoreServiceImpl</code>类和两个类型为<code>JpaAccountDao</code>和<code>JpaItemDao</code>的数据访问对象（基于JPA对象/关系映射标准）组成。 属性名称元素引用了<code>JavaBean</code>属性的名称，<code>ref</code>元素引用另一个<code>bean</code>定义的名称。 <code>id</code>和<code>ref</code>元素之间的这种联系表示协作对象之间的依赖关系。</p><h4 id="编写基于xml的配置元数据" tabindex="-1"><a class="header-anchor" href="#编写基于xml的配置元数据"><span>编写基于XML的配置元数据</span></a></h4><p>让<code>bean</code>定义跨越多个<code>XML</code>文件可能很有用。 通常，每个单独的<code>XML</code>配置文件都代表了架构中的逻辑层或模块。您可以使用应用程序上下文构造函数从所有这些<code>XML</code>片段中加载<code>bean</code>定义。这个构造函数有多个资源位置，如前一节所示。 或者，使用一个或多个<code>&lt;import /&gt;</code>元素从另一个或多个文件加载<code>bean</code>定义。 例如：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>services.xml<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>resources/messageSource.xml<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/resources/themeSource.xml<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bean1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bean2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在前面的示例中，从三个文件加载外部<code>bean</code>定义：<code>services.xml</code>，<code>messageSource.xml</code>和<code>themeSource.xml</code>。 所有位置路径都与导入的定义文件相关，因此<code>services.xml</code>必须位于与导入文件相同的目录或类路径位置，而<code>messageSource.xml</code>和<code>themeSource.xml</code>必须位于<code>resource</code>位置下面。正如你所看到的，一个前导斜线被忽略，但是<em>鉴于这些路径是相对的</em>，最好不要使用斜线。 根据Spring架构，正在导入的文件（包括顶层<code>&lt;beans/&gt;</code>元素）的内容必须是有效的<code>XML </code>bean定义。</p><blockquote><p>可能但不推荐使用相对的<code>../</code>路径引用父目录中的文件。这样做会创建对当前应用程序外部的文件的依赖关系。特别是，不建议将此引用用于<code>classpath：</code>（例如<code>classpath：../ services.xml</code>），其中运行时解析过程选择“最近”的类路径根，然后查看其父目录。类路径配置更改可能会导致选择不同的、不正确的目录。</p></blockquote><p><code>import</code>指令是由<code>bean</code>名称空间本身提供的一项功能。除了普通<code>bean</code>定义以外的其他配置特性可用于由Spring提供的一系列<code>XML</code>名称空间，例如， <code>context</code>和<code>util</code>命名空间。</p><h3 id="使用容器" tabindex="-1"><a class="header-anchor" href="#使用容器"><span>使用容器</span></a></h3><p><code>ApplicationContext</code>是高级工厂的接口，能够维护不同<code>Bean</code>及其依赖项的注册表。 使用方法<code>T getBean(String name，Class &lt;T&gt; requiredType)</code>，可以检索bean的实例。</p><p><code>ApplicationContext</code>使您可以读取<code>bean</code>实例并按如下方式访问它们：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// create and configure beans</span>
<span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;services.xml&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;daos.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// retrieve configured instance</span>
<span class="token class-name">PetStoreService</span> service <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;petStore&quot;</span><span class="token punctuation">,</span> <span class="token class-name">PetStoreService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// use configured instance</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getUsernameList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ApplicationContext</code>接口还有其他一些检索<code>bean</code>的方法，但理想情况下，应用程序代码不应该使用它们。 事实上，你的应用程序代码根本不应该调用<code>getBean</code>方法。 例如，<code>Spring</code>与<code>Web</code>框架的集成为各种<code>Web</code>框架组件（如控制器和JSF管理的Bean）提供了依赖注入，允许您通过元数据（例如自动装配注释）声明对特定<code>Bean</code>的依赖关系。</p><h2 id="bean概述" tabindex="-1"><a class="header-anchor" href="#bean概述"><span>Bean概述</span></a></h2><p><code>Spring IoC</code>容器管理一个或多个<code>bean</code>。 这些<code>bean</code>是使用您提供给容器的配置元数据创建的，例如，以<code>XML &lt;bean/&gt;</code>定义的形式。</p><p>在容器本身中，这些<code>bean</code>定义表示为<code>BeanDefinition</code>对象，其中包含以下元数据：</p><ul><li>包限定的类名称：通常是所定义的<code>bean</code>的实际实现类。</li><li><code>Bean</code>行为配置元素，它说明<code>bean</code>在容器中的行为（范围，生命周期,回调等等）。</li><li>引用其他<code>bean</code>为其工作的<code>bean</code>; 这些引用也称为协作者或依赖关系。</li><li>在新创建的对象中设置的其他配置属性，例如，用于管理连接池的<code>Bean</code>的连接数量或池的大小限制。</li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>class</td><td>实例化bean</td></tr><tr><td>name</td><td>命名bean</td></tr><tr><td>scope</td><td>Bean范围</td></tr><tr><td>constructor arguments</td><td>依赖注入</td></tr><tr><td>properties</td><td>依赖注入</td></tr><tr><td>autowiring mode</td><td>自动装配依赖关系</td></tr><tr><td>lazy-initialization mode</td><td>懒惰初始化bean</td></tr><tr><td>initialization method</td><td>初始化回调</td></tr><tr><td>destruction method</td><td>销毁回调</td></tr></tbody></table><p>除了包含有关如何创建特定<code>bean</code>的信息之外，<code>ApplicationContext</code>实现还允许用户注册在容器外部创建的现有对象。这是通过<code>getBeanFactory</code>方法访问<code>ApplicationContext</code>的<code>BeanFactory</code>来完成的，该方法返回<code>BeanFactory</code>实现的<code>DefaultListableBeanFactory</code>。 <code>DefaultListableBeanFactory</code>通过方法<code>registerSingleton</code>和<code>registerBeanDefinition</code>来支持这种注册。 但是，典型的应用程序应该只通过元数据来定义<code>bean</code>。</p><blockquote><p>Bean元数据和手动提供的单例实例需要尽早注册，以便容器在自动装配和其他自省步骤中正确推理它们。虽然重写现有的元数据和现有的单例实例在某种程度上受到支持，但在运行时注册新的Bean并未得到正式支持，并且可能导致并发访问异常或bean容器中的状态不一致。</p></blockquote><h3 id="命名bean" tabindex="-1"><a class="header-anchor" href="#命名bean"><span>命名bean</span></a></h3><p>每个<code>bean</code>都有一个或多个标识符。 这些标识符在托管<code>bean</code>的容器内必须是唯一的。一个<code>bean</code>通常只有一个标识符，但是如果它需要多个标识符，额外的标识符可以被认为是<code>别名</code>。</p><p>在基于XML的配置元数据中，您使用<code>id</code>和<code>name</code>属性来指定<code>bean</code>标识符。<code>id</code>属性允许你指定一个<code>id</code>。通常，这些名称是<code>字母数字</code>，但也可能包含特殊字符。如果要将别名引入到<code>bean</code>中，还可以在<code>name</code>属性中指定它们，并用逗号、分号或空格分隔。</p><p>您不需要为<code>bean</code>提供名称或标识。 如果没有显式提供名称或标识，容器为该<code>bean</code>生成一个唯一名称。但是，如果您想通过名称引用该<code>bean</code>，即通过使用<code>ref</code>元素或<code>Service Locator</code>样式查找，您必须提供一个名称。</p><p>在命名<code>bean</code>时使用标准<code>Java</code>约定作为实例名称。也就是说，<code>bean</code>名称以小写字母开头，并且以驼峰命名基础。 这样的名字的例子是<code>accountManager</code>，<code>accountService</code>，<code>userDao</code>，<code>loginController</code>等等。</p><h4 id="定义别名" tabindex="-1"><a class="header-anchor" href="#定义别名"><span>定义别名</span></a></h4><p>在bean定义本身中，可以通过使用由<code>id</code>属性指定的最多一个名称和<code>name</code>属性中的任意数量的其他名称的组合来为<code>bean</code>提供多个名称。 这些名称可以等同于同一个<code>bean</code>的别名，并且对于某些情况很有用，例如允许应用程序中的每个组件通过使用特定于该组件本身的<code>bean</code>名称来引用公共依赖项。</p><p>然而，指定<code>bean</code>实际定义的所有别名并不总是足够的。 有时候需要为其他地方定义的bean引入一个别名。 在大型系统中，通常是这种情况，其中配置分布在每个子系统中，每个子系统都有自己的一组对象定义。 在基于XML的配置元数据中，您可以使用<code>&lt;alias /&gt;</code>元素来完成此操作。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fromName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toName<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如，子系统A的配置元数据可以通过名称<code>subsystemA-dataSource</code>引用数据源。子系统B的配置元数据可以通过名称<code>subsystemB-dataSource</code>引用数据源。在编写使用这两个子系统的主应用程序时，主应用程序通过名称<code>myApp-dataSource</code>引用数据源。要让所有三个名称都引用您添加到MyApp配置元数据中的同一对象，请使用以下别名定义：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>subsystemA-dataSource<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>subsystemB-dataSource<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>subsystemA-dataSource<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myApp-dataSource<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，每个组件和主应用程序都可以通过一个唯一的名称来引用<code>dataSource</code>，并保证不会与任何其他定义冲突（有效地创建名称空间），但它们引用同一个<code>bean</code>。</p><blockquote><p>如果您正在使用Java配置，则可以使用@Bean注释来提供别名，请参阅使用@Bean注释以获取详细信息</p></blockquote><h3 id="实例化bean" tabindex="-1"><a class="header-anchor" href="#实例化bean"><span>实例化bean</span></a></h3><p><code>bean</code>定义本质上是创建一个或多个对象的配方。容器在被询问时查看命名<code>bean</code>的配方，并使用由该<code>bean</code>定义封装的配置元数据来创建（或获取）实际对象。</p><p>如果您使用基于XML的配置元数据，则可以指定要在<code>&lt;bean/&gt;</code>元素的<code>class</code>属性中实例化的对象的类型（或类）。这个类属性在内部是一个<code>BeanDefinition</code>实例的<code>Class</code>属性，通常是强制性的。您可以通过以下两种方式之一使用<code>Class</code>属性：</p><ul><li>通常，在容器通过反射性调用其构造函数直接创建<code>bean</code>的情况下，指定要构建的<code>bean</code>类，这与使用<code>new</code>运算符的Java代码有些相同。</li><li>指定静态工厂方法的实际类，那调用静态工厂方法以创建Bean。 从调用静态工厂方法返回的对象类型可以是完全相同的类或另一个类。</li></ul><blockquote><p>如果要为静态嵌套类配置一个<code>bean</code>定义，则必须使用嵌套类的二进制名称。例如，如果在<code>com.example</code>包中有一个名为<code>Foo</code>的类，并且此<code>Foo</code>类具有一个名为<code>Bar</code>的静态嵌套类，那么<code>bean</code>定义上<code>class</code>属性的值将是<code>com.example.Foo$Bar</code>,注意在名称中使用<code>$</code>字符将嵌套类名与外部类名分开</p></blockquote><h4 id="用构造函数实例化" tabindex="-1"><a class="header-anchor" href="#用构造函数实例化"><span>用构造函数实例化</span></a></h4><p>当您通过构造函数方法创建一个<code>bean</code>时，所有普通类都可以被Spring使用并兼容。也就是说，正在开发的类不需要实现任何特定的接口或以特定的方式编码。只需指定<code>bean</code>类就足够了。但是，根据您用于特定<code>bean</code>的IoC<code>类型</code>，您可能需要一个空参数的构造函数。</p><p><code>Spring IoC</code>容器几乎可以管理任何您想要管理的类。 大多数<code>Spring</code>用户更喜欢实际的<code>JavaBeans</code>，它只有一个默认的无参数构造函数，以及<code>setter</code>和<code>getter</code>。 您也可以在容器中使用更具异国情调的非Bean风格的类。例如，如果您需要使用绝对不符合<code>JavaBean</code>规范的传统连接池，<code>Spring</code>也可以管理它。 使用基于<code>XML</code>的配置元数据，您可以按如下方式指定您的<code>bean</code>类：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.ExampleBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>anotherExample<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.ExampleBeanTwo<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有关在构造对象后向参数提供参数（如果需要）和设置对象实例属性的机制的详细信息，请参阅注入依赖项。</p><h4 id="使用静态工厂方法实例化" tabindex="-1"><a class="header-anchor" href="#使用静态工厂方法实例化"><span>使用静态工厂方法实例化</span></a></h4><p>在定义一个使用静态工厂方法创建的<code>bean</code>时，可以使用<code>class</code>属性来指定包含静态工厂方法的类和名为<code>factory-method</code>的属性，以指定工厂方法本身的名称。你应该能够调用此方法（使用后面介绍的可选参数）并返回一个活动对象，随后将其视为通过构造函数创建的对象。 这种<code>bean</code>定义的一个用途是在传统代码中调用静态工厂。</p><p>以下<code>bean</code>定义指定将通过调用工厂方法来创建该<code>bean</code>。该定义没有指定返回对象的类型（类），而只指定了包含工厂方法的类。在这个例子中，<code>createInstance</code>方法必须是一个静态方法。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>clientService<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.ClientService<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>createInstance<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ClientService</span> clientService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">ClientService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ClientService</span> <span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> clientService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有关在从工厂返回对象之后向工厂方法提供（可选）参数和设置对象实例属性的机制的详细信息，请参阅依赖关系和详细配置。</p><h4 id="使用实例工厂方法实例化" tabindex="-1"><a class="header-anchor" href="#使用实例工厂方法实例化"><span>使用实例工厂方法实例化</span></a></h4><p>与通过静态工厂方法实例化类似，使用实例工厂方法从容器调用现有<code>bean</code>的非静态方法来创建新的<code>bean</code>。要使用此机制，请将类属性保留为空，并在<code>factory-bean</code>属性中指定当前（或父/祖代）容器中包含要调用以创建对象的实例方法的<code>bean</code>的名称。使用<code>factory-method</code>属性设置工厂方法本身的名称。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- the factory bean, which contains a method called createInstance() --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>serviceLocator<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.DefaultServiceLocator<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- inject any dependencies required by this locator bean --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- the bean to be created via the factory bean --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>clientService<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>serviceLocator<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>createClientServiceInstance<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultServiceLocator</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ClientService</span> clientService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ClientService</span> <span class="token function">createClientServiceInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> clientService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个工厂类也可以拥有多个工厂方法，如下所示：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>serviceLocator<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.DefaultServiceLocator<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- inject any dependencies required by this locator bean --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>clientService<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>serviceLocator<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>createClientServiceInstance<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountService<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>serviceLocator<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>createAccountServiceInstance<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultServiceLocator</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ClientService</span> clientService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">AccountService</span> accountService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccountServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ClientService</span> <span class="token function">createClientServiceInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> clientService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">AccountService</span> <span class="token function">createAccountServiceInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> accountService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方法表明，工厂bean本身可以通过依赖注入（DI）进行管理和配置。 详细信息请参阅依赖关系和配置。</p><h2 id="依赖" tabindex="-1"><a class="header-anchor" href="#依赖"><span>依赖</span></a></h2><h3 id="依赖注入" tabindex="-1"><a class="header-anchor" href="#依赖注入"><span>依赖注入</span></a></h3><h4 id="基于构造函数的依赖注入" tabindex="-1"><a class="header-anchor" href="#基于构造函数的依赖注入"><span>基于构造函数的依赖注入</span></a></h4><p>基于构造器的<code>DI</code>通过容器调用具有多个参数的构造函数完成，每个参数表示一个依赖项。 调用具有特定参数的静态工厂方法来构造<code>bean</code>和它几乎是等价的。以下示例显示了只能通过构造函数注入进行依赖注入的类。请注意，这个类没有什么特别之处，它是一个<code>POJO</code>，它不依赖于容器特定的接口，基类或注释:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleMovieLister</span> <span class="token punctuation">{</span>

    <span class="token comment">// the SimpleMovieLister has a dependency on a MovieFinder</span>
    <span class="token keyword">private</span> <span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">;</span>

    <span class="token comment">// a constructor so that the Spring container can inject a MovieFinder</span>
    <span class="token keyword">public</span> <span class="token class-name">SimpleMovieLister</span><span class="token punctuation">(</span><span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>movieFinder <span class="token operator">=</span> movieFinder<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// business logic that actually uses the injected MovieFinder is omitted...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造函数的参数是通过类型匹配的。如果构造函数中不存在发生歧义的参数列表，构造参数是按顺序注入的，但是，下面的例子：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">x<span class="token punctuation">.</span>y</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token class-name">Bar</span> bar<span class="token punctuation">,</span> <span class="token class-name">Baz</span> baz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设Bar和Baz类没有继承关系，就不存在潜在的歧义。因此，以下配置可以正常工作，并且不需要在<code>&lt;constructor-arg /&gt;</code>元素中显式指定构造函数参数索引和类型。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>foo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>x.y.Foo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bar<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>baz<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bar<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>x.y.Bar<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>baz<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>x.y.Baz<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当引用另一个<code>bean</code>时，类型是已知的，并且可以发生匹配（就像前面的例子那样）。当使用简单类型时，例如<code>&lt;value&gt;true&lt;/value&gt;</code>，Spring无法确定值的类型，因此无法在没有帮助的情况下按类型进行匹配。 考虑以下类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">examples</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleBean</span> <span class="token punctuation">{</span>

    <span class="token comment">// Number of years to calculate the Ultimate Answer</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> years<span class="token punctuation">;</span>

    <span class="token comment">// The Answer to Life, the Universe, and Everything</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> ultimateAnswer<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ExampleBean</span><span class="token punctuation">(</span><span class="token keyword">int</span> years<span class="token punctuation">,</span> <span class="token class-name">String</span> ultimateAnswer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>years <span class="token operator">=</span> years<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>ultimateAnswer <span class="token operator">=</span> ultimateAnswer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在前面的场景中，如果使用type属性显式指定构造函数参数的类型，则容器可以使用简单类型的类型匹配</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.ExampleBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>int<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>7500000<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.lang.String<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>42<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用index属性明确指定构造函数参数的索引。 例如：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.ExampleBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>7500000<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>42<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了解决多个简单值的歧义之外，指定索引还解决了构造函数具有两个相同类型参数的含糊问题。请注意，该索引是基于0的。 您也可以使用构造函数参数名称进行值消歧：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.ExampleBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>years<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>7500000<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ultimateAnswer<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>42<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请记住，要使这项工作开箱即用，您的代码必须在启用了调试标志的情况下编译，以便Spring可以从构造函数中查找参数名称。 如果你不能用调试标志编译你的代码（或不想），你可以使用<code>@ConstructorProperties </code>来显式地命名你的构造函数参数。 示例类将不得不如下所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">examples</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleBean</span> <span class="token punctuation">{</span>

    <span class="token comment">// Fields omitted</span>

    <span class="token annotation punctuation">@ConstructorProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;years&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ultimateAnswer&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ExampleBean</span><span class="token punctuation">(</span><span class="token keyword">int</span> years<span class="token punctuation">,</span> <span class="token class-name">String</span> ultimateAnswer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>years <span class="token operator">=</span> years<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>ultimateAnswer <span class="token operator">=</span> ultimateAnswer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="基于setter的依赖注入" tabindex="-1"><a class="header-anchor" href="#基于setter的依赖注入"><span>基于Setter的依赖注入</span></a></h4><p>在调用无参数构造函数或无参数静态工厂方法来实例化<code>bean</code>之后，基于<code>Setter</code>的<code>DI</code>通过调用<code>bean</code>的<code>setter</code>方法来完成。 以下示例显示了一个只能使用纯<code>setter</code>注入进行依赖注入的类。这个类是传统的Java。这是一个POJO，它不依赖于容器特定的接口，基类或注释:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleMovieLister</span> <span class="token punctuation">{</span>

    <span class="token comment">// the SimpleMovieLister has a dependency on the MovieFinder</span>
    <span class="token keyword">private</span> <span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">;</span>

    <span class="token comment">// a setter method so that the Spring container can inject a MovieFinder</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMovieFinder</span><span class="token punctuation">(</span><span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>movieFinder <span class="token operator">=</span> movieFinder<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// business logic that actually uses the injected MovieFinder is omitted...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="详细的依赖和配置" tabindex="-1"><a class="header-anchor" href="#详细的依赖和配置"><span>详细的依赖和配置</span></a></h3><h4 id="直接值" tabindex="-1"><a class="header-anchor" href="#直接值"><span>直接值</span></a></h4><p><code>&lt;property /&gt;</code>元素的value属性将属性或构造函数参数指定为可读的字符串表示形式。<code>Spring</code>的转换服务用于将这些值从<code>String</code>转换为属性或参数的实际类型。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myDataSource<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.commons.dbcp.BasicDataSource<span class="token punctuation">&quot;</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>close<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- results in a setDriverClassName(String) call --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>driverClassName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.mysql.jdbc.Driver<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://localhost:3306/mydb<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>masterkaoli<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下示例使用<code>p-namespace</code>进行更简洁的XML配置。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/p<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myDataSource<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.commons.dbcp.BasicDataSource<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>close<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">p:</span>driverClassName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.mysql.jdbc.Driver<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">p:</span>url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://localhost:3306/mydb<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">p:</span>username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">p:</span>password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>masterkaoli<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的<code>XML</code>虽然更简洁;然而，配置信息在运行时而不是设计时发现错字，除非您在创建<code>bean</code>定义时使用支持自动属性完成的IDE。 您还可以将<code>java.util.Properties</code>实例配置为：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mappings<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.beans.factory.config.PropertyPlaceholderConfigurer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- typed as a java.util.Properties --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>properties<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>
            jdbc.driver.className=com.mysql.jdbc.Driver
            jdbc.url=jdbc:mysql://localhost:3306/mydb
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring容器通过使用JavaBeans <code>PropertyEditor</code>机制将<code>&lt;value/&gt;</code>元素内的文本转换为<code>java.util.Properties</code>实例。这是一个很好的捷径，它是Spring团队倾向于在value属性样式上使用嵌套的<code>&lt;value/&gt;</code>元素的几个地方之一。</p><p>idref元素只是一种防错的方式，可以将容器中另一个bean的id（字符串值 - 不是引用）传递给<code>&lt;constructor-arg/&gt;</code>或<code>&lt;property /&gt;</code>元素。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>theTargetBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>theClientBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>targetName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>idref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>theTargetBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的<code>bean</code>定义片段与下面的片段完全等价（在运行时）：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>theTargetBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>client<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>targetName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>theTargetBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一种形式比第二种形式要好，因为使用<code>idref</code>标签允许容器在部署时验证引用的命名<code>bean</code>实际存在。在第二种变体中，不会对传递给客户机bean的<code>targetName</code>属性的值执行验证。当客户端<code>bean</code>实际实例化时，才会发现bean（最可能致命的结果）。如果客户端bean是prototype bean，则此类型错误和生成的异常可能仅在部署容器后很长时间才能发现。</p><p><code>ref</code>元素是<code>&lt;constructor-arg /&gt;</code>或<code>&lt;property /&gt;</code>定义元素中的最后一个元素。在这里，您将bean的指定属性的值设置为对容器管理的另一个bean（协作者）的引用。通过<code>&lt;ref /&gt;</code>标签的bean属性指定目标bean是最通用的形式，并且允许创建对同一容器或父容器中的任何bean的引用，而不管它是否位于同一个<code>XML</code>文件中。bean属性的值可以与目标bean的id属性相同，或者作为目标bean的name属性中的一个值。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>someBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过<code>parent</code>属性指定目标bean将创建对当前容器的父容器中的bean的引用(他的目标bean必须位于父容器中。)。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- in the parent context --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.foo.SimpleAccountService<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- insert dependencies as required as here --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- in the child (descendant) context --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">&lt;!--</span> <span class="token attr-name">bean</span> <span class="token attr-name">name</span> <span class="token attr-name">is</span> <span class="token attr-name">the</span> <span class="token attr-name">same</span> <span class="token attr-name">as</span> <span class="token attr-name">the</span> <span class="token attr-name">parent</span> <span class="token attr-name">bean</span> <span class="token attr-name">--</span><span class="token punctuation">&gt;</span></span>
    class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&gt;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>target<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountService<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- notice how we refer to the parent bean --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- insert other configuration and dependencies as required here --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="内部bean" tabindex="-1"><a class="header-anchor" href="#内部bean"><span>内部bean</span></a></h4><p><code>&lt;property /&gt;</code>或<code>&lt;constructor-arg /&gt;</code>元素中的<code>&lt;bean /&gt;</code>元素定义了一个所谓的内部bean。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>outer<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- instead of using a reference to a target bean, simply define the target bean inline --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>target<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.example.Person<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- this is the inner bean --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Fiona Apple<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>25<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内部<code>bean</code>定义不需要定义的id或名称; 如果指定，容器不使用这样的值作为标识符。容器在创建时也会忽略范围标志：内部<code>bean</code>始终是匿名的，并且它们始终使用外部<code>bean</code>创建。不可能将内部<code>bean</code>注入到除了封装<code>bean</code>之外的协作<code>bean</code>中，或者独立访问它们。</p><h4 id="集合注入" tabindex="-1"><a class="header-anchor" href="#集合注入"><span>集合注入</span></a></h4><p>在<code>&lt;list /&gt;</code>，<code>&lt;set /&gt;</code>，<code>&lt;map /&gt;</code>和<code>&lt;props /&gt;</code>元素中，分别设置Java集合类型<code>List</code>，<code>Set</code>，<code>Map</code>和<code>Properties</code>的属性和参数。</p><h3 id="使用-depends-on" tabindex="-1"><a class="header-anchor" href="#使用-depends-on"><span>使用 <code>depends-on</code></span></a></h3><p>如果一个<code>bean</code>是另一个<code>bean</code>的依赖项，这通常意味着一个<code>bean</code>被设置为另一个的属性。通常，您可以使用基于XML的配置元数据中的<code>＜ref/＞</code>元素来实现这一点。然而，有时<code>bean</code>之间的依赖关系并不那么直接。例如，当需要触发类中的静态初始值设定项时，例如数据库驱动程序注册。<code>dependent-on</code>属性可以显式地强制在初始化使用此元素的<code>bean</code>之前初始化一个或多个<code>bean</code>。以下示例使用<code>dependent-on</code>属性来表示对单个<code>bean</code>的依赖关系：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>beanOne<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ExampleBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">depends-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>manager<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>manager<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ManagerBean<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>要表达对多个bean的依赖关系，请提供一个bean名称列表作为依赖属性的值（逗号、空格和分号是有效的分隔符）：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>beanOne<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ExampleBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">depends-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>manager,accountDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>manager<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>manager<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>manager<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ManagerBean<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>x.y.jdbc.JdbcAccountDao<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>dependent-on属性既可以指定初始化时依赖项，也可以指定相应的销毁时依赖项（仅在单例bean的情况下）。定义与给定bean的依赖关系的依赖bean首先被销毁，然后给定bean本身被销毁。</p><h3 id="bean-懒加载" tabindex="-1"><a class="header-anchor" href="#bean-懒加载"><span>bean 懒加载</span></a></h3><p>默认情况下，<code>ApplicationContext</code>实现会在初始化过程中急切地创建和配置所有单例<code>bean</code>。通常，这种预实例化是可取的，因为配置或周围环境中的错误会立即被发现，而不是几小时甚至几天后。当这种行为不可取时，可以通过将bean定义标记为惰性初始化来防止单例bean的预实例化。lazy初始化的bean告诉IoC容器在第一次请求时创建bean实例，而不是在启动时。</p><p>在XML中，此行为由<code>&lt;bean/&gt;</code>元素上的<code>lazy-init</code>属性控制，如下例所示：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lazy<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.something.ExpensiveToCreateBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">lazy-init</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>not.lazy<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.something.AnotherBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当<code>ApplicationContext</code>使用前面的配置时，当<code>ApplicationContext</code>启动时，惰性bean不会被急切地预实例化。 但是，当惰性初始化的bean是未惰性初始化的singleton bean的依赖项时，ApplicationContext会在启动时创建惰性初始化的bean，因为它必须满足singleton的依赖项。惰性初始化的bean被注入到其他未惰性初始化的singleton bean中。</p><p>您还可以通过在<code>＜beans/＞</code>元素上使用默认的惰性初始化属性来控制容器级别的惰性初始化，如下例所示：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">default-lazy-init</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- no beans will be pre-instantiated... --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bean-scopes" tabindex="-1"><a class="header-anchor" href="#bean-scopes"><span>Bean scopes</span></a></h2><p>Spring框架支持六个作用域，其中四个作用域只有在使用Web感知的ApplicationContext时才可用。</p><p>以下范围支持开箱即用。 您也可以创建自定义范围:</p><table><thead><tr><th>singleton</th><th>（默认）每个Spring IoC容器将单个bean定义作用于单个对象实例。</th></tr></thead><tbody><tr><td>prototype</td><td>单个bean定义用于将任何多个数量的对象实例的。</td></tr><tr><td>request</td><td>将单个bean定义作用于单个HTTP请求的生命周期; 也就是说，每个HTTP请求都有自己的实例，这个实例是在单个bean定义的背后创建的。 只有在Web感知的Spring ApplicationContext的上下文中才有效。</td></tr><tr><td>session</td><td>在HTTP会话的生命周期中定义一个单一的bean定义。 只有在Web感知的Spring ApplicationContext的上下文中才有效。</td></tr><tr><td>application</td><td>将一个单独的bean定义作用于ServletContext的生命周期。 只有在Web感知的Spring ApplicationContext的上下文中才有效。</td></tr><tr><td>websocket</td><td>在WebSocket的生命周期中定义一个单一的bean定义。 只有在Web感知的Spring ApplicationContext的上下文中才有效。</td></tr></tbody></table><p>从Spring 3.0开始，添加了新的范围<code>thread </code>，但默认情况下未注册。 有关更多信息，请参阅SimpleThreadScope的文档。 有关如何注册此或任何其他自定义作用域的说明，请参阅使用自定义作用域。</p><h3 id="the-singleton-scope" tabindex="-1"><a class="header-anchor" href="#the-singleton-scope"><span>The singleton scope</span></a></h3><p>只管理单个bean的一个共享实例，并且具有与该bean定义匹配的<code>id</code>。句话说，当你定义一个bean定义并且它的范围是一个singleton时，Spring IoC容器恰好创建了该bean定义定义的对象的一个实例。这个单实例存储在这些单例bean的缓存中，并且该命名bean的所有后续请求和引用都会返回缓存的对象。</p><p>singleton Spring单例的范围最好按容器和每个bean来描述。 这意味着如果您为单个Spring容器中的特定类定义一个bean，那么Spring容器将创建该bean定义所定义的类的一个且仅有的一个实例。 单例作用域是Spring中的默认作用域。 要将一个bean定义为XML中的单例，您可以编写，例如：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.foo.DefaultAccountService<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token comment">&lt;!-- the following is equivalent, though redundant (singleton scope is the default) --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.foo.DefaultAccountService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>singleton<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="the-prototype-scope" tabindex="-1"><a class="header-anchor" href="#the-prototype-scope"><span>The prototype scope</span></a></h3><p>bean的部署的非单实例原型范围导致每次创建一个新的bean实例。也就是说，该bean被注入到另一个bean中，或者通过容器上的getBean方法调用来请求它都会创建新的实例。通常，为所有有状态bean使用原型作用域，无状态bean使用单例作用域。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.foo.DefaultAccountService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prototype<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>与其他范围相比，Spring不管理原型bean的完整生命周期：容器实例化，配置并以其他方式组装原型对象，并将其交给客户端，而不再记录该原型实例。因此，<strong>尽管在所有对象上调用初始化生命周期回调方法而不管范围，但在原型的情况下，不调用配置的销毁生命周期回调</strong>。客户端代码必须清理原型范围的对象并释放原型bean持有的昂贵资源。为了让Spring容器释放原型范围bean所拥有的资源，可以尝试使用一个自定义bean后处理器，该后处理器保存对需要清理的bean的引用。</p><p>在某些方面，Spring容器在原型范围bean方面的作用是Java new运算符的替代。</p><h3 id="singleton-beans-with-prototype-bean-dependencies" tabindex="-1"><a class="header-anchor" href="#singleton-beans-with-prototype-bean-dependencies"><span>Singleton beans with prototype-bean dependencies</span></a></h3><p>当你使用的单例<code>bean</code>中有<code>field</code>依赖<code>prototype</code>实例时，请注意，在实例化时解决了依赖关系。因此，如果您将原型范围的<code>bean</code>依赖注入到单例范围的<code>bean</code>中，一个新的原型<code>bean</code>被实例化，然后依赖注入到单例<code>bean</code>中。原型实例是提供给单例范围<code>bean</code>的唯一实例。</p><p>但是，假设您希望单例范围的<code>bean</code>在运行时重复获取原型范围的<code>bean</code>的新实例。你不能依赖注入一个原型范围的<code>bean</code>到你的单例<code>bean</code>中，因为这个注入只发生一次。如果您不止一次在运行时需要一个原型<code>bean</code>的新实例，请参阅方法注入。</p><h3 id="request-session-application-and-websocket-scopes" tabindex="-1"><a class="header-anchor" href="#request-session-application-and-websocket-scopes"><span>Request, session, application, and WebSocket scopes</span></a></h3><h3 id="custom-scopes" tabindex="-1"><a class="header-anchor" href="#custom-scopes"><span>Custom scopes</span></a></h3><h2 id="自定义bean的本质" tabindex="-1"><a class="header-anchor" href="#自定义bean的本质"><span>自定义bean的本质</span></a></h2><h3 id="生命周期回调" tabindex="-1"><a class="header-anchor" href="#生命周期回调"><span>生命周期回调</span></a></h3><p>要与容器管理的bean生命周期进行交互，可以实现Spring <code>InitializingBean</code>和<code>DisposableBean</code>接口。容器为前者调用<code>afterPropertiesSet</code>，为后者调用<code>destroy</code>以允许bean在初始化和销毁bean时执行某些操作。</p><blockquote><p>JSR-250 <code>@PostConstruct</code>和<code>@PreDestroy</code>注释通常被认为是在现代Spring应用程序中接收生命周期回调的最佳实践。 使用这些注释意味着你的<code>bean</code>没有耦合到<code>Spring</code>特定的接口。 有关详细信息，请参阅@PostConstruct和@PreDestroy。</p><p>如果您不想使用JSR-250注释，但仍想要移除耦合，请考虑使用<code>init-method</code>和<code>destroy-method</code>对象定义元数据。</p></blockquote><p>在内部，Spring框架使用<code>BeanPostProcessor</code>实现来处理它可以找到的任何回调接口并调用适当的方法。如果您需要自定义功能或其他生命周期行为，Spring不提供开箱即用的功能，您可以自己实现<code>BeanPostProcessor</code>。 有关更多信息，请参阅容器扩展点。</p><p>除了初始化和销毁回调，Spring管理的对象还可以实现生命周期接口，以便这些对象可以参与由容器自身生命周期驱动的启动和关闭过程。</p><h4 id="初始化回调" tabindex="-1"><a class="header-anchor" href="#初始化回调"><span>初始化回调</span></a></h4><p><code>org.springframework.beans.factory.InitializingBean</code>接口允许bean的在所有必要属性已由容器设置后执行初始化工作。 <code>InitializingBean</code>接口指定一个方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>建议您不要使用<code>InitializingBean</code>接口，因为它不必要地将代码耦合到<code>Spring</code>。或者，使用<code>@PostConstruct</code>注释或指定一个<code>POJO</code>初始化方法。 对于基于<code>XML</code>的配置元数据，您可以使用<code>init-method</code>属性来指定具有void无参数签名的方法的名称。使用<code>Java</code>配置，您可以使用<code>@Bean</code>的<code>initMethod</code>属性，请参阅接收生命周期回调。 例如，以下内容：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleInitBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.ExampleBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>init<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// do some initialization work</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等同于下面,但不会将代码耦合到Spring。：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleInitBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.AnotherExampleBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnotherExampleBean</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// do some initialization work</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="销毁回调" tabindex="-1"><a class="header-anchor" href="#销毁回调"><span>销毁回调</span></a></h4><p>实现<code>org.springframework.beans.factory.DisposableBean</code>接口允许bean在包含它的容器被销毁时获得回调。 <code>DisposableBean</code>接口指定一个方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>建议您不要使用<code>DisposableBean</code>回调接口，因为它不必要地将代码耦合到<code>Spring</code>。 或者，使用<code>@PreDestroy</code>注释或指定bean定义支持的通用方法。 使用基于XML的配置元数据时，可以使用<code>&lt;bean /&gt;</code>上的<code>destroy-method</code>属性。 使用Java配置，您可以使用@Bean的<code>destroyMethod</code>属性，请参阅接收生命周期回调。 例如，下面的定义：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleInitBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.ExampleBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cleanup<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// do some destruction work (like releasing pooled connections)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="默认初始化和销毁方法" tabindex="-1"><a class="header-anchor" href="#默认初始化和销毁方法"><span>默认初始化和销毁方法</span></a></h4><p>当您编写不使用特定于Spring的<code>InitializingBean</code>和<code>DisposableBean</code>回调接口的初始化和销毁方法时，通常会使用诸如<code>init</code>，<code>initialize</code>，<code>dispose</code>等名称编写方法。 理想情况下，此类生命周期回调方法的名称在项目中标准化，以便所有开发人员使用相同的方法名称并确保一致性。</p><p>您可以配置<code>Spring</code>容器以查找方法名表示初始化或销毁每个<code>bean</code>上的回调方法。这意味着作为应用程序开发人员，您可以编写应用程序类并使用称为<code>init</code>的初始化回调，而无需为每个bean定义配置<code>init-method =&quot;init&quot;</code>属性。Spring IoC容器在创建bean时（并根据前面描述的标准生命周期回调协议）调用该方法。 此功能还为初始化和销毁方法回调强制执行一致的命名约定。</p><p>假设你的初始化回调方法被命名为<code>init</code>，并且销毁回调方法被命名为<code>destroy</code>。 在下面的例子中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultBlogService</span> <span class="token keyword">implements</span> <span class="token class-name">BlogService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">BlogDao</span> blogDao<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBlogDao</span><span class="token punctuation">(</span><span class="token class-name">BlogDao</span> blogDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>blogDao <span class="token operator">=</span> blogDao<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// this is (unsurprisingly) the initialization callback method</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>blogDao <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;The [blogDao] property must be set.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">default-init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>init<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>blogService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.foo.DefaultBlogService<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>blogDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>blogDao<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>顶层<code>&lt;beans /&gt;</code>元素属性中<code>default-init-method</code>属性的存在会导致Spring IoC容器识别出一个名为<code>init</code>的方法作为初始化方法回调。当一个bean被创建和组装时，如果bean类有这样一个方法，它会在适当的时候被调用。</p><p>通过在顶级<code>&lt;beans /&gt;</code>元素上使用<code>default-destroy-method</code>属性，可以类似地配置<code>destroy</code>方法回调（即在XML中）。</p><p>在现有bean类已经具有与惯例不同的回调方法的情况下，可以通过使用<code>&lt;bean/&gt;</code>的<code>init-method</code>和<code>destroy-method</code>属性指定方法名称（即XML中的方法名称）来覆盖。</p><p><mark>Spring容器保证了一个配置好的初始化回调函数在bean被提供了所有的依赖关系后立即被调用。因此初始化回调在原始<code>bean</code>引用上被调用，这意味着<code>AOP</code>拦截器等等还没有被应用到<code>bean</code>。</mark><strong>目标bean首先被完全创建，然后应用带有拦截器链的AOP代理</strong>。如果目标bean和代理是分别定义的，那么代码甚至可以绕过代理与原始目标bean进行交互。 因此，将拦截器应用于init方法会不一致，因为这样会将目标bean的生命周期与代理/拦截器耦合在一起，并在代码直接与原始目标bean交互时留下奇怪的语义。</p><h4 id="组合使用生命周期机制" tabindex="-1"><a class="header-anchor" href="#组合使用生命周期机制"><span>组合使用生命周期机制</span></a></h4><p>从Spring 2.5开始，您有三个控制bean生命周期行为的选项：<code>InitializingBean</code>和<code>DisposableBean</code>回调接口; 自定义<code>init</code>和<code>destroy</code>方法; 和<code>@PostConstruct</code>和<code>@PreDestroy</code>注释。 你可以结合这些机制来控制给定的bean。</p><p><strong>如果为bean配置了多个生命周期机制，并且每个机制都配置了不同的方法名称，那么每个配置的方法都按照下面列出的顺序执行。但是，如果为这些生命周期机制中的多个生命周期机制配置了相同的方法名称（例如初始化方法的<code>init</code>），则该方法将执行一次，如前一部分所述。</strong></p><p>为相同的bean配置多种生命周期机制，使用不同的初始化方法，如下所示：</p><ul><li>Methods annotated with @PostConstruct</li><li>afterPropertiesSet() as defined by the InitializingBean callback interface</li><li>A custom configured init() method</li></ul><h4 id="startup和shutdown回调" tabindex="-1"><a class="header-anchor" href="#startup和shutdown回调"><span>Startup和shutdown回调</span></a></h4><p>Lifecycle 接口为任何具有自己生命周期要求的对象（例如启动和停止一些后台进程）定义基本方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Lifecycle</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> <span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>任何Spring管理的对象都可以实现该接口。 然后，当<code>ApplicationContext</code>本身接收到启动和停止信号时，例如 对于运行时的停止、重新启动场景，它会将这些调用传递到在该上下文中定义的所有<code>Lifecycle</code>实现。 它通过委派给<code>LifecycleProcessor</code>来完成此操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LifecycleProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">Lifecycle</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，<code>LifecycleProcessor</code>本身就是生命周期接口的扩展。 它还添加了两种其他方法来对正在刷新和关闭的上下文作出反应。</p><p>请注意，常规<code>org.springframework.context.Lifecycle</code>接口只是显式启动/停止通知的普通协定，并不意味着在上下文刷新时自动启动.考虑实现<code>org.springframework.context.SmartLifecycle</code>，而不是对特定bean的自动启动（包括启动阶段）进行细粒度控制。此外，请注意，停止通知不保证在销毁之前发生：在正常关闭时，所有生命周期bean将在传播通用销毁回调之前首先收到停止通知;然而，在上下文的生命周期中的热刷新或中止刷新尝试时，只会调用销毁方法。</p><p>启动和关闭调用的顺序可能很重要。如果任何两个对象之间存在依赖关系，则依赖方将在其依赖关系之后启动，并且在其依赖关系之前停止。但是，有时直接依赖关系是未知的。 您可能只知道某种类型的对象应该在另一种类型的对象之前启动。在这些情况下，<code>SmartLifecycle</code>接口定义了另一个选项，即在父接口<code>Phased</code>上定义的<code>getPhase</code>方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Phased</span> <span class="token punctuation">{</span>

    <span class="token keyword">int</span> <span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SmartLifecycle</span> <span class="token keyword">extends</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">,</span> <span class="token class-name">Phased</span> <span class="token punctuation">{</span>

    <span class="token keyword">boolean</span> <span class="token function">isAutoStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动时，<code>Phased</code>最低的首先启动，停止时相反。因此，一个实现<code>SmartLifecycle</code>并且其<code>getPhase</code>方法返回<code>Integer.MIN_VALUE</code>的对象将成为第一个开始和最后一个停止的对象。</p><p>在考虑<code>Phase</code>的值时，了解任何未实现<code>SmartLifecycle</code>的“正常”生命周期对象的默认Phase为0也很重要。因此，任何负的<code>Phase</code>值都表示对象应在这些标准组件之前启动（并且 在它们之后停止），反之亦然，对于任何正的Phase值。</p><p>正如您所看到的，<code>SmartLifecycle</code>定义的stop方法接受回调。 任何实现必须在该实现的关闭过程完成后调用该回调的<code>run</code>方法。这可以在需要时进行异步关闭，因为<code>LifecycleProcessor</code>接口的默认实现<code>DefaultLifecycleProcessor</code>将等待对象组的超时值以调用该回调。</p><p>每个阶段的默认超时时间是30秒。 您可以通过在上下文中定义一个名为lifecycleProcessor的bean来覆盖默认的生命周期处理器实例。 如果您只想修改超时值，那么定义以下就足够了：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lifecycleProcessor<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.context.support.DefaultLifecycleProcessor<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- timeout value in milliseconds --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>timeoutPerShutdownPhase<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10000<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如前所述，<code>LifecycleProcessor</code>接口还定义了用于刷新和关闭上下文的回调方法。后者将简单地驱动关闭过程，就好像<code>stop</code>已被显式调用一样，但是当上下文关闭时会发生。另一方面，&#39;刷新’回调启用了SmartLifecycle bean的另一个功能。 当上下文刷新时（在所有对象被实例化和初始化之后），该回调将被调用，并且此时默认生命周期处理器将检查每个SmartLifecycle对象的isAutoStartup方法返回的布尔值。如果为“true”，那么该对象将在那个时候启动，而不是等待显式调用上下文或自己的start方法（与上下文刷新不同，上下文启动不会自动执行标准上下文）。“阶段”值以及任何“依赖”关系将以与上述相同的方式确定启动顺序。</p><h4 id="在非web应用程序中正常关闭spring-ioc容器" tabindex="-1"><a class="header-anchor" href="#在非web应用程序中正常关闭spring-ioc容器"><span>在非web应用程序中正常关闭Spring IoC容器</span></a></h4><p>如果您在非Web应用程序环境中使用Spring的IoC容器，例如，在富客户端桌面环境中;您使用JVM注册了一个关闭钩子。这样做可以确保正常关闭并在单例bean上调用相关的销毁方法，从而释放所有资源。 当然，您仍然必须正确配置和实施这些销毁回调。 要注册一个关闭挂钩，可以调用<code>ConfigurableApplicationContext</code>接口上声明的<code>registerShutdownHook</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ConfigurableApplicationContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Boot</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">ConfigurableApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;beans.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// add a shutdown hook for the above context...</span>
        ctx<span class="token punctuation">.</span><span class="token function">registerShutdownHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// app runs here...</span>

        <span class="token comment">// main method exits, hook is called prior to the app shutting down...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="applicationcontextaware-和-beannameaware" tabindex="-1"><a class="header-anchor" href="#applicationcontextaware-和-beannameaware"><span>ApplicationContextAware 和 BeanNameAware</span></a></h3><p>当一个<code>ApplicationContext</code>创建一个实现<code>org.springframework.context.ApplicationContextAware</code>接口的对象实例时，该实例提供了对该<code>ApplicationContext</code>的引用。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，bean可以通过<code>ApplicationContext</code>接口或通过将引用强制转换为此接口的已知子类（如<code>ConfigurableApplicationContext</code>）来创建它们，从而以编程方式操作<code>ApplicationContext</code>,该类提供了很多功能。一个用途是对其他bean的程序化检索。有时候这种能力是有用的;但是，通常你应该避免它，因为它将代码耦合到Spring，并且不遵循Inversion of Control风格，其中协作者被提供给bean作为属性。<code>ApplicationContext</code>的其他方法提供对文件资源的访问，发布应用程序事件以及访问<code>MessageSource</code>。 这些附加功能在<code>ApplicationContext</code>的附加功能中进行了介绍.</p><p>从Spring 2.5开始，自动装配是获得对<code>ApplicationContext</code>的引用的另一种方法。“传统”构造函数和byType自动装配模式（如自动装配协作者中所述）可以分别为构造函数参数或setter方法参数提供<code>ApplicationContext</code>类型的依赖关系.为了获得更大的灵活性，包括自动装配字段和多个参数方法的能力，请使用新的基于注释的自动装配功能。 如果这样做，则<code>ApplicationContext</code>会自动装入字段，构造函数参数或方法参数中，如果所涉及的字段，构造函数或方法携带<code>@Autowired</code>注释，则该参数将期望<code>ApplicationContext</code>类型。 有关更多信息，请参阅@Autowired。</p><p>当<code>ApplicationContext</code>创建一个实现<code>org.springframework.beans.factory.BeanNameAware</code>接口的类时，该类将提供对其关联对象定义中bean的名称的引用。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanNameAware</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">setBeanName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个回调函数是在正常的bean属性填充之后，但在初始化回调(例如<code>InitializingBean afterPropertiesSet</code>或者一个自定义的init方法)之前调用的。</p><h3 id="其他aware接口" tabindex="-1"><a class="header-anchor" href="#其他aware接口"><span>其他Aware接口</span></a></h3><p>除了上面讨论的<code>ApplicationContextAware</code>和<code>BeanNameAware</code>之外，Spring提供了一系列<code>Aware</code>接口，允许bean向容器指示它们需要某种基础设施依赖性。 最重要的<code>Aware</code>接口总结如下：</p><table><thead><tr><th>Name</th><th>注入依赖</th></tr></thead><tbody><tr><td>ApplicationContextAware</td><td>声明ApplicationContext</td></tr><tr><td>ApplicationEventPublisherAware</td><td>封装ApplicationContext的事件发布者</td></tr><tr><td>BeanClassLoaderAware</td><td>用于加载Bean类的类加载器。</td></tr><tr><td>BeanFactoryAware</td><td>声明BeanFactory</td></tr><tr><td>BeanNameAware</td><td>声明bean的名称</td></tr><tr><td>BootstrapContextAware</td><td>资源适配器BootstrapContext容器在其中运行。通常仅在支持JCA的ApplicationContexts中可用</td></tr><tr><td>LoadTimeWeaverAware</td><td>定义编织器用于在加载时处理类定义</td></tr><tr><td>MessageSourceAware</td><td>用于解析消息的配置策略（支持参数化和国际化）</td></tr><tr><td>NotificationPublisherAware</td><td>Spring JMX通知发布者</td></tr><tr><td>ResourceLoaderAware</td><td>配置的加载器可以实现对资源的低级访问</td></tr><tr><td>ServletConfigAware</td><td>当前的ServletConfig容器运行。仅在Web感知的Spring ApplicationContext中有效</td></tr><tr><td>ServletContextAware</td><td>容器运行的当前ServletContext。仅在Web感知的Spring ApplicationContext中有效</td></tr></tbody></table><p>再次注意，这些接口的使用将您的代码绑定到Spring API，并且不遵循控制反转。 因此，它们被推荐用于需要对容器进行编程访问的基础架构bean。</p>`,225),o=[p];function c(l,i){return n(),s("div",null,o)}const r=a(e,[["render",c],["__file","spring-容器基础.html.vue"]]),k=JSON.parse('{"path":"/Spring/spring-%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80.html","title":"Spring 容器基础","lang":"zh-CN","frontmatter":{"title":"Spring 容器基础","date":"2024-04-28T00:00:00.000Z","categories":["Spring"],"tags":["Spring","容器"],"description":"IoC容器和beans 本章介绍Spring Framework实现控制反转（IoC）的原理。 IoC也被称为依赖注入（DI）。通过构造函数、工厂方法创建对象，对象被创建后设置属性等方法构建依赖的过程。容器在创建bean时会注入这些依赖关系。这个过程从根本上来说是相反的，因此名为控制反转（IoC），bean本身通过使用类的直接构造或诸如Service ...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/Spring/spring-%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"Spring 容器基础"}],["meta",{"property":"og:description","content":"IoC容器和beans 本章介绍Spring Framework实现控制反转（IoC）的原理。 IoC也被称为依赖注入（DI）。通过构造函数、工厂方法创建对象，对象被创建后设置属性等方法构建依赖的过程。容器在创建bean时会注入这些依赖关系。这个过程从根本上来说是相反的，因此名为控制反转（IoC），bean本身通过使用类的直接构造或诸如Service ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-01T09:42:13.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"容器"}],["meta",{"property":"article:published_time","content":"2024-04-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-01T09:42:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring 容器基础\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-01T09:42:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"IoC容器和beans","slug":"ioc容器和beans","link":"#ioc容器和beans","children":[]},{"level":2,"title":"容器概览","slug":"容器概览","link":"#容器概览","children":[{"level":3,"title":"配置元数据","slug":"配置元数据","link":"#配置元数据","children":[]},{"level":3,"title":"初始化容器","slug":"初始化容器","link":"#初始化容器","children":[]},{"level":3,"title":"使用容器","slug":"使用容器","link":"#使用容器","children":[]}]},{"level":2,"title":"Bean概述","slug":"bean概述","link":"#bean概述","children":[{"level":3,"title":"命名bean","slug":"命名bean","link":"#命名bean","children":[]},{"level":3,"title":"实例化bean","slug":"实例化bean","link":"#实例化bean","children":[]}]},{"level":2,"title":"依赖","slug":"依赖","link":"#依赖","children":[{"level":3,"title":"依赖注入","slug":"依赖注入","link":"#依赖注入","children":[]},{"level":3,"title":"详细的依赖和配置","slug":"详细的依赖和配置","link":"#详细的依赖和配置","children":[]},{"level":3,"title":"使用 depends-on","slug":"使用-depends-on","link":"#使用-depends-on","children":[]},{"level":3,"title":"bean 懒加载","slug":"bean-懒加载","link":"#bean-懒加载","children":[]}]},{"level":2,"title":"Bean scopes","slug":"bean-scopes","link":"#bean-scopes","children":[{"level":3,"title":"The singleton scope","slug":"the-singleton-scope","link":"#the-singleton-scope","children":[]},{"level":3,"title":"The prototype scope","slug":"the-prototype-scope","link":"#the-prototype-scope","children":[]},{"level":3,"title":"Singleton beans with prototype-bean dependencies","slug":"singleton-beans-with-prototype-bean-dependencies","link":"#singleton-beans-with-prototype-bean-dependencies","children":[]},{"level":3,"title":"Request, session, application, and WebSocket scopes","slug":"request-session-application-and-websocket-scopes","link":"#request-session-application-and-websocket-scopes","children":[]},{"level":3,"title":"Custom scopes","slug":"custom-scopes","link":"#custom-scopes","children":[]}]},{"level":2,"title":"自定义bean的本质","slug":"自定义bean的本质","link":"#自定义bean的本质","children":[{"level":3,"title":"生命周期回调","slug":"生命周期回调","link":"#生命周期回调","children":[]},{"level":3,"title":"ApplicationContextAware 和 BeanNameAware","slug":"applicationcontextaware-和-beannameaware","link":"#applicationcontextaware-和-beannameaware","children":[]},{"level":3,"title":"其他Aware接口","slug":"其他aware接口","link":"#其他aware接口","children":[]}]}],"git":{"createdTime":1714556533000,"updatedTime":1714556533000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":1}]},"readingTime":{"minutes":39.88,"words":11963},"filePathRelative":"Spring/spring-容器基础.md","localizedDate":"2024年4月28日","excerpt":"<h2>IoC容器和beans</h2>\\n<p>本章介绍Spring Framework实现控制反转（IoC）的原理。 IoC也被称为依赖注入（DI）。通过构造函数、工厂方法创建对象，对象被创建后设置属性等方法构建依赖的过程。容器在创建bean时会注入这些依赖关系。这个过程从根本上来说是相反的，因此名为控制反转（IoC），bean本身通过使用类的直接构造或诸如Service Locator模式之类的机制来控制其依赖关系的实例化。</p>\\n<p><code>org.springframework.beans</code>和<code>org.springframework.context</code>包是Spring Framework的IoC容器的基础。<code>BeanFactory</code>接口提供了一种能够管理任何类型对象的高级配置机制。 <code>ApplicationContext</code>是<code>BeanFactory</code>的一个子接口，它增加了与Spring的AOP功能的集成、消息资源处理（用于国际化）、事件发布以及Web应用程序上下文功能。</p>","autoDesc":true}');export{r as comp,k as data};
