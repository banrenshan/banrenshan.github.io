import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-CQgLfo2K.js";const e="/assets/664672-20190917194124146-1439923211-ID76YF6t.jpg",p="/assets/664672-20190917194126160-466067178-C3PqvBrH.jpg",o="/assets/image-20240424090352593-DepoZvgz.png",c={},i=t('<p>JUnit5有三个模块组成：</p><ul><li><strong>JUnit Platform</strong>： 用于JVM上启动测试框架的基础服务，提供命令行，IDE和构建工具等方式执行测试的支持。</li><li><strong>JUnit Jupiter</strong>：包含 JUnit 5 新的编程模型和扩展模型，主要就是用于编写测试代码和扩展代码。</li><li><strong>JUnit Vintage</strong>：用于在JUnit 5 中兼容运行 JUnit3.x 和 JUnit4.x 的测试用例。</li></ul><figure><img src="'+e+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="注解" tabindex="-1"><a class="header-anchor" href="#注解"><span>注解</span></a></h2><h3 id="parameterizedtest-参数化测试" tabindex="-1"><a class="header-anchor" href="#parameterizedtest-参数化测试"><span>@ParameterizedTest：参数化测试</span></a></h3><p>表示方法是参数化测试。利用**<code>@ValueSource</code>**等注解，指定入参，我们将可以使用不同的参数进行多次单元测试，而不需要每新增一个参数就新增一个单元测试，省去了很多冗余代码。</p><ul><li><p><code>@ValueSource</code>: 为参数化测试指定入参来源，支持八大基础类以及String类型,Class类型</p></li><li><p><code>@NullSource</code>: 表示为参数化测试提供一个null的入参</p></li><li><p><code>@EnumSource</code>: 表示为参数化测试提供一个枚举入参</p></li><li><p><strong><code>@CsvFileSource</code></strong>：表示读取指定CSV文件内容作为参数化测试入参</p></li><li><p><code>@MethodSource</code>：表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个流)</p></li><li><p>自定义：实现<strong>ArgumentsProvider</strong>接口即可</p></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@ValueSource</span><span class="token punctuation">(</span>strings <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;three&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;参数化测试1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parameterizedTest1</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="nested-嵌套单元测试" tabindex="-1"><a class="header-anchor" href="#nested-嵌套单元测试"><span>@Nested：嵌套单元测试</span></a></h3><p>JUnit5提供了嵌套单元测试用于更好表示各个单元测试类之间的关系。平时我们写单元测试时一般都是一个类对应一个单元测试类。不过有些互相之间有业务关系的类，他们的单元测试完全是可以写在一起，使用内嵌的方式表示，减少测试类的数量防止类爆炸。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NestedTestDemo</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;Nested&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">isInstantiatedWithNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;最一层--内嵌单元测试&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Nested</span>
    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;Nested2&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">class</span> <span class="token class-name">Nested2</span> <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@BeforeEach</span>
        <span class="token keyword">void</span> <span class="token class-name">Nested2_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Nested2_init&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Test</span>
        <span class="token keyword">void</span> <span class="token class-name">Nested2_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;第二层-内嵌单元测试&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


        <span class="token annotation punctuation">@Nested</span>
        <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;Nested3&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">class</span> <span class="token class-name">Nested3</span> <span class="token punctuation">{</span>

            <span class="token annotation punctuation">@BeforeEach</span>
            <span class="token keyword">void</span> <span class="token class-name">Nested3_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Nested3_init&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Test</span>
            <span class="token keyword">void</span> <span class="token class-name">Nested3_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;第三层-内嵌单元测试&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="repeatedtest" tabindex="-1"><a class="header-anchor" href="#repeatedtest"><span><strong>@RepeatedTest</strong></span></a></h3><p>表示方法可重复执行</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RepeatedTest</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">//表示重复执行10次</span>
<span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;重复测试&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRepeated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="displayname" tabindex="-1"><a class="header-anchor" href="#displayname"><span><strong>@DisplayName</strong></span></a></h3><p>为测试类或者测试方法设置展示名称</p><h3 id="tag" tabindex="-1"><a class="header-anchor" href="#tag"><span><strong>@Tag</strong></span></a></h3><p>表示单元测试类别，类似于JUnit4中的@Categories</p><h3 id="beforeeach" tabindex="-1"><a class="header-anchor" href="#beforeeach"><span><strong>@BeforeEach</strong></span></a></h3><p>表示在每个单元测试之前执行</p><h3 id="beforeall" tabindex="-1"><a class="header-anchor" href="#beforeall"><span><strong>@BeforeAll</strong></span></a></h3><p>表示在所有单元测试之前执行</p><h3 id="aftereach" tabindex="-1"><a class="header-anchor" href="#aftereach"><span><strong>@AfterEach</strong></span></a></h3><p>表示在每个单元测试之后执行</p><h3 id="afterall" tabindex="-1"><a class="header-anchor" href="#afterall"><span><strong>@AfterAll</strong></span></a></h3><p>表示在所有单元测试之后执行</p><h3 id="disabled" tabindex="-1"><a class="header-anchor" href="#disabled"><span><strong>@Disabled</strong></span></a></h3><p>表示测试类或测试方法不执行，类似于JUnit4中的@Ignore</p><h3 id="timeout" tabindex="-1"><a class="header-anchor" href="#timeout"><span><strong>@Timeout</strong></span></a></h3><p>表示测试方法运行如果超过了指定时间将会返回错误</p><h3 id="extendwith" tabindex="-1"><a class="header-anchor" href="#extendwith"><span><strong>@ExtendWith</strong></span></a></h3><p>为测试类或测试方法提供扩展类引用</p><h3 id="综合demo" tabindex="-1"><a class="header-anchor" href="#综合demo"><span>综合demo</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;我的第一个测试用例&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFirstTestCaseTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@BeforeAll</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;初始化数据&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@AfterAll</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;清理数据&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@BeforeEach</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tearup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前测试方法开始&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@AfterEach</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前测试方法结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;我的第一个测试&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testFirstTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我的第一个测试开始测试&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;我的第二个测试&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testSecondTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我的第二个测试开始测试&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="断言" tabindex="-1"><a class="header-anchor" href="#断言"><span>断言</span></a></h2><h3 id="异常断言" tabindex="-1"><a class="header-anchor" href="#异常断言"><span>异常断言</span></a></h3><p>判断方法在执行期间，是否发生了指定的异常：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;异常测试&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ArithmeticException</span> exception <span class="token operator">=</span> <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertThrows</span><span class="token punctuation">(</span>
           <span class="token comment">//扔出断言异常</span>
            <span class="token class-name">ArithmeticException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">%</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="超时断言" tabindex="-1"><a class="header-anchor" href="#超时断言"><span>超时断言</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;超时测试&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">timeoutTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//如果测试方法时间超过1s将会异常</span>
    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTimeout</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="假设" tabindex="-1"><a class="header-anchor" href="#假设"><span>假设</span></a></h2><p>假设仅在满足某些条件的情况下才用于运行测试。这通常用于测试正常运行所需的外部条件，但与正在测试的内容没有直接关系。</p><p>我们可以用assumeTrue、assumeFalse和assumingThat声明一个假设：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">trueAssumption</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assumeTrue</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">falseAssumption</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assumeFalse</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">assumptionThat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> someString <span class="token operator">=</span> <span class="token string">&quot;Just a string&quot;</span><span class="token punctuation">;</span>
    <span class="token function">assumingThat</span><span class="token punctuation">(</span>
        someString<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;Just a string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果假设失败，则抛出TestAbortedException，并跳过测试。</p><h2 id="测试套件" tabindex="-1"><a class="header-anchor" href="#测试套件"><span>测试套件</span></a></h2><p>为了继续使用JUnit5的新功能，我们将探讨在一个测试套件中聚合多个测试类的概念，以便我们可以一起运行这些测试类。JUnit5提供了两个注释，@SelectPackages和@SelectClasses，用于创建测试套件。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Suite</span>
<span class="token annotation punctuation">@SelectPackages</span><span class="token punctuation">(</span><span class="token string">&quot;com.baeldung&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ExcludePackages</span><span class="token punctuation">(</span><span class="token string">&quot;com.baeldung.suites&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AllUnitTest</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Suite</span>
<span class="token annotation punctuation">@SelectClasses</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">AssertionTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">AssumptionTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ExceptionTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AllUnitTest</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="动态测试" tabindex="-1"><a class="header-anchor" href="#动态测试"><span>动态测试</span></a></h2><p>JUnit5允许我们动态的创建单元测试,通过**@TestFactory<strong>注解，会在运行时生成单元测试。需要注意的是</strong>@TestFactory**修饰的方法本身并不是单元测试，他只是负责生成单元测试。我们只需要返回 DynamicTest的迭代器甚至是流即可生成不同的单元测试。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@TestFactory</span>
<span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;动态测试&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DynamicTest</span><span class="token punctuation">&gt;</span></span> <span class="token function">dynamicTests</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>
            <span class="token function">dynamicTest</span><span class="token punctuation">(</span><span class="token string">&quot;第一个动态测试&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token function">dynamicTest</span><span class="token punctuation">(</span><span class="token string">&quot;第二个动态测试&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="并行测试" tabindex="-1"><a class="header-anchor" href="#并行测试"><span>并行测试</span></a></h2><p>默认情况下，JUnit Jupiter测试在单个线程中按顺序运行。 自5.3版起，支持并行。需要设置<code>src/test/resources/junit-platform.properties</code>：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>junit.jupiter.execution.parallel.enabled=true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请注意，启用此属性只是并行执行测试所需的第一步。如果启用，默认情况下测试类和方法仍将按顺序执行。测试树中的节点是否同时执行由其执行模式控制。以下两种模式可用:</p><ul><li><code>SAME_THREAD</code>: 强制跟父线程使用同一线程。例如，当在测试方法上使用时，该测试方法将在与包含测试类的任何<code>@BeforeAll</code>或<code>@AfterAll</code>方法相同的线程中执行。</li><li><code>CONCURRENT</code>: 并发执行，除非资源锁强制在同一线程中执行。</li></ul><p>默认情况下，测试树中的节点使用<code>SAME_THREAD</code>执行模式。您可以通过设置<code>junit.jupiter.execution.parallel.mode.default</code>参数来更改默认值。或者，您可以使用<code>@Execution</code>注释来更改带注释的元素及其子元素（如果有的话）的执行模式，这允许您逐个激活单个测试类的并行执行。</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">junit.jupiter.execution.parallel.enabled</span> <span class="token punctuation">=</span> <span class="token value attr-value">true</span>
<span class="token key attr-name">junit.jupiter.execution.parallel.mode.default</span> <span class="token punctuation">=</span> <span class="token value attr-value">concurrent</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>采用以上的模式，所有的测试类和测试方法都是并发来执行的。当然还可以通过另外一个配置来保证类是并行测试而内部方法是串行测试的：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">junit.jupiter.execution.parallel.enabled</span> <span class="token punctuation">=</span> <span class="token value attr-value">true</span>
<span class="token key attr-name">junit.jupiter.execution.parallel.mode.default</span> <span class="token punctuation">=</span> <span class="token value attr-value">same_thread</span>
<span class="token key attr-name">junit.jupiter.execution.parallel.mode.classes.default</span> <span class="token punctuation">=</span> <span class="token value attr-value">concurrent</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置类之间串行而内部方法是并行的:</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">junit.jupiter.execution.parallel.enabled</span> <span class="token punctuation">=</span> <span class="token value attr-value">true</span>
<span class="token key attr-name">junit.jupiter.execution.parallel.mode.default</span> <span class="token punctuation">=</span> <span class="token value attr-value">concurrent</span>
<span class="token key attr-name">junit.jupiter.execution.parallel.mode.classes.default</span> <span class="token punctuation">=</span> <span class="token value attr-value">same_thread</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上两个配置并行和串行的参数对应的四种情况如下所示：</p><figure><img src="`+o+`" alt="image-20240424090352593" tabindex="0" loading="lazy"><figcaption>image-20240424090352593</figcaption></figure><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">MockitoExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MocktioDemoTest7</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;FirstParallelUnitTest first() start =&gt; &quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;FirstParallelUnitTest first() end =&gt; &quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;FirstParallelUnitTest second() start =&gt; &quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;FirstParallelUnitTest second() end =&gt; &quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">FirstParallelUnitTest</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> start <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">ForkJoinPool</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span>
<span class="token class-name">FirstParallelUnitTest</span> <span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span> start <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">ForkJoinPool</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">2</span>
<span class="token class-name">FirstParallelUnitTest</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> end <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">ForkJoinPool</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span>
<span class="token class-name">FirstParallelUnitTest</span> <span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span> end <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">ForkJoinPool</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>可以看到使用的是ForkJoinPool线程池，如何更改这个线程池的数量呢？</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>junit.jupiter.execution.parallel.config.fixed.parallelism  # 固定线程数
junit.jupiter.execution.parallel.config.strategy=fixed # 线程池配置策略
junit.jupiter.execution.parallel.config.dynamic.factor #根据核心数动态确定线程数 线程数=核心数*factor(default=1)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>`,71),l=[i];function u(r,d){return s(),a("div",null,l)}const m=n(c,[["render",u],["__file","03-Junit5.html.vue"]]),b=JSON.parse('{"path":"/gudie/03-Junit5.html","title":"JUnit5指南","lang":"zh-CN","frontmatter":{"title":"JUnit5指南","date":"2024-04-21T00:00:00.000Z","categories":["java","测试"],"tags":["junit","单元测试"],"description":"JUnit5有三个模块组成： JUnit Platform： 用于JVM上启动测试框架的基础服务，提供命令行，IDE和构建工具等方式执行测试的支持。 JUnit Jupiter：包含 JUnit 5 新的编程模型和扩展模型，主要就是用于编写测试代码和扩展代码。 JUnit Vintage：用于在JUnit 5 中兼容运行 JUnit3.x 和 JUni...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/gudie/03-Junit5.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"JUnit5指南"}],["meta",{"property":"og:description","content":"JUnit5有三个模块组成： JUnit Platform： 用于JVM上启动测试框架的基础服务，提供命令行，IDE和构建工具等方式执行测试的支持。 JUnit Jupiter：包含 JUnit 5 新的编程模型和扩展模型，主要就是用于编写测试代码和扩展代码。 JUnit Vintage：用于在JUnit 5 中兼容运行 JUnit3.x 和 JUni..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-24T05:26:49.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"junit"}],["meta",{"property":"article:tag","content":"单元测试"}],["meta",{"property":"article:published_time","content":"2024-04-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-24T05:26:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JUnit5指南\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-24T05:26:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"注解","slug":"注解","link":"#注解","children":[{"level":3,"title":"@ParameterizedTest：参数化测试","slug":"parameterizedtest-参数化测试","link":"#parameterizedtest-参数化测试","children":[]},{"level":3,"title":"@Nested：嵌套单元测试","slug":"nested-嵌套单元测试","link":"#nested-嵌套单元测试","children":[]},{"level":3,"title":"@RepeatedTest","slug":"repeatedtest","link":"#repeatedtest","children":[]},{"level":3,"title":"@DisplayName","slug":"displayname","link":"#displayname","children":[]},{"level":3,"title":"@Tag","slug":"tag","link":"#tag","children":[]},{"level":3,"title":"@BeforeEach","slug":"beforeeach","link":"#beforeeach","children":[]},{"level":3,"title":"@BeforeAll","slug":"beforeall","link":"#beforeall","children":[]},{"level":3,"title":"@AfterEach","slug":"aftereach","link":"#aftereach","children":[]},{"level":3,"title":"@AfterAll","slug":"afterall","link":"#afterall","children":[]},{"level":3,"title":"@Disabled","slug":"disabled","link":"#disabled","children":[]},{"level":3,"title":"@Timeout","slug":"timeout","link":"#timeout","children":[]},{"level":3,"title":"@ExtendWith","slug":"extendwith","link":"#extendwith","children":[]},{"level":3,"title":"综合demo","slug":"综合demo","link":"#综合demo","children":[]}]},{"level":2,"title":"断言","slug":"断言","link":"#断言","children":[{"level":3,"title":"异常断言","slug":"异常断言","link":"#异常断言","children":[]},{"level":3,"title":"超时断言","slug":"超时断言","link":"#超时断言","children":[]}]},{"level":2,"title":"假设","slug":"假设","link":"#假设","children":[]},{"level":2,"title":"测试套件","slug":"测试套件","link":"#测试套件","children":[]},{"level":2,"title":"动态测试","slug":"动态测试","link":"#动态测试","children":[]},{"level":2,"title":"并行测试","slug":"并行测试","link":"#并行测试","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}]}],"git":{"createdTime":1713692103000,"updatedTime":1713936409000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":2}]},"readingTime":{"minutes":5.98,"words":1793},"filePathRelative":"gudie/03-Junit5.md","localizedDate":"2024年4月21日","excerpt":"<p>JUnit5有三个模块组成：</p>\\n<ul>\\n<li><strong>JUnit Platform</strong>： 用于JVM上启动测试框架的基础服务，提供命令行，IDE和构建工具等方式执行测试的支持。</li>\\n<li><strong>JUnit Jupiter</strong>：包含 JUnit 5 新的编程模型和扩展模型，主要就是用于编写测试代码和扩展代码。</li>\\n<li><strong>JUnit Vintage</strong>：用于在JUnit 5 中兼容运行 JUnit3.x 和 JUnit4.x 的测试用例。</li>\\n</ul>\\n<figure><figcaption>img</figcaption></figure>","autoDesc":true}');export{m as comp,b as data};
