import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,b as n,d as a,e as t,a as e}from"./app-7RQdUJPT.js";const l="/assets/image-20240424144856481-0crb4rQp.png",u="/assets/image-20240424145000570-CmsFKTfE.png",r={},d=e('<h1 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h1><figure><img src="'+l+'" alt="image-20240424144856481" tabindex="0" loading="lazy"><figcaption>image-20240424144856481</figcaption></figure><p>Hibernate作为一种ORM解决方案，位于应用程序数据访问层和关系数据库之间，如上图所示。 Java 应用程序利用 Hibernate API 来加载、存储、查询等其域数据。</p><p>作为 Jakarta Persistence 提供商，Hibernate 实现了 Java Persistence API 规范，Jakarta Persistence 接口与 Hibernate 特定实现之间的关联可以在下图中可视化：</p><figure><img src="'+u+`" alt="image-20240424145000570" tabindex="0" loading="lazy"><figcaption>image-20240424145000570</figcaption></figure><ul><li><p>SessionFactory (<code>org.hibernate.SessionFactory</code>)：线程安全，表示域模型到DB的映射。充当org.hibernate.Session实例的工厂。Jakarta Persistence中的EntityManagerFactory是与SessionFactory等效的，这两个元素使用相同的SessionFactory实现。</p><p>SessionFactory的创建非常昂贵，因此，对于任何给定的数据库，应用程序应该只有一个关联的SessionFactory。SessionFactory维护Hibernate在所有会话中使用的服务，如二级缓存、连接池、事务系统集成等。</p></li><li><p>Session (<code>org.hibernate.Session</code>)：单线程， 在Jakarta Persistence术语中，会话由EntityManager表示。在幕后，Hibernate Session包装了一个JDBC java.sql.Connection，并充当org.ibernate.Transaction实例的工厂。它维护应用程序域模型的一般“可重复读取”持久性上下文（一级缓存）。</p></li><li><p>Transaction (<code>org.hibernate.Transaction</code>)： 单线程，与Jakarta Persistence 中的 EntityTransaction等效，两者都充当抽象API，将应用程序与正在使用的底层事务系统（JDBC或JTA）隔离开来。</p></li></ul><h1 id="域模型" tabindex="-1"><a class="header-anchor" href="#域模型"><span>域模型</span></a></h1><p>Hibernate同时理解应用程序数据的Java和JDBC表示。Hibernate类型的功能是从数据库中读取/写入数据。在这种用法中，类型是org.ibernate.type.type接口的实现。该Hibernate类型还描述了Java类型的各种行为方面，例如如何检查相等性、如何克隆值等。</p><p>Hibernate类型既不是Java类型，也不是SQL数据类型。它提供了有关将Java类型映射到SQL类型的信息，以及如何将给定的Java类型持久化并从关系数据库中获取。 为了帮助理解类型分类，让我们看一个表和域模型的简单映射。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> Contact <span class="token punctuation">(</span>
    id <span class="token keyword">integer</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    <span class="token keyword">first</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">last</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    middle <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    notes <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    starred <span class="token keyword">boolean</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    website <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Contact&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Contact</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">Name</span> name<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">String</span> notes<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">URL</span> website<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token keyword">boolean</span> starred<span class="token punctuation">;</span>

	<span class="token comment">//Getters and setters are omitted for brevity</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Embeddable</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Name</span> <span class="token punctuation">{</span>

	<span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">String</span> middleName<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>

	<span class="token comment">// getters and setters omitted</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从广义上讲，Hibernate将类型分为两组：</p><ul><li>值类型</li><li>实体类型</li></ul><h2 id="值类型" tabindex="-1"><a class="header-anchor" href="#值类型"><span>值类型</span></a></h2><p>值类型是一段不定义其自身生命周期的数据。实际上，它由一个实体拥有，该实体定义了它的生命周期。从另一个角度来看，实体的所有状态都完全由值类型组成。这些状态字段或JavaBean 属性称为持久属性。Contact类的持久属性是值类型。</p><p>值类型进一步分为三类：</p><ul><li>基本类型:在映射Contact表时，除了name之外的所有属性都将是基本类型。</li><li>嵌入类型：name属性属于嵌入类型</li><li>集合类型：虽然在前面的示例中没有出现，但集合类型在值类型中也是一个独特的类别</li></ul><h2 id="实体类型" tabindex="-1"><a class="header-anchor" href="#实体类型"><span>实体类型</span></a></h2><p>实体由于其唯一标识符的性质，独立于其他对象而存在。实体是使用唯一标识符与数据库表中的行相关的域模型类。由于需要唯一标识符，实体独立存在并定义自己的生命周期。Contact类本身就是一个实体的示例。</p><h1 id="基本类型" tabindex="-1"><a class="header-anchor" href="#基本类型"><span>基本类型</span></a></h1><p>基本类型是Java类型和单个数据库列之间的映射。Hibernate可以将许多标准Java类型（Integer、String等）映射为基本类型。此外，Hibernate提供了多种灵活的方式来指示Java类型应该如何映射到数据库。</p><p>Jakarta Persistence规范严格限制那些Java类型可以标记为basic,如下：</p><table><thead><tr><th style="text-align:left;">Category</th><th style="text-align:left;">Package</th><th style="text-align:left;">Types</th></tr></thead><tbody><tr><td style="text-align:left;">Java primitive types</td><td style="text-align:left;"></td><td style="text-align:left;"><code>boolean</code>, <code>int</code>, <code>double</code>, etc.</td></tr><tr><td style="text-align:left;">Primitive wrappers</td><td style="text-align:left;"><code>java.lang</code></td><td style="text-align:left;"><code>Boolean</code>, <code>Integer</code>, <code>Double</code>, etc.</td></tr><tr><td style="text-align:left;">Strings</td><td style="text-align:left;"><code>java.lang</code></td><td style="text-align:left;"><code>String</code></td></tr><tr><td style="text-align:left;">Arbitrary-precision numeric types</td><td style="text-align:left;"><code>java.math</code></td><td style="text-align:left;"><code>BigInteger</code> and <code>BigDecimal</code></td></tr><tr><td style="text-align:left;">Date/time types</td><td style="text-align:left;"><code>java.time</code></td><td style="text-align:left;"><code>LocalDate</code>, <code>LocalTime</code>, <code>LocalDateTime</code>, <code>OffsetTime</code>, <code>OffsetDateTime</code>, <code>Instant</code></td></tr><tr><td style="text-align:left;">Deprecated date/time types</td><td style="text-align:left;"><code>java.util</code></td><td style="text-align:left;"><code>Date</code> and <code>Calendar</code></td></tr><tr><td style="text-align:left;">Deprecated date/time types from</td><td style="text-align:left;"><code>java.sql</code></td><td style="text-align:left;"><code>Date</code>, <code>Time</code>, <code>Timestamp</code></td></tr><tr><td style="text-align:left;">Byte and character arrays</td><td style="text-align:left;"></td><td style="text-align:left;"><code>byte[]</code> or <code>Byte[]</code>, <code>char[]</code> or <code>Character[]</code></td></tr><tr><td style="text-align:left;">Java enumerated types</td><td style="text-align:left;"></td><td style="text-align:left;">Any <code>enum</code></td></tr><tr><td style="text-align:left;">Serializable types</td><td style="text-align:left;"></td><td style="text-align:left;">Any type that implements <code>java.io.Serializable</code></td></tr></tbody></table><blockquote><p>Java Persistence 2.1引入了jakarta.Persistence.AttributeConverter，它支持处理规范中定义的类型以外的类型。有关此主题的详细信息，请参阅AttributeConverters。</p></blockquote><h3 id="basic" tabindex="-1"><a class="header-anchor" href="#basic"><span>@Basic</span></a></h3><p>严格来说，基本类型由jakarta.persistence.basic注释表示。通常，@Basic注释可以被忽略。以下两个示例最终都是相同的。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Product&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Id</span>
	<span class="token annotation punctuation">@Basic</span>
	<span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Basic</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> sku<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Basic</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Basic</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Product&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">String</span> sku<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@Basic 定义了两个属性：</p><ul><li><code>optional</code> - boolean (默认true)：定义此属性是否允许空值。如果属性是java的基础类型，则该属性被忽略。只要类型不是基础类型，Hibernate就会接受这个值。</li><li><code>fetch</code> - FetchType (默认EAGER)：EAGER表示将作为所有者的一部分获取该值。LAZY表示仅当访问值时才获取值。Jakarta Persistence要求提供程序支持EAGER，而对LAZY的支持是可选的。只要您使用其字节码增强支持，Hibernate就支持延迟加载。</li></ul><h3 id="column" tabindex="-1"><a class="header-anchor" href="#column"><span>@Column</span></a></h3><p>Jakarta Persistence隐式确定表和列名称的规则。对于基本类型属性，隐式命名规则是：<code>列名与属性名相同</code>。如果隐式命名规则不符合您的要求，您可以明确告诉Hibernate（和其他提供程序）要使用的列名。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Product&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">String</span> sku<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;NOTES&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="formula" tabindex="-1"><a class="header-anchor" href="#formula"><span>@Formula</span></a></h3><p>@Formula允许将任何数据库计算值映射为虚拟只读列。</p><blockquote><p>@Formula注释采用可能影响数据库可移植性的 native SQL子句。@Formula是Hibernate特有的映射构造，Jakarta Persistence没有涉及。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Account&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">Double</span> credit<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">Double</span> rate<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Formula</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;credit * rate&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">Double</span> interest<span class="token punctuation">;</span>

	<span class="token comment">//Getters and setters omitted for brevity</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加载Account实体时，Hibernate将使用配置的@Formula计算interest属性：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">doInJPA</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">entityManagerFactory</span><span class="token punctuation">,</span> entityManager <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
	<span class="token class-name">Account</span> account <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	account<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	account<span class="token punctuation">.</span><span class="token function">setCredit</span><span class="token punctuation">(</span><span class="token number">5000d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	account<span class="token punctuation">.</span><span class="token function">setRate</span><span class="token punctuation">(</span><span class="token number">1.25</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	entityManager<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">doInJPA</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">entityManagerFactory</span><span class="token punctuation">,</span> entityManager <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
	<span class="token class-name">Account</span> account <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Account</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">62.5d</span><span class="token punctuation">)</span><span class="token punctuation">,</span> account<span class="token punctuation">.</span><span class="token function">getInterest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token class-name">Account</span> <span class="token punctuation">(</span>credit<span class="token punctuation">,</span> rate<span class="token punctuation">,</span> id<span class="token punctuation">)</span>
<span class="token constant">VALUES</span> <span class="token punctuation">(</span><span class="token number">5000.0</span><span class="token punctuation">,</span> <span class="token number">0.0125</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>

<span class="token constant">SELECT</span>
    a<span class="token punctuation">.</span>id as id1_0_0_<span class="token punctuation">,</span>
    a<span class="token punctuation">.</span>credit as credit2_0_0_<span class="token punctuation">,</span>
    a<span class="token punctuation">.</span>rate as rate3_0_0_<span class="token punctuation">,</span>
    a<span class="token punctuation">.</span>credit <span class="token operator">*</span> a<span class="token punctuation">.</span>rate as formula0_0_
<span class="token constant">FROM</span>
    <span class="token class-name">Account</span> a
<span class="token constant">WHERE</span>
    a<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@Formula注释定义的SQL片段可以任意复杂，甚至可以包含子查询。</p><h3 id="映射基本类型" tabindex="-1"><a class="header-anchor" href="#映射基本类型"><span>映射基本类型</span></a></h3><p>为了处理基本类型的值，Hibernate需要了解一些有关映射的信息：</p><ul><li><p>Java类型的方法。例如：</p><ul><li><p>如何比较值</p></li><li><p>如何计算哈希码</p></li><li><p>如何将此类型的值强制为另一类型</p></li></ul></li><li><p>使用的JDBC类型</p><ul><li><p>如何将值绑定到JDBC语句</p></li><li><p>如何从JDBC结果中提取</p></li></ul></li><li><p>它应该对与数据库之间的值执行任何转换</p></li><li><p>值的可变性-内部状态是可以像java.util.Date一样改变，还是像java.lang.String一样不可变</p></li></ul><p>本节介绍Hibernate如何确定这些片段，以及确定的过程。</p><p>映射主要由定义的基本java类型确定，这主要由反射实现。回退是将值映射到推荐的JDBC类型。最坏的情况是，如果Java类型是可序列化的，Hibernate将尝试通过二进制序列化来处理它。</p><p>对于Java类型不是标准类型的情况，或者如果需要一些专门的处理，Hibernate提供了两种主要方法来影响映射解析：</p><ul><li>多个注解组合处理</li><li>用户自定义</li></ul><p>这两种方法应视为互斥。自定义UserType始终优先于组合注释。</p><h3 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举"><span>枚举</span></a></h3><p>Hibernate以多种不同的方式支持将Java枚举映射为基本值类型。</p><h4 id="enumerated" tabindex="-1"><a class="header-anchor" href="#enumerated"><span><code>@Enumerated</code></span></a></h4><p>最初，与Jakarta Persistence兼容的映射枚举的方法是通过@Enumerated或@MapKeyEnumered注释，其原理是根据Jakarta.Persistence.EnumType指示的两种策略之一存储枚举值：</p><ul><li>ORDINAL：根据枚举值在枚举类中的序号位置存储，如java.lang.enum#ordinal</li><li>STRING：根据枚举值的名称存储，如java.lang.enum#name所示</li></ul><p>例如下面的枚举类型：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">PhoneType</span> <span class="token punctuation">{</span>
    <span class="token constant">LAND_LINE</span><span class="token punctuation">,</span>
    <span class="token constant">MOBILE</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在ORDINAL示例中，phone_type列被定义为（可为空）INTEGER类型，其值为：</p><ul><li>NULL： 空值</li><li>0： LAND_LINE值</li><li>1： MOBILE值</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Phone&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;phone_number&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> number<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Enumerated</span><span class="token punctuation">(</span><span class="token class-name">EnumType</span><span class="token punctuation">.</span><span class="token constant">ORDINAL</span><span class="token punctuation">)</span>
	<span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;phone_type&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">PhoneType</span> type<span class="token punctuation">;</span>

	<span class="token comment">//Getters and setters are omitted for brevity</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Phone</span> phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
phone<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
phone<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token string">&quot;123-456-78990&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
phone<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">PhoneType</span><span class="token punctuation">.</span><span class="token constant">MOBILE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
entityManager<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Phone <span class="token punctuation">(</span>phone_number<span class="token punctuation">,</span> phone_type<span class="token punctuation">,</span> id<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;123-456-78990&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在STRING示例中，phone_type列被定义为（可为空）VARCHAR类型，其值可能为：</p><ul><li>NULL</li><li>LAND_LINE</li><li>MOBILE</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Phone&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;phone_number&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> number<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Enumerated</span><span class="token punctuation">(</span><span class="token class-name">EnumType</span><span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">)</span>
	<span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;phone_type&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">PhoneType</span> type<span class="token punctuation">;</span>

	<span class="token comment">//Getters and setters are omitted for brevity</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Phone <span class="token punctuation">(</span>phone_number<span class="token punctuation">,</span> phone_type<span class="token punctuation">,</span> id<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;123-456-78990&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;MOBILE&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用属性转化器" tabindex="-1"><a class="header-anchor" href="#使用属性转化器"><span>使用属性转化器</span></a></h4><p>让我们考虑以下使用“M”和“F”代码存储其值的Gender枚举。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Gender</span> <span class="token punctuation">{</span>

    <span class="token function">MALE</span><span class="token punctuation">(</span><span class="token char">&#39;M&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">FEMALE</span><span class="token punctuation">(</span><span class="token char">&#39;F&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> code<span class="token punctuation">;</span>

    <span class="token class-name">Gender</span><span class="token punctuation">(</span><span class="token keyword">char</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Gender</span> <span class="token function">fromCode</span><span class="token punctuation">(</span><span class="token keyword">char</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">==</span> <span class="token char">&#39;M&#39;</span> <span class="token operator">||</span> code <span class="token operator">==</span> <span class="token char">&#39;m&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token constant">MALE</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">==</span> <span class="token char">&#39;F&#39;</span> <span class="token operator">||</span> code <span class="token operator">==</span> <span class="token char">&#39;f&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token constant">FEMALE</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span>
            <span class="token string">&quot;The code &quot;</span> <span class="token operator">+</span> code <span class="token operator">+</span> <span class="token string">&quot; is not supported!&quot;</span>
       <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以使用Jakarta Persistence AttributeConverter以符合Jakarta Persistence的方式映射枚举。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Person&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Convert</span><span class="token punctuation">(</span>converter <span class="token operator">=</span> <span class="token class-name">GenderConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">Gender</span> gender<span class="token punctuation">;</span>

	<span class="token comment">//Getters and setters are omitted for brevity</span>

<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Converter</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">GenderConverter</span>
		<span class="token keyword">implements</span> <span class="token class-name">AttributeConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Gender</span><span class="token punctuation">,</span> <span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token class-name">Character</span> <span class="token function">convertToDatabaseColumn</span><span class="token punctuation">(</span><span class="token class-name">Gender</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token class-name">Gender</span> <span class="token function">convertToEntityAttribute</span><span class="token punctuation">(</span><span class="token class-name">Character</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">return</span> <span class="token class-name">Gender</span><span class="token punctuation">.</span><span class="token function">fromCode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自定义类型" tabindex="-1"><a class="header-anchor" href="#自定义类型"><span>自定义类型</span></a></h4><p>还可以使用Hibernate自定义类型映射来映射enum。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Person&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Type</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>userguide<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span>basic<span class="token punctuation">.</span></span>GenderType</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">Gender</span> gender<span class="token punctuation">;</span>

	<span class="token comment">//Getters and setters are omitted for brevity</span>

<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenderType</span> <span class="token keyword">extends</span> <span class="token class-name">UserTypeSupport</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Gender</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">GenderType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Gender</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span><span class="token constant">CHAR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenderJavaType</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractClassJavaType</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Gender</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">GenderJavaType</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span>
        <span class="token keyword">new</span> <span class="token class-name">GenderJavaType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token class-name">GenderJavaType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Gender</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">Gender</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> value <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> value<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Gender</span> <span class="token function">fromString</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> string <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token class-name">Gender</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">X</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">X</span> <span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token class-name">Gender</span> value<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">X</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">,</span> <span class="token class-name">WrapperOptions</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">CharacterJavaType</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span>
            value <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> value<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            type<span class="token punctuation">,</span>
            options
       <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">X</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Gender</span> <span class="token function">wrap</span><span class="token punctuation">(</span><span class="token class-name">X</span> value<span class="token punctuation">,</span> <span class="token class-name">WrapperOptions</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Gender</span><span class="token punctuation">.</span><span class="token function">fromCode</span><span class="token punctuation">(</span>
				<span class="token class-name">CharacterJavaType</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span> value<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
       <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="boolean" tabindex="-1"><a class="header-anchor" href="#boolean"><span>Boolean</span></a></h3><p>默认情况下，Boolean属性映射到Boolean列，至少在数据库具有专用Boolean类型时是如此。在没有的数据库上，Hibernate使用任何其他可用的：BIT、TINYINT或SMALLINT。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// this will be mapped to BIT or BOOLEAN on the database</span>
<span class="token annotation punctuation">@Basic</span>
<span class="token keyword">boolean</span> implicit<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，找到编码为字符或整数的布尔值是很常见的。这种情况正是AttributeConverter的意图。为了方便起见，Hibernate为常见的布尔映射情况提供了3个内置转换器：</p><ul><li>YesNoConverter将布尔值编码为“Y”或“N”，</li><li>TrueFalseConverter将布尔值编码为“T”或“F”，</li><li>NumericBooleanConverter将值编码为整数，1表示真，0表示假。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// this will get mapped to CHAR or NCHAR with a conversion</span>
<span class="token annotation punctuation">@Basic</span>
<span class="token annotation punctuation">@Convert</span><span class="token punctuation">(</span>converter <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>type<span class="token punctuation">.</span></span>YesNoConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">boolean</span> convertedYesNo<span class="token punctuation">;</span>

<span class="token comment">// this will get mapped to CHAR or NCHAR with a conversion</span>
<span class="token annotation punctuation">@Basic</span>
<span class="token annotation punctuation">@Convert</span><span class="token punctuation">(</span>converter <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>type<span class="token punctuation">.</span></span>TrueFalseConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">boolean</span> convertedTrueFalse<span class="token punctuation">;</span>

<span class="token comment">// this will get mapped to TINYINT with a conversion</span>
<span class="token annotation punctuation">@Basic</span>
<span class="token annotation punctuation">@Convert</span><span class="token punctuation">(</span>converter <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>type<span class="token punctuation">.</span></span>NumericBooleanConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">boolean</span> convertedNumeric<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在数据库中将布尔值定义为boolean、字符或整数以外的值，则也可以使用自定义AttributeConverter映射该值.</p><h3 id="byte" tabindex="-1"><a class="header-anchor" href="#byte"><span>Byte</span></a></h3><p>默认情况下，Hibernate将Byte/byte的值映射到TINYINT JDBC类型。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// these will both be mapped using TINYINT</span>
<span class="token class-name">Byte</span> wrapper<span class="token punctuation">;</span>
<span class="token keyword">byte</span> primitive<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="short" tabindex="-1"><a class="header-anchor" href="#short"><span>Short</span></a></h3><p>默认情况下，Hibernate将short/Short的值映射到SMALLINT JDBC类型。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// these will both be mapped using SMALLINT</span>
<span class="token class-name">Short</span> wrapper<span class="token punctuation">;</span>
<span class="token keyword">short</span> primitive<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="integer" tabindex="-1"><a class="header-anchor" href="#integer"><span>Integer</span></a></h3><p>默认情况下，Hibernate将Integer/int值映射到Integer JDBC类型。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// these will both be mapped using INTEGER</span>
<span class="token class-name">Integer</span> wrapper<span class="token punctuation">;</span>
<span class="token keyword">int</span> primitive<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="long" tabindex="-1"><a class="header-anchor" href="#long"><span>Long</span></a></h3><p>默认情况下，Hibernate将Long/Long值映射到BIGINT JDBC类型。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// these will both be mapped using BIGINT</span>
<span class="token class-name">Long</span> wrapper<span class="token punctuation">;</span>
<span class="token keyword">long</span> primitive<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="biginteger" tabindex="-1"><a class="header-anchor" href="#biginteger"><span>BigInteger</span></a></h3><p>默认情况下，Hibernate将BigInteger的值映射到NUMERIC JDBC类型。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// will be mapped using NUMERIC</span>
<span class="token class-name">BigInteger</span> wrapper<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="double" tabindex="-1"><a class="header-anchor" href="#double"><span>Double</span></a></h3><p>默认情况下，Hibernate将Double的值映射到Double、FLOAT、REAL或NUMERIC JDBC类型，具体取决于数据库的功能</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// these will be mapped using DOUBLE, FLOAT, REAL or NUMERIC</span>
<span class="token comment">// depending on the capabilities of the database</span>
<span class="token class-name">Double</span> wrapper<span class="token punctuation">;</span>
<span class="token keyword">double</span> primitive<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用[基本映射显式]部分中介绍的任何JDBC类型影响因素来影响特定类型。 如果使用@JdbcTypeCode，则仍会查询方言以确保数据库支持请求的类型。如果没有，则选择适当的类型</p><h3 id="float" tabindex="-1"><a class="header-anchor" href="#float"><span>Float</span></a></h3><p>默认情况下，Hibernate根据数据库的功能将Float的值映射到Float、REAL或NUMERIC JDBC类型。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// these will be mapped using FLOAT, REAL or NUMERIC</span>
<span class="token comment">// depending on the capabilities of the database</span>
<span class="token class-name">Float</span> wrapper<span class="token punctuation">;</span>
<span class="token keyword">float</span> primitive<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用[基本映射显式]部分中介绍的任何JDBC类型影响因素来影响特定类型。 如果使用@JdbcTypeCode，则仍会查询方言以确保数据库支持请求的类型。如果没有，则选择适当的类型</p><h3 id="bigdecimal" tabindex="-1"><a class="header-anchor" href="#bigdecimal"><span>BigDecimal</span></a></h3><p>默认情况下，Hibernate将BigDecimal的值映射到NUMERIC JDBC类型。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// will be mapped using NUMERIC</span>
<span class="token class-name">BigDecimal</span> wrapper<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="character" tabindex="-1"><a class="header-anchor" href="#character"><span>Character</span></a></h3><p>默认情况下，Hibernate将Character映射到CHAR JDBC类型。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// these will be mapped using CHAR</span>
<span class="token class-name">Character</span> wrapper<span class="token punctuation">;</span>
<span class="token keyword">char</span> primitive<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>String</span></a></h3><p>默认情况下，Hibernate将String映射到VARCHAR JDBC类型。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// will be mapped using VARCHAR</span>
<span class="token class-name">String</span> string<span class="token punctuation">;</span>

<span class="token comment">// will be mapped using CLOB</span>
<span class="token annotation punctuation">@Lob</span>
<span class="token class-name">String</span> clobString<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，可以使用@Column(length=…), 或者使用Hibernate Validator的@Size注释。对于非常大的字符串，可以使用org.hibernate.Length类定义的常量值之一，例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token class-name">Length</span><span class="token punctuation">.</span><span class="token constant">LONG</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，您可以显式指定JDBC类型LONGVARCHAR，当未显式指定长度时，它被视为默认长度为length.LONG的VARCHAR映射：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@JdbcTypeCode</span><span class="token punctuation">(</span><span class="token class-name">Types</span><span class="token punctuation">.</span><span class="token constant">LONGVARCHAR</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用Hibernate生成模式，Hibernate将生成具有足够大的列类型的DDL，以容纳指定的最大长度。</p><blockquote><p>如果指定的最大长度太长，无法容纳数据库支持的最大VARCHAR列，Hibernate的模式导出器将自动将列类型升级为TEXT、CLOB或数据库的等效类型。请不要因为需要TEXT列就使用JPA的@Lob注释。@Lob注释的目的不是控制DDL生成！</p></blockquote><p>对于支持国际化字符集的数据库，还可以将字符串存储为国际化数据。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// will be mapped using NVARCHAR</span>
<span class="token annotation punctuation">@Nationalized</span>
<span class="token class-name">String</span> nstring<span class="token punctuation">;</span>

<span class="token comment">// will be mapped using NCLOB</span>
<span class="token annotation punctuation">@Lob</span>
<span class="token annotation punctuation">@Nationalized</span>
<span class="token class-name">String</span> nclobString<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符数组" tabindex="-1"><a class="header-anchor" href="#字符数组"><span>字符数组</span></a></h3><p>默认情况下，Hibernate将Character[]和char[]映射到VARCHAR JDBC类型。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// mapped as VARCHAR</span>
<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> primitive<span class="token punctuation">;</span>
<span class="token class-name">Character</span><span class="token punctuation">[</span><span class="token punctuation">]</span> wrapper<span class="token punctuation">;</span>

<span class="token comment">// mapped as CLOB</span>
<span class="token annotation punctuation">@Lob</span>
<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> primitiveClob<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Lob</span>
<span class="token class-name">Character</span><span class="token punctuation">[</span><span class="token punctuation">]</span> wrapperClob<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于支持国有化字符集的数据库，还可以将字符数组存储为国有化数据。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// mapped as NVARCHAR</span>
<span class="token annotation punctuation">@Nationalized</span>
<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> primitiveNVarchar<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Nationalized</span>
<span class="token class-name">Character</span><span class="token punctuation">[</span><span class="token punctuation">]</span> wrapperNVarchar<span class="token punctuation">;</span>

<span class="token comment">// mapped as NCLOB</span>
<span class="token annotation punctuation">@Lob</span>
<span class="token annotation punctuation">@Nationalized</span>
<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> primitiveNClob<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Lob</span>
<span class="token annotation punctuation">@Nationalized</span>
<span class="token class-name">Character</span><span class="token punctuation">[</span><span class="token punctuation">]</span> wrapperNClob<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="clob-nclob" tabindex="-1"><a class="header-anchor" href="#clob-nclob"><span>Clob / NClob</span></a></h3><p>默认情况下，Hibernate将java.sql.Clob类型映射到Clob，java.sql.NClob映射到NClob。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Product <span class="token punctuation">(</span>
  id <span class="token keyword">INTEGER</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  warranty CLOB<span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们首先使用@Lob Jakarta Persistence注释和java.sql.Clob类型来映射它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Product&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Id</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Lob</span>
    <span class="token keyword">private</span> <span class="token class-name">Clob</span> warranty<span class="token punctuation">;</span>

    <span class="token comment">//Getters and setters are omitted for brevity</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要持久化这样的实体，必须使用Hibernate实用程序 ClobProxy 创建Clob：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> warranty <span class="token operator">=</span> <span class="token string">&quot;My product warranty&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">final</span> <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
product<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
product<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;Mobile phone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

product<span class="token punctuation">.</span><span class="token function">setWarranty</span><span class="token punctuation">(</span><span class="token class-name">ClobProxy</span><span class="token punctuation">.</span><span class="token function">generateProxy</span><span class="token punctuation">(</span>warranty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

entityManager<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要检索Clob内容，需要转换底层java.io.Reader：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Product</span> product <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Product</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Reader</span> reader <span class="token operator">=</span> product<span class="token punctuation">.</span><span class="token function">getWarranty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCharacterStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;My product warranty&quot;</span><span class="token punctuation">,</span> <span class="token function">toString</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还可以以物化形式映射CLOB。这样，我们可以使用String或char[]。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Product&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Lob</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> warranty<span class="token punctuation">;</span>

	<span class="token comment">//Getters and setters are omitted for brevity</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们甚至可能希望将物化数据作为字符数组。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Product&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Lob</span>
	<span class="token keyword">private</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> warranty<span class="token punctuation">;</span>

	<span class="token comment">//Getters and setters are omitted for brevity</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与CLOB一样，Hibernate也可以处理NCLOB SQL数据类型</p><h3 id="byte-array" tabindex="-1"><a class="header-anchor" href="#byte-array"><span>Byte array</span></a></h3><p>默认情况下，Hibernate将byte[]和byte[]类型的值映射到JDBC类型VARBINARY。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// mapped as VARBINARY</span>
<span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> primitive<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">Byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> wrapper<span class="token punctuation">;</span>

<span class="token comment">// mapped as (materialized) BLOB</span>
<span class="token annotation punctuation">@Lob</span>
<span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> primitiveLob<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Lob</span>
<span class="token keyword">private</span> <span class="token class-name">Byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> wrapperLob<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与字符串一样，可以使用@Column（length=…) 或Hibernate Validator的@Size注释。对于非常大的数组，可以使用org.hibernate.Length定义的常量。或者，如果没有显式指定长度，@JdbcTypeCode（Types.LONGVARBINARY）将被视为VARBINARY映射，默认长度为Length.LONG。</p><p>如果使用Hibernate生成模式，Hibernate将生成具有足够大的列类型的DDL，以容纳指定的最大长度。</p><h3 id="blob" tabindex="-1"><a class="header-anchor" href="#blob"><span>Blob</span></a></h3><p>默认情况下，Hibernate将java.sql.Blob java类型映射到Blob。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Product <span class="token punctuation">(</span>
    id <span class="token keyword">INTEGER</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>
    image <span class="token keyword">blob</span> <span class="token punctuation">,</span>
    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span> id <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们首先使用JDBCjava.sql.Blob类型映射它。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Product&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Id</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Lob</span>
    <span class="token keyword">private</span> <span class="token class-name">Blob</span> image<span class="token punctuation">;</span>

    <span class="token comment">//Getters and setters are omitted for brevity</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要持久化这样的实体，必须使用BlobProxy Hibernate实用程序创建Blob：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">final</span> <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
product<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
product<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;Mobile phone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

product<span class="token punctuation">.</span><span class="token function">setImage</span><span class="token punctuation">(</span><span class="token class-name">BlobProxy</span><span class="token punctuation">.</span><span class="token function">generateProxy</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

entityManager<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要检索Blob内容，需要转换底层java.io.InputStream：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Product</span> product <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Product</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> product<span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBinaryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertArrayEquals</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">toBytes</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还可以以物化形式（例如byte[]）映射BLOB。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Product&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Id</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Lob</span>
    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> image<span class="token punctuation">;</span>

    <span class="token comment">//Getters and setters are omitted for brevity</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="duration" tabindex="-1"><a class="header-anchor" href="#duration"><span>Duration</span></a></h3><p>默认情况下，Hibernate会将Duration映射到INTERVAL_SECOND SQL类型，并在必要时回退到NUMERIC。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Duration</span> duration<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="instant" tabindex="-1"><a class="header-anchor" href="#instant"><span>Instant</span></a></h3><p>Instant映射到TIMESTAMP_UTC SQL类型。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// mapped as TIMESTAMP</span>
<span class="token keyword">private</span> <span class="token class-name">Instant</span> instant<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="localdate" tabindex="-1"><a class="header-anchor" href="#localdate"><span>LocalDate</span></a></h4><p>LocalDate映射到DATE JDBC类型。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// mapped as DATE</span>
<span class="token keyword">private</span> <span class="token class-name">LocalDate</span> localDate<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="localdatetime" tabindex="-1"><a class="header-anchor" href="#localdatetime"><span>LocalDateTime</span></a></h3><p>LocalDateTime映射到TIMESTAMP JDBC类型。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// mapped as TIMESTAMP</span>
<span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> localDateTime<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="localtime" tabindex="-1"><a class="header-anchor" href="#localtime"><span>LocalTime</span></a></h3><p>LocalTime映射到TIME JDBC类型。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// mapped as TIME</span>
<span class="token keyword">private</span> <span class="token class-name">LocalTime</span> localTime<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="offsetdatetime" tabindex="-1"><a class="header-anchor" href="#offsetdatetime"><span>OffsetDateTime</span></a></h3><p>OffsetDateTime映射到TIMESTAMP或TIMESTAMP_WITH_TIMEZONE JDBC类型，具体取决于数据库。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// mapped as TIMESTAMP or TIMESTAMP_WITH_TIMEZONE</span>
<span class="token keyword">private</span> <span class="token class-name">OffsetDateTime</span> offsetDateTime<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="offsettime" tabindex="-1"><a class="header-anchor" href="#offsettime"><span>OffsetTime</span></a></h3><p>OffsetTime映射到TIME或TIME_WITH_TIMEZONE JDBC类型，具体取决于数据库。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// mapped as TIME or TIME_WITH_TIMEZONE</span>
<span class="token keyword">private</span> <span class="token class-name">OffsetTime</span> offsetTime<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="timezone" tabindex="-1"><a class="header-anchor" href="#timezone"><span>TimeZone</span></a></h3><p>TimeZone映射到VARCHAR JDBC类型。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// mapped as VARCHAR</span>
<span class="token keyword">private</span> <span class="token class-name">TimeZone</span> timeZone<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="zoneddatetime" tabindex="-1"><a class="header-anchor" href="#zoneddatetime"><span>ZonedDateTime</span></a></h3><p>ZonedDateTime映射到TIMESTAMP或TIMESTAMP_WITH_TIMEZONE JDBC类型，具体取决于数据库。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// mapped as TIMESTAMP or TIMESTAMP_WITH_TIMEZONE</span>
<span class="token keyword">private</span> <span class="token class-name">ZonedDateTime</span> zonedDateTime<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="zoneoffset" tabindex="-1"><a class="header-anchor" href="#zoneoffset"><span>ZoneOffset</span></a></h4><p>ZoneOffset映射到VARCHAR JDBC类型。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// mapped as VARCHAR</span>
<span class="token keyword">private</span> <span class="token class-name">ZoneOffset</span> zoneOffset<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="calendar、date、time、timestamp" tabindex="-1"><a class="header-anchor" href="#calendar、date、time、timestamp"><span>Calendar、Date、Time、Timestamp</span></a></h3><h3 id="class" tabindex="-1"><a class="header-anchor" href="#class"><span>Class</span></a></h3><p>Hibernate将类引用映射到VARCHAR JDBC类型</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// mapped as VARCHAR</span>
<span class="token keyword">private</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="currency" tabindex="-1"><a class="header-anchor" href="#currency"><span>Currency</span></a></h3><p>Hibernate将Currency引用映射到VARCHAR JDBC类型</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// mapped as VARCHAR</span>
<span class="token keyword">private</span> <span class="token class-name">Currency</span> currency<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="locale" tabindex="-1"><a class="header-anchor" href="#locale"><span>Locale</span></a></h3><p>Hibernate将Locale引用映射到VARCHAR JDBC类型</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// mapped as VARCHAR</span>
<span class="token keyword">private</span> <span class="token class-name">Locale</span> locale<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="uuid" tabindex="-1"><a class="header-anchor" href="#uuid"><span>UUID</span></a></h3><p>Hibernate允许以多种方式映射UUID值。默认情况下，Hibernate将使用SQL类型UUID以本机形式存储UUID值，如果数据库没有本机UUID类型，则使用binary JDBC类型以二进制形式存储UUD值。</p><p>默认值使用二进制表示，因为它使用了更高效的列存储。然而，许多应用程序更喜欢基于字符的列存储的可读性。要切换默认映射，请将hibernate.type.preferred_uuid_jdbc_type配置设置为CHAR。</p><h5 id="uuid-as-binary" tabindex="-1"><a class="header-anchor" href="#uuid-as-binary"><span>UUID as binary</span></a></h5><p>如上所述，UUID属性的默认映射使用java.util.UUID#getMostSignificantBits和java.util.UUID#getLeastSignificantBit将UUID映射到byte[]，并将其存储为BINARY数据。之所以选择为默认值，只是因为从存储角度来看，它通常更高效。</p><h5 id="uuid-as-var-char" tabindex="-1"><a class="header-anchor" href="#uuid-as-var-char"><span>UUID as (var)char</span></a></h5><p>使用java.util.UUID#toString和java.util.UUID#fromString将UUID映射到字符串，并将其存储为CHAR或VARCHAR数据。</p><h5 id="uuid-as-identifier" tabindex="-1"><a class="header-anchor" href="#uuid-as-identifier"><span>UUID as identifier</span></a></h5><p>Hibernate支持使用UUID值作为标识符，甚至可以代表用户生成UUID值。</p><h3 id="inetaddress" tabindex="-1"><a class="header-anchor" href="#inetaddress"><span>InetAddress</span></a></h3><p>默认情况下，Hibernate将InetAddress映射到INET SQL类型，并在必要时回退到BINARY。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">InetAddress</span> address<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="json-mapping" tabindex="-1"><a class="header-anchor" href="#json-mapping"><span>JSON mapping</span></a></h3><p>如果通过@JdbcTypeCode（SqlTypes.JSON）显式配置，Hibernate将仅使用JSON类型。自动检测用于序列化/反序列化的JSON库，但可以通过设置hibernate.type.JSON_format_mapper来覆盖。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@JdbcTypeCode</span><span class="token punctuation">(</span> <span class="token class-name">SqlTypes</span><span class="token punctuation">.</span><span class="token constant">JSON</span> <span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> payload<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="xml-mapping" tabindex="-1"><a class="header-anchor" href="#xml-mapping"><span>XML mapping</span></a></h3><p>如果通过@JdbcTypeCode（SqlTypes.SQLXML）显式配置，Hibernate将仅使用XML类型。用于序列化/反序列化的XML库是自动检测的，但可以通过设置hibernate.type.XML_format_mapper来覆盖。</p><h3 id="基本数组映射" tabindex="-1"><a class="header-anchor" href="#基本数组映射"><span>基本数组映射</span></a></h3><p>基本数组，而不是byte[]/Byte[]和char[]/Character[]，默认情况下映射到类型SqlTypes.ARRAY，如果可能，它映射到SQL标准array类型，这是通过org.ibernate.dialect.dialect的新方法getArrayTypeName和supportsStandardArrays确定的。如果SQL标准数组类型不可用，数据将被建模为SqlTypes.JSON、SqlTypes.XML或SqlTypes.VARBINARY，这取决于通过新方法org.ibernate.dialect.dialect.getPreferredSqlTypeCodeForArray确定的数据库支持。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Short</span><span class="token punctuation">[</span><span class="token punctuation">]</span> wrapper<span class="token punctuation">;</span>
<span class="token keyword">short</span><span class="token punctuation">[</span><span class="token punctuation">]</span> primitive<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基本集合类型" tabindex="-1"><a class="header-anchor" href="#基本集合类型"><span>基本集合类型</span></a></h3><p>未使用@ElementCollection注释的基本集合（仅为集合的子类型）默认映射到类型代码SqlTypes.ARRAY，如果可能，该类型代码映射到SQL标准数组类型，这通过org.ibernate.dialect.dialect的新方法getArrayTypeName和supportsStandardArrays确定。如果SQL标准数组的类型不可用，数据将被建模为SqlTypes.JSON，SqlTypes.XML或SqlTypes.VARBINARY，具体取决于通过新方法org.ibernate.dialect.dialect.getPreferredSqlTypeCodeForArray确定的数据库支持。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Short</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>
<span class="token class-name">SortedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Short</span><span class="token punctuation">&gt;</span></span> sortedSet<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组合基本类型的映射" tabindex="-1"><a class="header-anchor" href="#组合基本类型的映射"><span>组合基本类型的映射</span></a></h3><h4 id="javatype" tabindex="-1"><a class="header-anchor" href="#javatype"><span>JavaType</span></a></h4><p>Hibernate需要了解Java类型的某些方面，才能正确有效地处理值。Hibernate通过org.ibernate.type.descriptor.java.JavaType合同了解这些功能。Hibernate为许多JDK类型（例如Integer、String）提供内置支持，但也支持应用程序更改任何标准JavaType注册的处理以及非标准类型的插件处理。Hibernate为应用程序提供了多种方式来影响要使用的JavaType描述符。</p><p>使用特定映射上的@JavaType注释可以在本地影响解析。所指示的描述符将仅用于该映射。也有@JavaType的形式，用于影响Map的键（@MapKeyJavaType）、List或数组的索引（@ListIndexJavaType），ID-BAG映射的标识符（@CollectionIdJavaType）以及ANY映射的鉴别器（@AnyDiscriminator）和键（@AnyKeyJavaClass，@AnyKeyJavaType）。</p><p>还可以通过向JavaTypeRegistry注册适当的JavaType描述符来全局影响解析。这种方法既可以“覆盖”某些Java类型的处理，也可以注册新类型。有关JavaTypeRegistry的讨论。</p><h4 id="jdbctype" tabindex="-1"><a class="header-anchor" href="#jdbctype"><span>JdbcType</span></a></h4><p>Hibernate还需要了解它应该使用的JDBC类型的各个方面（它应该如何绑定值，它应该如何提取值等），这是其org.Hibernate.type.descriptor.JDBC.JdbcType契约的作用。Hibernate为应用程序提供了多种方式来影响要使用的JdbcType描述符。</p><p>在本地，可以使用@JdbcType或@JdbcTypeCode注释来影响解析。还有一些注释可以影响与Map键（@MapKeyJdbcType，@MapKeyJdbcTypeCode）、List或数组的索引（@ListIndexJdbcType，@ListIndexJdbcTypeCode），ID-BAG映射的标识符（@CollectionIdJdbcType，@CollectionIdJdbcType）以及ANY映射的键（@AnyKeyJdbcType，@AnyKeyjdbcTypeCode）相关的Jdbc类型。@JdbcType指定要使用的特定Jdbc类型实现，而@JdbcTypeCode指定一个“代码”，然后根据JdbcTypeRegistry进行解析。</p><p>可以通过@JdbcTypeRegistration和TypeContributor来定制JdbcType注册表。有关JavaTypeRegistry的讨论，请参见Registrys。有关TypeContributor的讨论，请参阅TypeContributer。</p><h4 id="mutabilityplan" tabindex="-1"><a class="header-anchor" href="#mutabilityplan"><span>MutabilityPlan</span></a></h4><p>MutabilityPlan是Hibernate了解如何根据域值的内部可变性以及相关问题（如复制）来处理域值的方法。虽然这似乎是一个小问题，但它可能会对性能产生重大影响。请参阅AttributeConverter可变性计划，了解可能出现这种情况的一种情况。另一个讨论请参见案例研究：BitSet。</p><p>映射的MutabilityPlan可能会受到以下任何注释的影响：</p><ul><li><code>@Mutability</code></li><li><code>@Immutable</code></li><li><code>@MapKeyMutability</code></li><li><code>@CollectionIdMutability</code></li></ul><p>Hibernate按优先级顺序检查@Mutability和@Immutable的以下位置：</p><ul><li>映射的本地</li><li>在关联的AttributeConverter实现类（如果有）上</li><li>关于值的Java类型</li></ul><p>在大多数情况下，JavaType#getMutabilityPlan定义的回退是正确的策略。 Hibernate使用MutabilityPlan：</p><ul><li>检查值是否被认为是脏的</li><li>制作深度副本</li><li>将值封送至二级缓存和从二级缓存封送值</li></ul><p>一般来说，不可变值在所有这些情况下都表现得更好</p><ul><li>为了检查脏，Hibernate只需要检查对象标识（==），而不是相等（object#equals）。</li><li>相同的值实例可以用作其自身的深度副本。</li><li>可以从二级缓存以及我们放入二级缓存的值中使用相同的值。</li></ul><p>如果某个特定的Java类型被认为是可变的（例如Date），可以指定@Immutable或不可变的特定MutabilityPlan实现，让Hibernate将该值视为不可变。这也充当了应用程序的契约，即应用程序不会更改这些对象的内部状态。指定可变类型是不可变的，然后更改内部状态将导致问题；因此，只有在应用程序明确地不改变内部状态时才这样做。</p><h4 id="basicvalueconverter" tabindex="-1"><a class="header-anchor" href="#basicvalueconverter"><span>BasicValueConverter</span></a></h4><p>BasicValueConverter大致类似于AttributeConverter，因为它描述了在读取或写入基本值模型部分的值时发生的转换。事实上，Hibernate在内部将应用的AttributeConverter包装在BasicValueConverter中。它也在某些情况下应用隐式BasicValueConverter转换器，例如枚举处理等。</p><h4 id="解决合成问题" tabindex="-1"><a class="header-anchor" href="#解决合成问题"><span>解决合成问题</span></a></h4><p>使用这种组合方法，Hibernate需要解析映射的某些部分。通常这涉及到“填空”，因为它只针对映射的一部分进行配置。本节概述了如何解决此问题。</p><p>首先，我们寻找自定义类型。如果找到，则需要预先确定。有关详细信息，请参阅自定义类型映射</p><p>如果应用了AttributeConverter，我们将其用作解析的基础</p><ol><li><p>如果还使用@JavaType，则该特定JavaType用于转换器的“域类型”。否则，由转换器定义为其“域类型”的Java类型将根据JavaTypeRegistry进行解析</p></li><li><p>如果使用@JdbcType或@Jdbc TypeCode，则会使用指定的Jdbc类型，转换后的“关系Java类型”由JdbcType#getJdbcRecommendedJavaTypeMapping确定。否则，将使用转换器定义为其关系类型的Java类型，JdbcType由JdbcType#getRecommendedJdbcType确定</p></li><li><p>可在AttributeConverter实现、基本值映射或用作域类型的Java类型上使用@Mutability或@Immutable指定MutabilityPlan。否则，将使用转换域类型的JdbcType#getJdbcRecommendedJavaTypeMapping来确定可变性计划。</p></li></ol><p>接下来，我们尝试解析用于映射的JavaType。我们检查显式@JavaType，如果找到，则使用指定的JavaType。接下来，检查任何“隐含”指示；例如，List的索引具有隐式Java类型Integer。接下来，如果可能，我们使用反射。如果我们无法通过前面的步骤确定要使用的JavaType，我们尝试解析要使用的显式指定的JdbcType，如果找到，则使用其JdbcType#getJdbcRecommendedJavaTypeMapping作为映射的JavaType。如果此时无法确定JavaType，则会抛出错误。</p><p>然后检查先前解析的JavaType是否存在一些特殊情况。</p><ol><li>对于枚举值，我们检查显式@Enumerated并创建枚举映射。请注意，此解决方案仍然使用任何显式JdbcType指示符</li><li>对于时间值，我们检查@temporal并创建一个枚举映射。请注意，此解决方案仍然使用任何显式JdbcType指示符；这包括@JdbcType和@Jdbc TypeCode，以及@TimeZoneStorage和@TimeZone列（如果适用）。</li></ol><p>此时的退路是使用前面步骤中确定的JavaType和JdbcType来创建JDBC映射（它封装了JavaType和JdbcType），并将其与已解析的MutabilityPlan相结合 使用组合方法时，还有其他方法可以影响分辨率，如枚举、处理时间数据、处理LOB数据和处理国有化字符数据中所述 有关@JavaTypeRegistration和@JdbcTypeRegistratition的替代方案，请参阅TypeContributor。</p><h3 id="自定义类型映射" tabindex="-1"><a class="header-anchor" href="#自定义类型映射"><span>自定义类型映射</span></a></h3><p>另一种方法是使用@Type提供org.ibernate.usertype.UserType合约的实现。</p><p>对于特定的模型部分，也有相应的@Type专用形式：</p><ul><li>映射Map时，@Type描述Map值，而@MapKeyType描述Map键</li><li>映射id包时，@Type描述元素，而@CollectionIdType描述集合id</li><li>对于其他集合映射，@Type描述了元素</li><li>对于区分的关联映射（@Any和@ManyToAny），@Type描述了区分符值</li></ul><p>@Type允许更复杂的映射问题；但是，AttributeConverter和Compositional基本映射通常应首选为更简单的解决方案</p><h3 id="处理时间数据" tabindex="-1"><a class="header-anchor" href="#处理时间数据"><span>处理时间数据</span></a></h3><p>Hibernate支持以多种方式映射时间值，尽管这些策略最终归结为SQL规范定义的3种主要日期/时间类型：</p><ul><li>DATE</li><li>TIME</li><li>TIMESTAMP</li><li>TIMESTAMP WITH TIME ZONE</li></ul><p>java.time时间类型到特定SQL日期/时间类型的映射如下所示：</p><ul><li><p>DATE：java.time.LocalDate</p></li><li><p>TIME：java.time.LocalTime, java.time.OffsetTime</p></li><li><p>TIMESTAMP：java.time.Instant, java.time.LocalDateTime, java.time.OffsetDateTime and java.time.ZonedDateTime</p></li><li><p>TIMESTAMP WITH TIME ZONE：java.time.OffsetDateTime, java.time.ZonedDateTime</p></li></ul><p>尽管Hibernate建议使用java.time包来表示时间值，但它确实支持使用java.sql.Date、java.sql.time、java.sql_Timestamp、java.util.Date和java.util.Calendar。</p><ul><li><p>DATE：java.sql.Date</p></li><li><p>TIME：java.sql.Time</p></li><li><p>TIMESTAMP：java.sql.Timestamp</p></li></ul><p>将@Temporal应用于java.sql.Date、java.sql.Time、java.sql_Timestamp或任何java.Time类型都被视为异常。</p><p>当使用java.util.Date或java.util.Calendar时，Hibernate采用TIMESTAMP。要改变这种情况，请使用@Temporal。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// mapped as TIMESTAMP by default</span>
<span class="token class-name">Date</span> dateAsTimestamp<span class="token punctuation">;</span>

<span class="token comment">// explicitly mapped as DATE</span>
<span class="token annotation punctuation">@Temporal</span><span class="token punctuation">(</span><span class="token class-name">TemporalType</span><span class="token punctuation">.</span><span class="token constant">DATE</span><span class="token punctuation">)</span>
<span class="token class-name">Date</span> dateAsDate<span class="token punctuation">;</span>

<span class="token comment">// explicitly mapped as TIME</span>
<span class="token annotation punctuation">@Temporal</span><span class="token punctuation">(</span><span class="token class-name">TemporalType</span><span class="token punctuation">.</span><span class="token constant">TIME</span><span class="token punctuation">)</span>
<span class="token class-name">Date</span> dateAsTime<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用特定的时区" tabindex="-1"><a class="header-anchor" href="#使用特定的时区"><span>使用特定的时区</span></a></h4><p>默认情况下，当保存java.sql.Timestamp或java.sql.Time属性时，Hibernate将使用PreparedStatement.setTimestamp（int parameterIndex，java.sql.Ttimestamp）或PreparedSStatement.setTime（int paramarameterIndex，java.sql.Time x）。</p><p>当未指定时区时，JDBC驱动程序将使用底层JVM默认时区，如果应用程序在全球范围内使用，则该时区可能不适用。因此，每当从数据库保存/加载数据时，通常使用单个参考时区（例如UTC）。</p><p>另一种选择是将所有JVM配置为使用参考时区：</p><p>参数方式： <code>java -Duser.timezone=UTC</code></p><p>编程方式：<code>TimeZone.setDefault( TimeZone.getTimeZone( &quot;UTC&quot; ) );</code></p>`,269),k={href:"https://in.relation.to/2016/09/12/jdbc-time-zone-configuration-property/",target:"_blank",rel:"noopener noreferrer"},v=e(`<p>声明性地，在SessionFactory级别：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>settings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>
    <span class="token class-name">AvailableSettings</span><span class="token punctuation">.</span><span class="token constant">JDBC_TIME_ZONE</span><span class="token punctuation">,</span>
    <span class="token class-name">TimeZone</span><span class="token punctuation">.</span><span class="token function">getTimeZone</span><span class="token punctuation">(</span> <span class="token string">&quot;UTC&quot;</span> <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按每个会话编程:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Session</span> session <span class="token operator">=</span> <span class="token function">sessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">jdbcTimeZone</span><span class="token punctuation">(</span> <span class="token class-name">TimeZone</span><span class="token punctuation">.</span><span class="token function">getTimeZone</span><span class="token punctuation">(</span> <span class="token string">&quot;UTC&quot;</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这个配置属性，Hibernate将调用PreparedStatement.setTimestamp（int parameterIndex，java.sql.Timestamp，Calendar cal）或PreparedSStatement.setTime（int parametrIndex，java.ql.Time x，Calendar al），其中java.util.Calendar引用通过Hibernate.jdbc.Time_zone属性提供的时区。</p><h4 id="处理时间类型的时区" tabindex="-1"><a class="header-anchor" href="#处理时间类型的时区"><span>处理时间类型的时区</span></a></h4><p>默认情况下，Hibernate会将OffsetDateTime和ZonedDateTime转换并标准化为UTC格式的java.sql.Timestamp。可以通过配置hibernate.timezone.default_storage属性来更改此行为</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>settings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>
    <span class="token class-name">AvailableSettings</span><span class="token punctuation">.</span><span class="token constant">TIMEZONE_DEFAULT_STORAGE</span><span class="token punctuation">,</span>
    <span class="token class-name">TimeZoneStorageType</span><span class="token punctuation">.</span><span class="token constant">AUTO</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他可能的存储类型包括AUTO、COLUMN、NATIVE和NORMALIZE（默认值）。使用COLUMN，Hibernate将时区信息保存到一个专用列中，而NATIVE将需要数据库支持保留时区信息的TIMESTAMP With time zone数据类型。NORMALIZE不存储时区信息，只将时间戳转换为UTC。Hibernate通过方言#getTimeZoneSupport了解数据库/方言支持什么，如果NATIVE与不支持此功能的数据库一起使用，则会因启动错误而中止。对于AUTO，如果可能，Hibernate尝试使用NATIVE，否则返回COLUMN。</p><h3 id="timezonestorage" tabindex="-1"><a class="header-anchor" href="#timezonestorage"><span><code>@TimeZoneStorage</code></span></a></h3><p>Hibernate支持通过@TimeZoneStorage和@TimeZoneColumn注释定义存储以用于单个属性的时区信息。存储类型可以通过@TimeZoneStorage指定org.hibernate.annotations.TimeZoneStorageType来指定。默认存储类型为AUTO，这将确保保留时区信息。@TimeZoneColumn注释可与AUTO或COLUMN一起使用，并允许定义时区信息存储的列详细信息。</p><p>由于区域规则可能会更改，因此存储区域偏移量对于将来的时间戳可能会有问题。因此，存储偏移量仅对过去的时间戳是安全的，我们建议默认情况下坚持NORMALIZE策略。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@TimeZoneStorage</span><span class="token punctuation">(</span><span class="token class-name">TimeZoneStorageType</span><span class="token punctuation">.</span><span class="token constant">COLUMN</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@TimeZoneColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;birthday_offset_offset&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;birthday_offset&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">OffsetDateTime</span> offsetDateTimeColumn<span class="token punctuation">;</span>

<span class="token annotation punctuation">@TimeZoneStorage</span><span class="token punctuation">(</span><span class="token class-name">TimeZoneStorageType</span><span class="token punctuation">.</span><span class="token constant">COLUMN</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@TimeZoneColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;birthday_zoned_offset&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;birthday_zoned&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">ZonedDateTime</span> zonedDateTimeColumn<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="attributeconverters" tabindex="-1"><a class="header-anchor" href="#attributeconverters"><span>AttributeConverters</span></a></h3><p>使用自定义AttributeConverter，应用程序开发人员可以将给定的JDBC类型映射到实体基本类型。 在下面的示例中，java.time.Period将被映射到VARCHAR数据库列。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Converter</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PeriodStringConverter</span>
        <span class="token keyword">implements</span> <span class="token class-name">AttributeConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Period</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">convertToDatabaseColumn</span><span class="token punctuation">(</span><span class="token class-name">Period</span> attribute<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> attribute<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Period</span> <span class="token function">convertToEntityAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> dbData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Period</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dbData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要使用此自定义转换器，@Convert注释必须修饰实体属性。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Event&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Event</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Convert</span><span class="token punctuation">(</span>converter <span class="token operator">=</span> <span class="token class-name">PeriodStringConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>columnDefinition <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Period</span> span<span class="token punctuation">;</span>

    <span class="token comment">//Getters and setters are omitted for brevity</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当持久化这样的实体时，Hibernate将根据AttributeConverter逻辑进行类型转换：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Event <span class="token punctuation">(</span> span<span class="token punctuation">,</span> id <span class="token punctuation">)</span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token string">&#39;P1Y2M3D&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>AttributeConverter可以全局应用于（@Converter（autoApply=true））或本地应用。</p><h4 id="attributeconverter-java和jdbc类型" tabindex="-1"><a class="header-anchor" href="#attributeconverter-java和jdbc类型"><span>AttributeConverter Java和JDBC类型</span></a></h4><p>如果为转换的“数据库端”指定未知的Java类型（第二个AttributeConverter绑定参数），Hibernate将回退到Java.io.Serializable类型。 如果Hibernate不知道Java类型，您将遇到以下消息：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>HHH000481: Encountered Java type for which we could not locate a JavaType and which does not appear to implement equals and/or hashCode. This can lead to significant performance problems when performing equality/dirty checking involving this Java type. Consider registering a custom JavaType or at least implementing equals/hashCode.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果Java类型在JavaTypeRegistry中有注册，则它是“已知”的。虽然Hibernate确实将许多JDK类型加载到JavaTypeRegistry中，但应用程序也可以通过添加新的JavaType条目来扩展JavaTypeRegistry，如Compositional基本映射和TypeContributor中所讨论的。</p><h4 id="使用hbm映射映射attributeconverter" tabindex="-1"><a class="header-anchor" href="#使用hbm映射映射attributeconverter"><span>使用HBM映射映射AttributeConverter</span></a></h4><p>当使用HBM映射时，您仍然可以使用Jakarta Persistence AttributeConverter，因为Hibernate支持通过类型属性进行映射，如下例所示。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Money</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">long</span> cents<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Money</span><span class="token punctuation">(</span><span class="token keyword">long</span> cents<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cents <span class="token operator">=</span> cents<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getCents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> cents<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCents</span><span class="token punctuation">(</span><span class="token keyword">long</span> cents<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cents <span class="token operator">=</span> cents<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> owner<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Money</span> balance<span class="token punctuation">;</span>

    <span class="token comment">//Getters and setters are omitted for brevity</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于Hibernate不知道如何持久化Money类型，我们可以使用Jakarta Persistence AttributeConverter将Money类型转换为Long。为此，我们将使用以下MoneyConverter实用程序：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MoneyConverter</span>
        <span class="token keyword">implements</span> <span class="token class-name">AttributeConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Money</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">convertToDatabaseColumn</span><span class="token punctuation">(</span><span class="token class-name">Money</span> attribute<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> attribute <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> attribute<span class="token punctuation">.</span><span class="token function">getCents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Money</span> <span class="token function">convertToEntityAttribute</span><span class="token punctuation">(</span><span class="token class-name">Long</span> dbData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> dbData <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Money</span><span class="token punctuation">(</span>dbData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要使用HBM配置文件映射MoneyConverter，需要在property元素的type属性中使用<code>converted::</code>前缀。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">hibernate-mapping</span> <span class="token name">PUBLIC</span>
        <span class="token string">&quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span>
        <span class="token string">&quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hibernate-mapping</span> <span class="token attr-name">package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.hibernate.userguide.mapping.converter.hbm<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Account<span class="token punctuation">&quot;</span></span> <span class="token attr-name">table</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>account<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>owner<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>balance<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>converted::org.hibernate.userguide.mapping.converter.hbm.MoneyConverter<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hibernate-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="attributeconverter-mutability-plan" tabindex="-1"><a class="header-anchor" href="#attributeconverter-mutability-plan"><span><code>AttributeConverter</code> Mutability Plan</span></a></h4><p>如果基础Java类型是不可变的，则由Jakarta Persistence AttributeConverter转换的基本类型是不可更改的；如果关联的属性类型也是可变的，那么基本类型是可变的。 因此，关联实体属性类型的JavaType#getMutabilityPlan提供了可变性。 这可以通过在以下任何一项上使用@Immutable或@Mutability进行调整：</p><ol><li>the basic value</li><li>the <code>AttributeConverter</code> class</li><li>the basic value type</li></ol><h4 id="不可变类型" tabindex="-1"><a class="header-anchor" href="#不可变类型"><span>不可变类型</span></a></h4><p>如果实体属性是字符串、基本包装器（例如Integer、Long）、枚举类型或任何其他不可变的Object类型，则只能通过将实体属性值重新分配为新值来更改实体属性值。</p><p>考虑到我们具有与AttributeConverters部分所示相同的Period实体属性：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Event&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Event</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Convert</span><span class="token punctuation">(</span>converter <span class="token operator">=</span> <span class="token class-name">PeriodStringConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>columnDefinition <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Period</span> span<span class="token punctuation">;</span>

    <span class="token comment">//Getters and setters are omitted for brevity</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更改span属性的唯一方法是将其重新指定为其他值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token class-name">Event</span> event <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token string">&quot;from Event&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Event</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSingleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 event<span class="token punctuation">.</span><span class="token function">setSpan</span><span class="token punctuation">(</span><span class="token class-name">Period</span>
     <span class="token punctuation">.</span><span class="token function">ofYears</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">plusMonths</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="可变类型" tabindex="-1"><a class="header-anchor" href="#可变类型"><span>可变类型</span></a></h4><p>另一方面，考虑以下示例，其中Money类型是可变的。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Money</span> <span class="token punctuation">{</span>

	<span class="token keyword">private</span> <span class="token keyword">long</span> cents<span class="token punctuation">;</span>

	<span class="token comment">//Getters and setters are omitted for brevity</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Account&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">String</span> owner<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Convert</span><span class="token punctuation">(</span>converter <span class="token operator">=</span> <span class="token class-name">MoneyConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">Money</span> balance<span class="token punctuation">;</span>

	<span class="token comment">//Getters and setters are omitted for brevity</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MoneyConverter</span>
		<span class="token keyword">implements</span> <span class="token class-name">AttributeConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Money</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">convertToDatabaseColumn</span><span class="token punctuation">(</span><span class="token class-name">Money</span> attribute<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> attribute <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> attribute<span class="token punctuation">.</span><span class="token function">getCents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">Money</span> <span class="token function">convertToEntityAttribute</span><span class="token punctuation">(</span><span class="token class-name">Long</span> dbData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> dbData <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Money</span><span class="token punctuation">(</span>dbData<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可变对象允许您修改其内部结构，Hibernate的脏检查机制会将更改传播到数据库：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Account</span> account <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Account</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
account<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCents</span><span class="token punctuation">(</span><span class="token number">150</span> <span class="token operator">*</span> <span class="token number">100L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
entityManager<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尽管AttributeConverter类型可以是可变的，以便脏检查、深度复制和二级缓存能够正常工作，但将它们视为不可变（当它们确实是不可变时）更有效。 出于这个原因，尽可能选择不可变类型而不是可变类型。</p><h4 id="使用attributeconverter实体属性作为查询参数" tabindex="-1"><a class="header-anchor" href="#使用attributeconverter实体属性作为查询参数"><span>使用AttributeConverter实体属性作为查询参数</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Photo&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Photo</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>length <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>length <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">)</span>
	<span class="token annotation punctuation">@Convert</span><span class="token punctuation">(</span>converter <span class="token operator">=</span> <span class="token class-name">CaptionConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">Caption</span> caption<span class="token punctuation">;</span>

	<span class="token comment">//Getters and setters are omitted for brevity</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Caption</span> <span class="token punctuation">{</span>

	<span class="token keyword">private</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token class-name">Caption</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> text<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">this</span> <span class="token operator">==</span> o <span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span> o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token class-name">Caption</span> caption <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Caption</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
		<span class="token keyword">return</span> text <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> text<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span> caption<span class="token punctuation">.</span>text <span class="token punctuation">)</span> <span class="token operator">:</span> caption<span class="token punctuation">.</span>text <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> text <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> text<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CaptionConverter</span>
		<span class="token keyword">implements</span> <span class="token class-name">AttributeConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Caption</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">convertToDatabaseColumn</span><span class="token punctuation">(</span><span class="token class-name">Caption</span> attribute<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> attribute<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">Caption</span> <span class="token function">convertToEntityAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> dbData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Caption</span><span class="token punctuation">(</span> dbData <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>传统上，当引用Caption实体属性时，只能使用DB数据Caption表示，在我们的例子中，它是一个字符串。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Photo</span> photo <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>
				<span class="token string">&quot;select p &quot;</span> <span class="token operator">+</span>
						<span class="token string">&quot;from Photo p &quot;</span> <span class="token operator">+</span>
						<span class="token string">&quot;where upper(caption) = upper(:caption) &quot;</span><span class="token punctuation">,</span> <span class="token class-name">Photo</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span> <span class="token string">&quot;caption&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Nicolae Grigorescu&quot;</span> <span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">getSingleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了使用Java对象Caption表示，必须获取相关的Hibernate类型。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">SessionFactoryImplementor</span> sessionFactory <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getEntityManagerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span> <span class="token class-name">SessionFactoryImplementor</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> <span class="token class-name">MappingMetamodelImplementor</span> mappingMetamodel <span class="token operator">=</span> sessionFactory
		<span class="token punctuation">.</span><span class="token function">getRuntimeMetamodels</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">getMappingMetamodel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Type</span> captionType <span class="token operator">=</span> mappingMetamodel
		<span class="token punctuation">.</span><span class="token function">getEntityDescriptor</span><span class="token punctuation">(</span> <span class="token class-name">Photo</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">getPropertyType</span><span class="token punctuation">(</span> <span class="token string">&quot;caption&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Photo</span> photo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Photo</span><span class="token punctuation">)</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>
				<span class="token string">&quot;select p &quot;</span> <span class="token operator">+</span>
						<span class="token string">&quot;from Photo p &quot;</span> <span class="token operator">+</span>
						<span class="token string">&quot;where upper(caption) = upper(:caption) &quot;</span><span class="token punctuation">,</span> <span class="token class-name">Photo</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span> <span class="token class-name">Query</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span>
				<span class="token string">&quot;caption&quot;</span><span class="token punctuation">,</span>
				<span class="token keyword">new</span> <span class="token class-name">Caption</span><span class="token punctuation">(</span> <span class="token string">&quot;Nicolae Grigorescu&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token punctuation">(</span><span class="token class-name">BindableType</span><span class="token punctuation">)</span> captionType
		<span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">getSingleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过传递关联的Hibernate类型，可以在绑定查询参数值时使用Caption对象。</p><h3 id="registries" tabindex="-1"><a class="header-anchor" href="#registries"><span>Registries</span></a></h3><p>我们已经多次介绍了JavaTypeRegistry和JdbcTypeRegistry，主要是在解析组合中讨论的映射解析方面。但它们各自也发挥着额外的重要作用。 JavaTypeRegistry是由Java类型键入的JavaType引用的注册表。除了映射解析之外，该注册表还用于处理各种API（如查询参数类型）中公开的类引用。JavaType引用可以通过@JavaTypeRegistration注册。</p><p>JdbcTypeRegistry是由整数代码键入的JdbcType引用的注册表。正如JdbcType中所讨论的，这些类型代码通常与java.sql.Types中的相应代码匹配，但这不是一个要求-可以使用java.sql.type定义的整数以外的整数。这对于映射JDBC用户数据类型（UDT）或其他专用数据库特定类型（例如PostgreSQL的UUID类型）可能很有用。除了在映射解析中使用它之外，该注册表还用作解析JDBC ResultSet中“发现”值的主要源。JdbcType引用可以通过@JdbcTypeRegistration注册。</p><h3 id="typecontributor" tabindex="-1"><a class="header-anchor" href="#typecontributor"><span>TypeContributor</span></a></h3><p>org.ibernate.boot.model.TypeContributor是一个重写或扩展hibernate类型系统部分的合约。 有许多方法可以集成TypeContributor。最常见的是将TypeContributor定义为Java服务（请参见Java.util.ServiceLoader）。</p><p>TypeContributor被传递一个TypeContributions引用，该引用允许注册自定义JavaType、JdbcType和BasicType引用。</p><p>虽然TypeContributor仍然公开了注册BasicType引用的功能，但这被认为是不推荐的。从6.0开始，这些BasicType注册仅在解释hbm.xml映射时使用，这些映射本身被认为是不推荐的。请改用自定义类型映射或合成基本映射。</p><h3 id="案例研究-bitset" tabindex="-1"><a class="header-anchor" href="#案例研究-bitset"><span>案例研究：BitSet</span></a></h3><p>到目前为止，我们已经介绍了许多指定基本值映射的方法。本节将通过应用到目前为止介绍的不同技术来研究java.util.BitSet类型的映射。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Product&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">BitSet</span> bitSet<span class="token punctuation">;</span>

	<span class="token comment">//Getters and setters are omitted for brevity</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如前所述，Hibernate映射实现Serializable的基本类型的最坏情况是将其序列化到数据库。BitSet确实实现了Serializable，因此默认情况下Hibernate将通过序列化处理此映射。</p><p>这不是一个理想的映射。在下面的部分中，我们将研究如何改变BitSet如何映射到数据库的各个方面。</p><h5 id="using-attributeconverter" tabindex="-1"><a class="header-anchor" href="#using-attributeconverter"><span>Using <code>AttributeConverter</code></span></a></h5><p>这在大多数情况下都很有效，并且可以在Jakarta Persistence提供者之间移植。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Product&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Convert</span><span class="token punctuation">(</span>converter <span class="token operator">=</span> <span class="token class-name">BitSetConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">BitSet</span> bitSet<span class="token punctuation">;</span>

	<span class="token comment">//Getters and setters are omitted for brevity</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Converter</span><span class="token punctuation">(</span>autoApply <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BitSetConverter</span> <span class="token keyword">implements</span> <span class="token class-name">AttributeConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BitSet</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">convertToDatabaseColumn</span><span class="token punctuation">(</span><span class="token class-name">BitSet</span> attribute<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token class-name">BitSetHelper</span><span class="token punctuation">.</span><span class="token function">bitSetToString</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">BitSet</span> <span class="token function">convertToEntityAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> dbData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token class-name">BitSetHelper</span><span class="token punctuation">.</span><span class="token function">stringToBitSet</span><span class="token punctuation">(</span>dbData<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这大大提高了处理这些BitSet值的读写性能，因为AttributeConverter使用简单的可外化形式的BitSet，而不是序列化和反序列化值，可以更有效地实现这一点。</p><h4 id="使用javatypedescriptor" tabindex="-1"><a class="header-anchor" href="#使用javatypedescriptor"><span>使用<code>JavaTypeDescriptor</code></span></a></h4><p>如[基本映射显式]中所述，我们将为BitSet定义一个JavaType，默认情况下将值映射到VARCHAR进行存储。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BitSetJavaType</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractClassJavaType</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BitSet</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">BitSetJavaType</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitSetJavaType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">BitSetJavaType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">BitSet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">MutabilityPlan</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BitSet</span><span class="token punctuation">&gt;</span></span> <span class="token function">getMutabilityPlan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BitSetMutabilityPlan</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">JdbcType</span> <span class="token function">getRecommendedJdbcType</span><span class="token punctuation">(</span><span class="token class-name">JdbcTypeIndicators</span> indicators<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> indicators<span class="token punctuation">.</span><span class="token function">getTypeConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">getJdbcTypeRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">getDescriptor</span><span class="token punctuation">(</span><span class="token class-name">Types</span><span class="token punctuation">.</span><span class="token constant">VARCHAR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">BitSet</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BitSetHelper</span><span class="token punctuation">.</span><span class="token function">bitSetToString</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">BitSet</span> <span class="token function">fromString</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BitSetHelper</span><span class="token punctuation">.</span><span class="token function">stringToBitSet</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">X</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">X</span> <span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token class-name">BitSet</span> value<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">X</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">,</span> <span class="token class-name">WrapperOptions</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">BitSet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">X</span><span class="token punctuation">)</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">X</span><span class="token punctuation">)</span> <span class="token function">toString</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">byte</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">X</span><span class="token punctuation">)</span> value<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token function">unknownUnwrap</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">X</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">BitSet</span> <span class="token function">wrap</span><span class="token punctuation">(</span><span class="token class-name">X</span> value<span class="token punctuation">,</span> <span class="token class-name">WrapperOptions</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">CharSequence</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">fromString</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span><span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">BitSet</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">BitSet</span><span class="token punctuation">)</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token function">unknownWrap</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用@JavaType在本地应用该类型</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Product&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@JavaType</span><span class="token punctuation">(</span><span class="token class-name">BitSetJavaType</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">BitSet</span> bitSet<span class="token punctuation">;</span>

	<span class="token comment">//Constructors, getters, and setters are omitted for brevity</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者我们可以使用@JavaTypeRegistration全局应用它。这允许在遇到BitSet类型时将注册的JavaType用作默认值</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Product&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@JavaTypeRegistration</span><span class="token punctuation">(</span>javaType <span class="token operator">=</span> <span class="token class-name">BitSet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> descriptorClass <span class="token operator">=</span> <span class="token class-name">BitSetJavaType</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">BitSet</span> bitSet<span class="token punctuation">;</span>

	<span class="token comment">//Constructors, getters, and setters are omitted for brevity</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="选择不同的jdbctypedescriptor" tabindex="-1"><a class="header-anchor" href="#选择不同的jdbctypedescriptor"><span>选择不同的JdbcTypeDescriptor</span></a></h4><p>默认情况下，我们的自定义BitSetJavaType将BitSet值映射到VARCHAR。这是一个比直接序列化更好的选项。但由于BitSet最终是二进制数据，我们可能真的希望将其映射为VARBINARY类型。一种方法是将BitSetJavaType#getRecommendedJdbcType更改为返回VARBINARY描述符。另一种选择是使用本地@JdbcType或@JdbcTypeCode。</p><p>指定JdbcType的示例假设我们的BitSetJavaType是全局注册的。 我们将再次将这些值作为VARBINARY存储在数据库中。然而，现在的区别是，强制方法#wrap和#unwrap将用于准备值，而不是依赖于序列化。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Product&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@JdbcTypeCode</span><span class="token punctuation">(</span><span class="token class-name">Types</span><span class="token punctuation">.</span><span class="token constant">VARBINARY</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">BitSet</span> bitSet<span class="token punctuation">;</span>

	<span class="token comment">//Constructors, getters, and setters are omitted for brevity</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在本例中，@JdbcTypeCode用于指示应使用为JDBC的VARBINARY类型注册的JdbcType。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Product&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@JdbcType</span><span class="token punctuation">(</span><span class="token class-name">CustomBinaryJdbcType</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">BitSet</span> bitSet<span class="token punctuation">;</span>

	<span class="token comment">//Constructors, getters, and setters are omitted for brevity</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在本例中，@JdbcType已用于为该属性本地指定自定义BitSetJdbc类型描述符。 我们可以使用@JdbcTypeRegistration替换Hibernate处理所有VARBINARY的方式，使用我们的自定义impl</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Product&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@JdbcTypeRegistration</span><span class="token punctuation">(</span><span class="token class-name">CustomBinaryJdbcType</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">BitSet</span> bitSet<span class="token punctuation">;</span>

	<span class="token comment">//Constructors, getters, and setters are omitted for brevity</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sql引用标识符" tabindex="-1"><a class="header-anchor" href="#sql引用标识符"><span>SQL引用标识符</span></a></h3><p>您可以强制Hibernate在生成的SQL中引用标识符，方法是将表或列名括在映射文档的反引号中。传统上，Hibernate使用反引号来转义SQL保留关键字，而Jakarta Persistence使用双引号。</p><p>一旦转义了保留的关键字，Hibernate将为SQL方言使用正确的引号样式。这通常是双引号，但SQL Server使用括号，MySQL使用反引号。</p><p><em>Hibernate quoting</em></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Product&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;\`name\`&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;\`number\`&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> number<span class="token punctuation">;</span>

	<span class="token comment">//Getters and setters are omitted for brevity</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>Jakarta Persistence quoting</em></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Product&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;\\&quot;name\\&quot;&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;\\&quot;number\\&quot;&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> number<span class="token punctuation">;</span>

	<span class="token comment">//Getters and setters are omitted for brevity</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为name和number是保留字，Product实体映射使用反引号引用这些列名。保存以下Product实体时，Hibernate生成以下SQL插入语句：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
product<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
product<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;Mobile phone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
product<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token string">&quot;123-456-7890&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
entityManager<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Product <span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;Mobile phone&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123-456-7890&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="全局引号" tabindex="-1"><a class="header-anchor" href="#全局引号"><span>全局引号</span></a></h4><p>Hibernate还可以使用以下配置属性引用所有标识符（例如表、列）：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span>
    <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hibernate.globally_quoted_identifiers<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们不需要手动引用任何标识符：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Product&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">String</span> number<span class="token punctuation">;</span>

	<span class="token comment">//Getters and setters are omitted for brevity</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当持久化Product实体时，Hibernate将引用所有标识符，如下例所示：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token string">&quot;Product&quot;</span> <span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;Mobile phone&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123-456-7890&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如您所见，表名和所有列都被引用了。</p><h3 id="生成属性" tabindex="-1"><a class="header-anchor" href="#生成属性"><span>生成属性</span></a></h3><p>本节讨论为非标识符属性生成值。有关生成标识符值的讨论，请参阅生成标识符值。</p><p>生成的属性的值是在执行SQL INSERT或UPDATE时生成的。应用程序可以通过多种方式生成这些值（SQLDEFAULT值、触发器等）。通常，应用程序需要刷新对象，这是一个主要缺点。</p><p>应用程序还可以将生成委托给Hibernate，在这种情况下，Hibernate将自行管理值生成和（潜在的[3]）状态刷新。</p><p>只能将@Basic和@Version属性标记为已生成。此外，生成的属性必须是不可插入和不可更新的。</p><p>Hibernate支持VM和DB生成。使用当前JVM时间戳作为生成值的生成是VM内策略的一个示例。使用数据库的current_timestamp函数的生成是数据库内策略的一个示例。</p><p>Hibernate支持以下生成策略：</p><ul><li><code>NEVER</code> (the default)：未生成给定的属性值</li><li>INSERT：属性值在插入时生成，但在后续更新时不会重新生成</li><li>ALWAYS：插入和更新时都会生成属性值。</li></ul><p>Hibernate支持多种方式将属性标记为生成：</p><ul><li>使用Hibernate提供的专用生成器</li></ul>`,113),m=n("code",null,"@CurrentTimestamp",-1),b={href:"https://docs.jboss.org/hibernate/orm/6.1/userguide/html_single/Hibernate_User_Guide.html#mapping-generated-CurrentTimestamp",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"@CurrentTimestamp",-1),y=n("code",null,"@CreationTimestamp",-1),h={href:"https://docs.jboss.org/hibernate/orm/6.1/userguide/html_single/Hibernate_User_Guide.html#mapping-generated-CreationTimestamp",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"@CreationTimestamp",-1),f=n("code",null,"@UpdateTimestamp",-1),T={href:"https://docs.jboss.org/hibernate/orm/6.1/userguide/html_single/Hibernate_User_Guide.html#mapping-generated-UpdateTimestamp",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"@UpdateTimestamp",-1),C=n("code",null,"@Generated",-1),S={href:"https://docs.jboss.org/hibernate/orm/6.1/userguide/html_single/Hibernate_User_Guide.html#mapping-generated-Generated",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"@Generated",-1),A=e(`<ul><li>@GeneratorType-已弃用，此处未涉及</li><li>使用自定义生成策略-自定义生成策略</li></ul><h5 id="currenttimestamp" tabindex="-1"><a class="header-anchor" href="#currenttimestamp"><span><code>@CurrentTimestamp</code></span></a></h5><p>@CurrentTimestamp注释是一种db生成策略，可以配置INSERT或ALWAYS策略。它使用数据库的current_timestamp函数作为生成的值</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@CurrentTimestamp</span><span class="token punctuation">(</span> timing <span class="token operator">=</span> <span class="token class-name">GenerationTiming</span><span class="token punctuation">.</span><span class="token constant">INSERT</span> <span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Instant</span> createdAt<span class="token punctuation">;</span>

<span class="token annotation punctuation">@CurrentTimestamp</span><span class="token punctuation">(</span> timing <span class="token operator">=</span> <span class="token class-name">GenerationTiming</span><span class="token punctuation">.</span><span class="token constant">ALWAYS</span> <span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Instant</span> lastUpdatedAt<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="creationtimestamp" tabindex="-1"><a class="header-anchor" href="#creationtimestamp"><span><code>@CreationTimestamp</code></span></a></h5><p>@CreationTimestamp注释是VM内INSERT策略。Hibernate将使用JVM的当前时间戳作为属性的插入值。支持大多数时间类型（java.time.Instant、java.util.Date、java.util.Calendar等）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Event&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Event</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Id</span>
	<span class="token annotation punctuation">@GeneratedValue</span>
	<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;\`timestamp\`&quot;</span><span class="token punctuation">)</span>
	<span class="token annotation punctuation">@CreationTimestamp</span>
	<span class="token keyword">private</span> <span class="token class-name">Date</span> timestamp<span class="token punctuation">;</span>

	<span class="token comment">//Constructors, getters, and setters are omitted for brevity</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在插入事件时，Hibernate将用当前JVM时间戳值填充底层时间戳列</p><h5 id="updatetimestamp" tabindex="-1"><a class="header-anchor" href="#updatetimestamp"><span><code>@UpdateTimestamp</code></span></a></h5><p>@UpdateTimestamp注释是VM内INSERT策略。Hibernate将使用JVM的当前时间戳作为属性的插入和更新值。支持大多数时间类型（java.time.Instant、java.util.Date、java.util.Calendar等）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Bid&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bid</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Id</span>
	<span class="token annotation punctuation">@GeneratedValue</span>
	<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;updated_on&quot;</span><span class="token punctuation">)</span>
	<span class="token annotation punctuation">@UpdateTimestamp</span>
	<span class="token keyword">private</span> <span class="token class-name">Date</span> updatedOn<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;updated_by&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> updatedBy<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">Long</span> cents<span class="token punctuation">;</span>

	<span class="token comment">//Getters and setters are omitted for brevity</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="generated" tabindex="-1"><a class="header-anchor" href="#generated"><span><code>@Generated</code></span></a></h5><p>@Generated注释是一种DB内策略，可以配置timing等于INSERT或ALWAYS,这是DB中生成值的遗留映射。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Person&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">String</span> middleName1<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">String</span> middleName2<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">String</span> middleName3<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">String</span> middleName4<span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token class-name">String</span> middleName5<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Generated</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">GenerationTime</span><span class="token punctuation">.</span><span class="token constant">ALWAYS</span><span class="token punctuation">)</span>
	<span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>columnDefinition <span class="token operator">=</span>
		<span class="token string">&quot;AS CONCAT(&quot;</span> <span class="token operator">+</span>
		<span class="token string">&quot;	COALESCE(firstName, &#39;&#39;), &quot;</span> <span class="token operator">+</span>
		<span class="token string">&quot;	COALESCE(&#39; &#39; + middleName1, &#39;&#39;), &quot;</span> <span class="token operator">+</span>
		<span class="token string">&quot;	COALESCE(&#39; &#39; + middleName2, &#39;&#39;), &quot;</span> <span class="token operator">+</span>
		<span class="token string">&quot;	COALESCE(&#39; &#39; + middleName3, &#39;&#39;), &quot;</span> <span class="token operator">+</span>
		<span class="token string">&quot;	COALESCE(&#39; &#39; + middleName4, &#39;&#39;), &quot;</span> <span class="token operator">+</span>
		<span class="token string">&quot;	COALESCE(&#39; &#39; + middleName5, &#39;&#39;), &quot;</span> <span class="token operator">+</span>
		<span class="token string">&quot;	COALESCE(&#39; &#39; + lastName, &#39;&#39;) &quot;</span> <span class="token operator">+</span>
		<span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> fullName<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自定义生成策略" tabindex="-1"><a class="header-anchor" href="#自定义生成策略"><span>自定义生成策略</span></a></h4><p>Hibernate还支持使用@ValueGenerationType和AnnotationValueGeneration可插拔API生成值，允许用户定义他们想要的任何生成策略。 让我们看一个生成UUID值的示例。首先是属性映射</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GeneratedUuidValue</span><span class="token punctuation">(</span> timing <span class="token operator">=</span> <span class="token class-name">GenerationTiming</span><span class="token punctuation">.</span><span class="token constant">INSERT</span> <span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">UUID</span> createdUuid<span class="token punctuation">;</span>

<span class="token annotation punctuation">@GeneratedUuidValue</span><span class="token punctuation">(</span> timing <span class="token operator">=</span> <span class="token class-name">GenerationTiming</span><span class="token punctuation">.</span><span class="token constant">ALWAYS</span> <span class="token punctuation">)</span>
   <span class="token keyword">public</span> <span class="token class-name">UUID</span> updatedUuid<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个示例使用了一个名为@GeneratedUuidValue的注释，但该注释是在哪里定义的？这是应用程序提供的自定义注释。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ValueGenerationType</span><span class="token punctuation">(</span> generatedBy <span class="token operator">=</span> <span class="token class-name">UuidValueGeneration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span> <span class="token punctuation">{</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION_TYPE</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">GeneratedUuidValue</span> <span class="token punctuation">{</span>
	<span class="token class-name">GenerationTiming</span> <span class="token function">timing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的@ValueGenerationType（generatedBy=UuidValueGeneration.class）是重要的部分；它告诉Hibernate如何为属性生成值-在这里它将使用指定的UuidValueGeneration类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UuidValueGeneration</span> <span class="token keyword">implements</span> <span class="token class-name">AnnotationValueGeneration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GeneratedUuidValue</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">ValueGenerator</span><span class="token generics"><span class="token punctuation">&lt;</span>UUID<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token class-name">GenerationTiming</span> timing<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token class-name">GeneratedUuidValue</span> annotation<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> propertyType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		timing <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">timing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">GenerationTiming</span> <span class="token function">getGenerationTiming</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> timing<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">ValueGenerator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getValueGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">referenceColumnInSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDatabaseGeneratedReferencedColumnValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">UUID</span> <span class="token function">generateValue</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">,</span> <span class="token class-name">Object</span> owner<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="列转化换器-读取和写入表达式" tabindex="-1"><a class="header-anchor" href="#列转化换器-读取和写入表达式"><span>列转化换器：读取和写入表达式</span></a></h3><p>Hibernate允许您自定义用于读取和写入映射到@Basic类型的列值的SQL。例如，如果您的数据库提供了一组数据加密函数，则可以像下面的示例一样为各个列调用它们。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Employee&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>

		<span class="token annotation punctuation">@Id</span>
		<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

		<span class="token annotation punctuation">@NaturalId</span>
		<span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

		<span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;pswd&quot;</span><span class="token punctuation">)</span>
		<span class="token annotation punctuation">@ColumnTransformer</span><span class="token punctuation">(</span>
			read <span class="token operator">=</span> <span class="token string">&quot;decrypt(&#39;AES&#39;, &#39;00&#39;, pswd )&quot;</span><span class="token punctuation">,</span>
			write <span class="token operator">=</span> <span class="token string">&quot;encrypt(&#39;AES&#39;, &#39;00&#39;, ?)&quot;</span>
		<span class="token punctuation">)</span>
<span class="token comment">// For H2 2.0.202+ one must use the varbinary DDL type</span>
<span class="token comment">//		@Column(name = &quot;pswd&quot;, columnDefinition = &quot;varbinary&quot;)</span>
<span class="token comment">//		@ColumnTransformer(</span>
<span class="token comment">//			read = &quot;trim(trailing u&amp;&#39;\\\\0000&#39; from cast(decrypt(&#39;AES&#39;, &#39;00&#39;, pswd ) as character varying))&quot;,</span>
<span class="token comment">//			write = &quot;encrypt(&#39;AES&#39;, &#39;00&#39;, ?)&quot;</span>
<span class="token comment">//		)</span>
		<span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

		<span class="token keyword">private</span> <span class="token keyword">int</span> accessLevel<span class="token punctuation">;</span>

		<span class="token annotation punctuation">@ManyToOne</span><span class="token punctuation">(</span>fetch <span class="token operator">=</span> <span class="token class-name">FetchType</span><span class="token punctuation">.</span><span class="token constant">LAZY</span><span class="token punctuation">)</span>
		<span class="token keyword">private</span> <span class="token class-name">Department</span> department<span class="token punctuation">;</span>

		<span class="token annotation punctuation">@ManyToMany</span><span class="token punctuation">(</span>mappedBy <span class="token operator">=</span> <span class="token string">&quot;employees&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Project</span><span class="token punctuation">&gt;</span></span> projects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//Getters and setters omitted for brevity</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果属性使用多个列，则必须使用forColumn属性指定@ColumnTransformer读写表达式的目标列:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Savings&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Savings</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@CompositeType</span><span class="token punctuation">(</span><span class="token class-name">MonetaryAmountUserType</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
	<span class="token annotation punctuation">@AttributeOverrides</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
		<span class="token annotation punctuation">@AttributeOverride</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;amount&quot;</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;money&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token annotation punctuation">@AttributeOverride</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;currency&quot;</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;currency&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token annotation punctuation">@ColumnTransformer</span><span class="token punctuation">(</span>
			forColumn <span class="token operator">=</span> <span class="token string">&quot;money&quot;</span><span class="token punctuation">,</span>
			read <span class="token operator">=</span> <span class="token string">&quot;money / 100&quot;</span><span class="token punctuation">,</span>
			write <span class="token operator">=</span> <span class="token string">&quot;? * 100&quot;</span>
	<span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">MonetaryAmount</span> wallet<span class="token punctuation">;</span>

	<span class="token comment">//Getters and setters omitted for brevity</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每当查询中引用属性时，Hibernate都会自动应用自定义表达式。此功能类似于派生属性[映射列公式]，但有两个区别：</p><ul><li>该属性由一个或多个列作为自动架构生成的一部分导出。</li><li>该属性是读写的，而不是只读的。</li></ul><p>如果指定了write表达式，则该表达式必须仅包含一个“？”值的占位符。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>doInJPA<span class="token punctuation">(</span>this::entityManagerFactory<span class="token punctuation">,</span> entityManager <span class="token operator">-</span><span class="token operator">&gt;</span> {
	Savings savings <span class="token operator">=</span> new Savings<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	savings<span class="token punctuation">.</span>setId<span class="token punctuation">(</span><span class="token number">1</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
	savings<span class="token punctuation">.</span>setWallet<span class="token punctuation">(</span>new MonetaryAmount<span class="token punctuation">(</span>BigDecimal<span class="token punctuation">.</span>TEN<span class="token punctuation">,</span> Currency<span class="token punctuation">.</span>getInstance<span class="token punctuation">(</span>Locale<span class="token punctuation">.</span>US<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	entityManager<span class="token punctuation">.</span>persist<span class="token punctuation">(</span>savings<span class="token punctuation">)</span><span class="token punctuation">;</span>
}<span class="token punctuation">)</span><span class="token punctuation">;</span>

doInJPA<span class="token punctuation">(</span>this::entityManagerFactory<span class="token punctuation">,</span> entityManager <span class="token operator">-</span><span class="token operator">&gt;</span> {
	Savings savings <span class="token operator">=</span> entityManager<span class="token punctuation">.</span>find<span class="token punctuation">(</span>Savings<span class="token punctuation">.</span>class<span class="token punctuation">,</span> <span class="token number">1</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
	assertEquals<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> savings<span class="token punctuation">.</span>getWallet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getAmount<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>intValue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	assertEquals<span class="token punctuation">(</span>Currency<span class="token punctuation">.</span>getInstance<span class="token punctuation">(</span>Locale<span class="token punctuation">.</span>US<span class="token punctuation">)</span><span class="token punctuation">,</span> savings<span class="token punctuation">.</span>getWallet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getCurrency<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
}<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Savings <span class="token punctuation">(</span>money<span class="token punctuation">,</span> currency<span class="token punctuation">,</span> id<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&#39;USD&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">SELECT</span>
    s<span class="token punctuation">.</span>id <span class="token keyword">as</span> id1_0_0_<span class="token punctuation">,</span>
    s<span class="token punctuation">.</span>money <span class="token operator">/</span> <span class="token number">100</span> <span class="token keyword">as</span> money2_0_0_<span class="token punctuation">,</span>
    s<span class="token punctuation">.</span>currency <span class="token keyword">as</span> currency3_0_0_
<span class="token keyword">FROM</span>
    Savings s
<span class="token keyword">WHERE</span>
    s<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="criteria查询" tabindex="-1"><a class="header-anchor" href="#criteria查询"><span>Criteria查询</span></a></h1><p>条件查询为HQL、JPQL和native SQL查询提供了一种类型安全的替代方法。</p><p>条件查询是一种编程的、类型安全的表达查询的方式。使用接口和类来表示查询的各个部分（如查询本身、select子句或order by等）。在引用属性方面，它们也是类型安全的，我们稍后会看到。</p><p>条件查询本质上是一个对象图，图中的每个部分表示一个原子的查询。执行条件查询的第一步是构建此图。在使用条件查询之前，首先需要熟悉jakarta.persistence.criteria.CriteriaBuilder接口。它是CriteriaQuery的构建工厂。通过调用jakarta.persistence.EntityManagerFactory或jakarta.persistence.EntityManager的getCriteriaBuilder（）方法，可以获得jakarta.prersistence.CriteriaBuilder实例。</p><p>下一步是获取jakarta.persistence.criteria.CriteriaQuery。为此，可以使用jakarta.prersistence.coriteria.CriteriaBuilder上的三种方法之一完成此操作：</p><ul><li><code>&lt;T&gt; CriteriaQuery&lt;T&gt; createQuery( Class&lt;T&gt; resultClass )</code></li><li><code>CriteriaQuery&lt;Tuple&gt; createTupleQuery()</code></li><li><code>CriteriaQuery&lt;Object&gt; createQuery()</code></li></ul><p>根据查询结果的类型，每种方法都有不同的用途。</p><h2 id="条件查询的类型" tabindex="-1"><a class="header-anchor" href="#条件查询的类型"><span>条件查询的类型</span></a></h2><p>条件查询的类型（也称为＜T＞）指示查询结果中的预期类型。这可能是实体、整数或任何其他对象。</p><h2 id="选择实体" tabindex="-1"><a class="header-anchor" href="#选择实体"><span>选择实体</span></a></h2><p>这可能是最常见的查询形式。应用程序希望查询实体实例。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CriteriaBuilder</span> builder <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> criteria <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1.</span>
<span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> root <span class="token operator">=</span> criteria<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2.</span>
criteria<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3.</span>
criteria<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Person_</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> persons <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>criteria<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>该示例使用createQuery()传入Person类引用，因为查询结果将是Person对象。</li><li>选择查询的实体， 对应SQL中的 <code>from table</code></li><li>指定返回那些列，本例中对CriteriaQuery#select方法的调用是不必要的，因为根将是隐含的选择，因为我们只有一个查询根。这里只做了一个示例的完整性。</li><li>Person_.name引用是Jakarta Persistence Metamodel引用的静态形式的一个示例。</li></ol><h2 id="选择表达式" tabindex="-1"><a class="header-anchor" href="#选择表达式"><span>选择表达式</span></a></h2><p>选择表达式的最简单形式是从实体中选择特定属性。但这个表达式也可能表示聚合、数学运算等。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CriteriaBuilder</span> builder <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> criteria <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> root <span class="token operator">=</span> criteria<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
criteria<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Person_</span><span class="token punctuation">.</span>nickName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
criteria<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Person_</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nickNames <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>criteria<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在本例中，查询类型为java.lang.String，因为这是预期的结果类型（Person#nickName属性的类型为java.lang.String）。属性引用通过Root#get方法调用完成的。</p><h2 id="选择多个值" tabindex="-1"><a class="header-anchor" href="#选择多个值"><span>选择多个值</span></a></h2><p>实际上，使用条件查询选择多个值有几种不同的方法。我们将在这里探讨两个选项，一种推荐的方法是使用元组，另一种是包装器查询。</p><h5 id="示例-使用数组" tabindex="-1"><a class="header-anchor" href="#示例-使用数组"><span>示例：使用数组</span></a></h5><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CriteriaBuilder</span> builder <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">CriteriaQuery</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> criteria <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//</span>
<span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> root <span class="token operator">=</span> criteria<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Path</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> idPath <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Person_</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Path</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nickNamePath <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Person_</span><span class="token punctuation">.</span>nickName<span class="token punctuation">)</span><span class="token punctuation">;</span>

criteria<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span>idPath<span class="token punctuation">,</span> nickNamePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//</span>
criteria<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Person_</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> idAndNickNames <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>criteria<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从技术上讲，这被归类为类型化查询，但从处理结果中可以看出，这有点误导。无论如何，这里的预期结果类型是一个数组。</p><h5 id="示例-使用multiselect" tabindex="-1"><a class="header-anchor" href="#示例-使用multiselect"><span>示例：使用multiselect</span></a></h5><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CriteriaBuilder</span> builder <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">CriteriaQuery</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> criteria <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> root <span class="token operator">=</span> criteria<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Path</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> idPath <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Person_</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Path</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nickNamePath <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Person_</span><span class="token punctuation">.</span>nickName<span class="token punctuation">)</span><span class="token punctuation">;</span>

criteria<span class="token punctuation">.</span><span class="token function">multiselect</span><span class="token punctuation">(</span>idPath<span class="token punctuation">,</span> nickNamePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
criteria<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Person_</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> idAndNickNames <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>criteria<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="选择-包装器" tabindex="-1"><a class="header-anchor" href="#选择-包装器"><span>选择 包装器</span></a></h2><p>选择多个值的另一种选择是选择一个对象，该对象将“包装”多个值。返回示例查询，而不是返回[Person#id，Person#nickName]数组，而是声明一个保存这些值的类并将其用作返回对象。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonWrapper</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> nickName<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">PersonWrapper</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> nickName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>nickName <span class="token operator">=</span> nickName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getNickName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> nickName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token class-name">CriteriaBuilder</span> builder <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PersonWrapper</span><span class="token punctuation">&gt;</span></span> criteria <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token class-name">PersonWrapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> root <span class="token operator">=</span> criteria<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Path</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> idPath <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Person_</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Path</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nickNamePath <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Person_</span><span class="token punctuation">.</span>nickName<span class="token punctuation">)</span><span class="token punctuation">;</span>

criteria<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token class-name">PersonWrapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> idPath<span class="token punctuation">,</span> nickNamePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
criteria<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Person_</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PersonWrapper</span><span class="token punctuation">&gt;</span></span> wrappers <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>criteria<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，我们看到将用于包装结果值的包装器对象的简单定义。具体来说，请注意构造函数及其参数类型。因为我们将返回PersonWrapper对象，所以我们使用PersonWrappe作为条件查询的类型。</p><h2 id="元组条件查询" tabindex="-1"><a class="header-anchor" href="#元组条件查询"><span>元组条件查询</span></a></h2><p>选择多个值的更好方法是使用包装器（我们刚刚在选择包装器中看到）或使用jakarta.persistence.Tuple合约。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CriteriaBuilder</span> builder <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple</span><span class="token punctuation">&gt;</span></span> criteria <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token class-name">Tuple</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> root <span class="token operator">=</span> criteria<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Path</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> idPath <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Person_</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Path</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nickNamePath <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Person_</span><span class="token punctuation">.</span>nickName<span class="token punctuation">)</span><span class="token punctuation">;</span>

criteria<span class="token punctuation">.</span><span class="token function">multiselect</span><span class="token punctuation">(</span>idPath<span class="token punctuation">,</span> nickNamePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
criteria<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Person_</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple</span><span class="token punctuation">&gt;</span></span> tuples <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>criteria<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Tuple</span> tuple <span class="token operator">:</span> tuples<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">Long</span> id <span class="token operator">=</span> tuple<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>idPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">String</span> nickName <span class="token operator">=</span> tuple<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nickNamePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//or using indices</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Tuple</span> tuple <span class="token operator">:</span> tuples<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">Long</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span> tuple<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">String</span> nickName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> tuple<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此示例说明如何通过jakarta.persistence.Tuple接口访问查询结果。该示例使用jakarta.persistence.criteria.criteria.CriteriaBuilder的显式createTupleQuery（）。另一种方法是使用createQuery（Tuple.class）。</p><p>jakarta.persistence.Tuple合同提供了三种形式的底层元素访问：</p><ul><li>typed: <code>tuple.get( idPath )</code> 和 <code>tuple.get( nickNamePath )</code>使用的就是这种方式，这允许基于用于构建条件的jakarta.persistence.TupleElement表达式对底层元组值进行类型化访问。</li><li>positional： 允许基于位置访问基础元组值。简单的Object get（int position）形式与选择数组和使用multiselect选择数组中所示的访问非常相似。＜X＞X get（int position，Class＜X＞类型形式允许类型化位置访问，但基于显式提供的类型，元组值必须是类型可赋值的。</li><li>aliased：允许基于（可选）分配的别名访问基础元组值。示例查询未应用别名。别名将通过jakarta.persistence.criteriaSelection上的alias 方法应用。就像位置访问一样，有类型化（Object get（String alias））和非类型化（＜X＞X get（String别名，Class＜X＞type））形式。</li></ul><h2 id="from子句" tabindex="-1"><a class="header-anchor" href="#from子句"><span>from子句</span></a></h2><p>CriteriaQuery对象定义对一个或多个实体、可嵌入或基本抽象模式类型的查询。查询的根对象是实体，可以从中访问其他类型。</p><p>FROM子句的所有单独部分（roots, joins, paths）都实现了jakarta.persistence.criteria.FROM接口。</p><h2 id="roots" tabindex="-1"><a class="header-anchor" href="#roots"><span>roots</span></a></h2><p>根定义查询中所有join、路径和属性的基础。根始终是实体类型。根由jakarta.persistence.criteria.criteria.CriteriaQuery上的重载from方法定义并添加到条件中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">X</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">X</span><span class="token punctuation">&gt;</span></span> <span class="token function">from</span><span class="token punctuation">(</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">X</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">X</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">X</span><span class="token punctuation">&gt;</span></span> <span class="token function">from</span><span class="token punctuation">(</span> <span class="token class-name">EntityType</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">X</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CriteriaBuilder</span> builder <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> criteria <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> root <span class="token operator">=</span> criteria<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>条件查询可以定义多个根，其效果是在新添加的根和其他根之间创建笛卡尔积：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CriteriaBuilder</span> builder <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple</span><span class="token punctuation">&gt;</span></span> criteria <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token class-name">Tuple</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> personRoot <span class="token operator">=</span> criteria<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Partner</span><span class="token punctuation">&gt;</span></span> partnerRoot <span class="token operator">=</span> criteria<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Partner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
criteria<span class="token punctuation">.</span><span class="token function">multiselect</span><span class="token punctuation">(</span>personRoot<span class="token punctuation">,</span> partnerRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Predicate</span> personRestriction <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>
	builder<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>personRoot<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Person_</span><span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">,</span>
	builder<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>personRoot<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Person_</span><span class="token punctuation">.</span>phones<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Predicate</span> partnerRestriction <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>
	builder<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>partnerRoot<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Partner_</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">,</span>
	builder<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>partnerRoot<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Partner_</span><span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
criteria<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>personRestriction<span class="token punctuation">,</span> partnerRestriction<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple</span><span class="token punctuation">&gt;</span></span> tuples <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>criteria<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="joins" tabindex="-1"><a class="header-anchor" href="#joins"><span>joins</span></a></h2><p>joins允许从其他jakarta.persistence.criteria.from导航到关联或嵌入属性。joins是由jakarta.persistence.criteria.From接口的大量重载join方法创建的。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CriteriaBuilder</span> builder <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Phone</span><span class="token punctuation">&gt;</span></span> criteria <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token class-name">Phone</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Phone</span><span class="token punctuation">&gt;</span></span> root <span class="token operator">=</span> criteria<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Phone</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Phone.person is a @ManyToOne</span>
<span class="token class-name">Join</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Phone</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> personJoin <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">Phone_</span><span class="token punctuation">.</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Person.addresses is an @ElementCollection</span>
<span class="token class-name">Join</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> addressesJoin <span class="token operator">=</span> personJoin<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">Person_</span><span class="token punctuation">.</span>addresses<span class="token punctuation">)</span><span class="token punctuation">;</span>

criteria<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Phone_</span><span class="token punctuation">.</span>calls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Phone</span><span class="token punctuation">&gt;</span></span> phones <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>criteria<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="fetches" tabindex="-1"><a class="header-anchor" href="#fetches"><span>Fetches</span></a></h2><p>就像在HQL和JPQL中一样，条件查询可以指定与所有者一起fetch关联数据。fetch由jakarta.persistence.criteria.From接口的大量重载fetch方法创建。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CriteriaBuilder</span> builder <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Phone</span><span class="token punctuation">&gt;</span></span> criteria <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token class-name">Phone</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Phone</span><span class="token punctuation">&gt;</span></span> root <span class="token operator">=</span> criteria<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Phone</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Phone.person is a @ManyToOne</span>
<span class="token class-name">Fetch</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Phone</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> personFetch <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token class-name">Phone_</span><span class="token punctuation">.</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Person.addresses is an @ElementCollection</span>
<span class="token class-name">Fetch</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> addressesJoin <span class="token operator">=</span> personFetch<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token class-name">Person_</span><span class="token punctuation">.</span>addresses<span class="token punctuation">)</span><span class="token punctuation">;</span>

criteria<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Phone_</span><span class="token punctuation">.</span>calls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Phone</span><span class="token punctuation">&gt;</span></span> phones <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>criteria<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从技术上讲，嵌入属性总是从其所有者那里获取的。然而，为了定义Phone#addresses的获取，我们需要jakarta.persistence.criteria.Fetch，因为元素集合默认为LAZY。</p><h2 id="path-expressions" tabindex="-1"><a class="header-anchor" href="#path-expressions"><span>Path expressions</span></a></h2><p>Roots, joins 和 fetches本身也是路径表达式。</p><h2 id="使用参数" tabindex="-1"><a class="header-anchor" href="#使用参数"><span>使用参数</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CriteriaBuilder</span> builder <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> criteria <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> root <span class="token operator">=</span> criteria<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">ParameterExpression</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nickNameParameter <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">parameter</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
criteria<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Person_</span><span class="token punctuation">.</span>nickName<span class="token punctuation">)</span><span class="token punctuation">,</span> nickNameParameter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">TypedQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> query <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>criteria<span class="token punctuation">)</span><span class="token punctuation">;</span>
query<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span>nickNameParameter<span class="token punctuation">,</span> <span class="token string">&quot;JD&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> persons <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用jakarta.persistence.criteria.CriteriaBuilder的parameter方法获取参数引用。然后使用参数引用将参数值绑定到jakarta.persistence.Query。</p><h2 id="using-group-by" tabindex="-1"><a class="header-anchor" href="#using-group-by"><span>Using group by</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CriteriaBuilder</span> builder <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple</span><span class="token punctuation">&gt;</span></span> criteria <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token class-name">Tuple</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> root <span class="token operator">=</span> criteria<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

criteria<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
criteria<span class="token punctuation">.</span><span class="token function">multiselect</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> builder<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple</span><span class="token punctuation">&gt;</span></span> tuples <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>criteria<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Tuple</span> tuple <span class="token operator">:</span> tuples<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> tuple<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">Long</span> count <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span> tuple<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="规范" tabindex="-1"><a class="header-anchor" href="#规范"><span>规范</span></a></h1><h3 id="path导航" tabindex="-1"><a class="header-anchor" href="#path导航"><span>path导航</span></a></h3><p>Path实例可以是Root实例、Join实例、通过get导航方法从另一个Path实例派生的Path实例，或者通过使用key或value方法从映射值关联或元素集合派生出的Path实例。</p><p>当执行条件查询时，使用Jakarta Persistence查询语言的路径导航， 等同于 inner join 的语义。也就是说，如果非终端Path实例的值为空，则该路径被认为没有值，并且不参与查询结果的确定。</p><p>get方法用于路径导航。get方法的参数由相应元模型类对应的SingularAttribute或集合值属性（CollectionAttribute、SetAttribute、ListAttribute或MapAttribute）指定。</p><h5 id="示例一" tabindex="-1"><a class="header-anchor" href="#示例一"><span>示例一：</span></a></h5><p>在下面的例子中，<em>ContactInfo</em>是由一个<em>address</em> 和一组<em>Phone</em> 组成的可嵌入类。<em>Phone</em> 是一个实体。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Vendor</span><span class="token punctuation">&gt;</span></span> q <span class="token operator">=</span> cb<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token class-name">Vendor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> emp <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Join</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ContactInfo</span><span class="token punctuation">,</span> <span class="token class-name">Phone</span><span class="token punctuation">&gt;</span></span> phone <span class="token operator">=</span>emp<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">Employee_</span><span class="token punctuation">.</span>contactInfo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">ContactInfo_</span><span class="token punctuation">.</span>phones<span class="token punctuation">)</span><span class="token punctuation">;</span>
q<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>cb<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>emp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Employee_</span><span class="token punctuation">.</span>contactInfo<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">ContactInfo_</span><span class="token punctuation">.</span>address<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Address_</span><span class="token punctuation">.</span>zipcode<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;95054&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>phone<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Phone_</span><span class="token punctuation">.</span>vendor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下Jakarta Persistence查询语言查询是等效的：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> p<span class="token punctuation">.</span>vendor
<span class="token keyword">FROM</span> Employee e <span class="token keyword">JOIN</span> e<span class="token punctuation">.</span>contactInfo<span class="token punctuation">.</span>phones p
<span class="token keyword">WHERE</span> e<span class="token punctuation">.</span>contactInfo<span class="token punctuation">.</span>address<span class="token punctuation">.</span>zipcode <span class="token operator">=</span> <span class="token string">&#39;95054&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="示例二" tabindex="-1"><a class="header-anchor" href="#示例二"><span>示例二：</span></a></h5><p>在本例中，photos属性对应于map(key=照片标签,value=文件名)。map键是一个字符串，值是一个对象。此查询的结果将作为Tuple对象返回，其元素类型为String和object。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple</span><span class="token punctuation">&gt;</span></span> q <span class="token operator">=</span> cb<span class="token punctuation">.</span><span class="token function">createTupleQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span></span> item <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Item</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MapJoin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> photo <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">Item_</span><span class="token punctuation">.</span>photos<span class="token punctuation">)</span><span class="token punctuation">;</span>
q<span class="token punctuation">.</span><span class="token function">multiselect</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Item_</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> photo<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>cb<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>photo<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;%egret%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下Jakarta Persistence查询语言查询是等效的：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> i<span class="token punctuation">.</span>name<span class="token punctuation">,</span> p
<span class="token keyword">FROM</span> Item i <span class="token keyword">JOIN</span> i<span class="token punctuation">.</span>photos p
<span class="token keyword">WHERE</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">LIKE</span> <span class="token string">&#39;%egret%&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,103);function P(x,I){const s=o("ExternalLinkIcon");return c(),i("div",null,[d,n("p",null,[a("然而，正如"),n("a",k,[a("本文"),t(s)]),a("所解释的，这并不总是可行的，尤其是对于前端节点。因此，Hibernate提供了Hibernate.jdbc.time_zone配置属性，可以配置该属性：")]),v,n("ul",null,[n("li",null,[m,a(" - "),n("a",b,[g,t(s)])]),n("li",null,[y,a(" - "),n("a",h,[w,t(s)])]),n("li",null,[f,a(" - "),n("a",T,[j,a(" annotation"),t(s)])]),n("li",null,[C,a(" - "),n("a",S,[q,a(" annotation"),t(s)])])]),A])}const L=p(r,[["render",P],["__file","15-Hibernate.html.vue"]]),M=JSON.parse('{"path":"/gudie/15-Hibernate.html","title":"Hibernate 指南","lang":"zh-CN","frontmatter":{"title":"Hibernate 指南","date":"2024-04-20T00:00:00.000Z","categories":["java","Hibernate"],"tags":["Hibernate"],"description":"概述 image-20240424144856481image-20240424144856481 Hibernate作为一种ORM解决方案，位于应用程序数据访问层和关系数据库之间，如上图所示。 Java 应用程序利用 Hibernate API 来加载、存储、查询等其域数据。 作为 Jakarta Persistence 提供商，Hibernate ...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/gudie/15-Hibernate.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"Hibernate 指南"}],["meta",{"property":"og:description","content":"概述 image-20240424144856481image-20240424144856481 Hibernate作为一种ORM解决方案，位于应用程序数据访问层和关系数据库之间，如上图所示。 Java 应用程序利用 Hibernate API 来加载、存储、查询等其域数据。 作为 Jakarta Persistence 提供商，Hibernate ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-24T08:19:31.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"Hibernate"}],["meta",{"property":"article:published_time","content":"2024-04-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-24T08:19:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Hibernate 指南\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-24T08:19:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"值类型","slug":"值类型","link":"#值类型","children":[]},{"level":2,"title":"实体类型","slug":"实体类型","link":"#实体类型","children":[{"level":3,"title":"@Basic","slug":"basic","link":"#basic","children":[]},{"level":3,"title":"@Column","slug":"column","link":"#column","children":[]},{"level":3,"title":"@Formula","slug":"formula","link":"#formula","children":[]},{"level":3,"title":"映射基本类型","slug":"映射基本类型","link":"#映射基本类型","children":[]},{"level":3,"title":"枚举","slug":"枚举","link":"#枚举","children":[]},{"level":3,"title":"Boolean","slug":"boolean","link":"#boolean","children":[]},{"level":3,"title":"Byte","slug":"byte","link":"#byte","children":[]},{"level":3,"title":"Short","slug":"short","link":"#short","children":[]},{"level":3,"title":"Integer","slug":"integer","link":"#integer","children":[]},{"level":3,"title":"Long","slug":"long","link":"#long","children":[]},{"level":3,"title":"BigInteger","slug":"biginteger","link":"#biginteger","children":[]},{"level":3,"title":"Double","slug":"double","link":"#double","children":[]},{"level":3,"title":"Float","slug":"float","link":"#float","children":[]},{"level":3,"title":"BigDecimal","slug":"bigdecimal","link":"#bigdecimal","children":[]},{"level":3,"title":"Character","slug":"character","link":"#character","children":[]},{"level":3,"title":"String","slug":"string","link":"#string","children":[]},{"level":3,"title":"字符数组","slug":"字符数组","link":"#字符数组","children":[]},{"level":3,"title":"Clob / NClob","slug":"clob-nclob","link":"#clob-nclob","children":[]},{"level":3,"title":"Byte array","slug":"byte-array","link":"#byte-array","children":[]},{"level":3,"title":"Blob","slug":"blob","link":"#blob","children":[]},{"level":3,"title":"Duration","slug":"duration","link":"#duration","children":[]},{"level":3,"title":"Instant","slug":"instant","link":"#instant","children":[]},{"level":3,"title":"LocalDateTime","slug":"localdatetime","link":"#localdatetime","children":[]},{"level":3,"title":"LocalTime","slug":"localtime","link":"#localtime","children":[]},{"level":3,"title":"OffsetDateTime","slug":"offsetdatetime","link":"#offsetdatetime","children":[]},{"level":3,"title":"OffsetTime","slug":"offsettime","link":"#offsettime","children":[]},{"level":3,"title":"TimeZone","slug":"timezone","link":"#timezone","children":[]},{"level":3,"title":"ZonedDateTime","slug":"zoneddatetime","link":"#zoneddatetime","children":[]},{"level":3,"title":"Calendar、Date、Time、Timestamp","slug":"calendar、date、time、timestamp","link":"#calendar、date、time、timestamp","children":[]},{"level":3,"title":"Class","slug":"class","link":"#class","children":[]},{"level":3,"title":"Currency","slug":"currency","link":"#currency","children":[]},{"level":3,"title":"Locale","slug":"locale","link":"#locale","children":[]},{"level":3,"title":"UUID","slug":"uuid","link":"#uuid","children":[]},{"level":3,"title":"InetAddress","slug":"inetaddress","link":"#inetaddress","children":[]},{"level":3,"title":"JSON mapping","slug":"json-mapping","link":"#json-mapping","children":[]},{"level":3,"title":"XML mapping","slug":"xml-mapping","link":"#xml-mapping","children":[]},{"level":3,"title":"基本数组映射","slug":"基本数组映射","link":"#基本数组映射","children":[]},{"level":3,"title":"基本集合类型","slug":"基本集合类型","link":"#基本集合类型","children":[]},{"level":3,"title":"组合基本类型的映射","slug":"组合基本类型的映射","link":"#组合基本类型的映射","children":[]},{"level":3,"title":"自定义类型映射","slug":"自定义类型映射","link":"#自定义类型映射","children":[]},{"level":3,"title":"处理时间数据","slug":"处理时间数据","link":"#处理时间数据","children":[]},{"level":3,"title":"@TimeZoneStorage","slug":"timezonestorage","link":"#timezonestorage","children":[]},{"level":3,"title":"AttributeConverters","slug":"attributeconverters","link":"#attributeconverters","children":[]},{"level":3,"title":"Registries","slug":"registries","link":"#registries","children":[]},{"level":3,"title":"TypeContributor","slug":"typecontributor","link":"#typecontributor","children":[]},{"level":3,"title":"案例研究：BitSet","slug":"案例研究-bitset","link":"#案例研究-bitset","children":[]},{"level":3,"title":"SQL引用标识符","slug":"sql引用标识符","link":"#sql引用标识符","children":[]},{"level":3,"title":"生成属性","slug":"生成属性","link":"#生成属性","children":[]},{"level":3,"title":"列转化换器：读取和写入表达式","slug":"列转化换器-读取和写入表达式","link":"#列转化换器-读取和写入表达式","children":[]}]},{"level":2,"title":"条件查询的类型","slug":"条件查询的类型","link":"#条件查询的类型","children":[]},{"level":2,"title":"选择实体","slug":"选择实体","link":"#选择实体","children":[]},{"level":2,"title":"选择表达式","slug":"选择表达式","link":"#选择表达式","children":[]},{"level":2,"title":"选择多个值","slug":"选择多个值","link":"#选择多个值","children":[]},{"level":2,"title":"选择 包装器","slug":"选择-包装器","link":"#选择-包装器","children":[]},{"level":2,"title":"元组条件查询","slug":"元组条件查询","link":"#元组条件查询","children":[]},{"level":2,"title":"from子句","slug":"from子句","link":"#from子句","children":[]},{"level":2,"title":"roots","slug":"roots","link":"#roots","children":[]},{"level":2,"title":"joins","slug":"joins","link":"#joins","children":[]},{"level":2,"title":"Fetches","slug":"fetches","link":"#fetches","children":[]},{"level":2,"title":"Path expressions","slug":"path-expressions","link":"#path-expressions","children":[]},{"level":2,"title":"使用参数","slug":"使用参数","link":"#使用参数","children":[]},{"level":2,"title":"Using group by","slug":"using-group-by","link":"#using-group-by","children":[{"level":3,"title":"path导航","slug":"path导航","link":"#path导航","children":[]}]}],"git":{"createdTime":1713946771000,"updatedTime":1713946771000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":1}]},"readingTime":{"minutes":47.7,"words":14309},"filePathRelative":"gudie/15-Hibernate.md","localizedDate":"2024年4月20日","excerpt":"\\n<figure><figcaption>image-20240424144856481</figcaption></figure>\\n<p>Hibernate作为一种ORM解决方案，位于应用程序数据访问层和关系数据库之间，如上图所示。 Java 应用程序利用 Hibernate API 来加载、存储、查询等其域数据。</p>\\n<p>作为 Jakarta Persistence 提供商，Hibernate 实现了 Java Persistence API 规范，Jakarta Persistence 接口与 Hibernate 特定实现之间的关联可以在下图中可视化：</p>\\n<figure><figcaption>image-20240424145000570</figcaption></figure>","autoDesc":true}');export{L as comp,M as data};
