import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o,c as p,b as n,d as s,e,a as t}from"./app-DMMI-IL5.js";const r="/assets/1622006881509-3e6a59d0-9116-47ed-b35b-78a2abcef2f7-DrjrbUuR.png",c="/assets/image-20221202165418305-BuwfAvFi.png",d="/assets/image-20221202165624634-Dap3oiwW.png",u="/assets/dependency-management-resolution-CwNYqINO.png",v="/assets/gradle-core-test-build-scan-dependencies-9AJGVUCo.png",g={},k=n("h1",{id:"核心概念",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#核心概念"},[n("span",null,"核心概念")])],-1),m=n("h2",{id:"_1-gradle-是一个通用的构建工具",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-gradle-是一个通用的构建工具"},[n("span",null,"1. Gradle 是一个通用的构建工具")])],-1),b=n("p",null,"Gradle 可以用于构建（build）任何软件，因为它对你要构建的东西或构建方式几乎不做任何假设。不过当前它最大的限制是，只支持兼容 Maven 和 lvy 的仓库和文件系统。",-1),h={href:"https://docs.gradle.org/current/userguide/plugins.html#plugins",target:"_blank",rel:"noopener noreferrer"},_=n("em",null,"plugins",-1),y=n("h2",{id:"_2-核心模型基于-task",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-核心模型基于-task"},[n("span",null,"2. 核心模型基于 task")])],-1),f=n("p",null,"task 是 Gradle 的工作单元。Gradle 的构建模型就是一个 task 的定向无环图（Directed Acyclic Graphs, DAGs）。也就是说，构建本质上是在配置一个由 task 组成的定向无环图。task 之间根据它们的依赖关系相连。一旦 task 图被创建，Gradle 就能确定该以何种顺序执行 task。",-1),x=n("p",null,"这张图显示了两个 task 图的例子，一个是抽象的，一个是具体的，task 之间的依赖关系用箭头表示：",-1),G=n("figure",null,[n("img",{src:r,alt:"img",tabindex:"0",loading:"lazy"}),n("figcaption",null,"img")],-1),q={href:"https://docs.gradle.org/current/userguide/tutorial_using_tasks.html#sec:task_dependencies",target:"_blank",rel:"noopener noreferrer"},j=n("p",null,"一个 task 包括：",-1),P=n("ul",null,[n("li",null,"动作（Actions）——执行某些工作。例如复制文件或者编译源码。"),n("li",null,"输入（Inputs）——给动作使用或操作的值、文件和目录"),n("li",null,"输出（Outputs）——由动作修改或生成的文件和目录")],-1),w={href:"https://docs.gradle.org/current/userguide/base_plugin.html#sec:base_tasks",target:"_blank",rel:"noopener noreferrer"},M=n("p",null,[s("你可以选择你需要的 task 来运行。为了节约时间，请选择刚好能满足需要的 task。如果想运行单元测试，就选择执行单元测试的 task——通常是 "),n("code",null,"test"),s("。如果想打包一个应用，大多数构建都提供一个 "),n("code",null,"assemble"),s(" task 以供使用。")],-1),T={href:"https://docs.gradle.org/current/userguide/more_about_tasks.html#sec:up_to_date_checks",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"clean",-1),A=n("h2",{id:"_3-gradle-的多个固定构建阶段",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-gradle-的多个固定构建阶段"},[n("span",null,"3. Gradle 的多个固定构建阶段")])],-1),E=n("p",null,"Gradle 会在三个阶段（phases）评估（evaluates）并执行（execute）构建脚本。理解这三个阶段非常重要。",-1),D=n("ol",null,[n("li",null,"初始化（Initialization） 设置构建的环境，并明确哪些项目将参与其中。"),n("li",null,"配置（Configuration） 构造并配置构建的 task 图。然后根据用户想要运行的 task，确定需要运行哪些任务，以及运行的顺序。"),n("li",null,"执行（Execution） 运行配置阶段结束时选择的 task。")],-1),J={href:"https://docs.gradle.org/current/userguide/build_lifecycle.html#build_lifecycle",target:"_blank",rel:"noopener noreferrer"},L=n("p",null,[n("strong",null,"与 Apache Maven 术语的比较")],-1),C=n("p",null,"Gradle 的“构建阶段”与 Maven 的“阶段”不同。Maven 的“阶段”将构建执行划分成了多个部分。它们的作用类似于 Gradle 的 task 图，尽管没有那么灵活。",-1),S={href:"https://docs.gradle.org/current/userguide/base_plugin.html#sec:base_tasks",target:"_blank",rel:"noopener noreferrer"},I={href:"https://docs.gradle.org/current/userguide/authoring_maintainable_build_scripts.html#sec:avoid_imperative_logic_in_scripts",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"doLast {}",-1),B=n("code",null,"doFirst {}",-1),O={href:"https://docs.gradle.org/current/userguide/authoring_maintainable_build_scripts.html#sec:minimize_logic_executed_configuration_phase",target:"_blank",rel:"noopener noreferrer"},U={href:"https://scans.gradle.com/",target:"_blank",rel:"noopener noreferrer"},z=n("h2",{id:"_4-gradle-可以使用多种方式进行扩展",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-gradle-可以使用多种方式进行扩展"},[n("span",null,"4. Gradle 可以使用多种方式进行扩展")])],-1),H=n("p",null,"如果你能用 Gradle 内建的构建逻辑来构建你的项目，那再好不过了。然而事实往往没有这么顺利。大多数构建都有一些特殊的要求，这就要求你能添加自定义构建逻辑。",-1),N=n("p",null,"Gradle 提供了多种机制来进行扩展，比如：",-1),F={href:"https://docs.gradle.org/current/userguide/custom_tasks.html",target:"_blank",rel:"noopener noreferrer"},K={href:"https://docs.gradle.org/current/userguide/organizing_gradle_projects.html#sec:build_sources",target:"_blank",rel:"noopener noreferrer"},Z=n("em",null,"buildSrc",-1),$=n("li",null,[s("自定义 task 动作 你可以通过 "),n("code",null,"Task.doFirst()"),s(" 和 "),n("code",null,"Task.doLast()"),s(" 方法将自定义构建逻辑附加在 task 之前或之后执行。")],-1),W={href:"https://docs.gradle.org/current/userguide/writing_build_scripts.html#sec:extra_properties",target:"_blank",rel:"noopener noreferrer"},X={href:"https://docs.gradle.org/current/userguide/building_java_projects.html#building_java_projects",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://guides.gradle.org/implementing-gradle-plugins/#modeling_dsl_like_apis",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://docs.gradle.org/current/userguide/building_java_projects.html#sec:java_source_sets",target:"_blank",rel:"noopener noreferrer"},nn=n("h2",{id:"_5-用构建脚本操作-api",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-用构建脚本操作-api"},[n("span",null,"5. 用构建脚本操作 API")])],-1),sn=n("p",null,[s("Gradle 的构建脚本看起来像可执行代码，实际上它的确是。这里有一个实现细节：设计良好的构建脚本描述了构建软件需要哪些（"),n("em",null,"what"),s("）步骤，而不是这些步骤应该如何（"),n("em",null,"how"),s("）完成工作。那是自定义任务类型和插件的工作。")],-1),an={href:"https://docs.gradle.org/current/userguide/authoring_maintainable_build_scripts.html#sec:avoid_imperative_logic_in_scripts",target:"_blank",rel:"noopener noreferrer"},en={href:"https://docs.gradle.org/current/dsl/",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://docs.gradle.org/current/javadoc/",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://docs.gradle.org/current/userguide/groovy_build_script_primer.html#groovy_build_script_primer",target:"_blank",rel:"noopener noreferrer"},on=t(`<p>由于 Gradle 运行在 JVM 上，构建脚本也可以使用标准的 Java API。Groovy 构建脚本可以额外使用 Groovy API，而 Kotlin 构建脚本可以使用 Kotlin 的。</p><h1 id="gradle生命周期" tabindex="-1"><a class="header-anchor" href="#gradle生命周期"><span>Gradle生命周期</span></a></h1><h2 id="build-gradle文件" tabindex="-1"><a class="header-anchor" href="#build-gradle文件"><span>build.gradle文件</span></a></h2><p>build脚本构建有三个阶段：</p><ul><li>初始化: Gradle 支持单项目和多项目构建。在初始化阶段，Gradle 确定哪些项目将参与构建，并为每个项目创建Project实例。</li><li>配置: 配置Project对象。 all 脚本里面的内容被执行用来配置所有项目。</li><li>执行：Gradle 确定要执行的任务子集，这些任务在配置阶段创建和配置。子集由传递给gradle命令的任务名称参数和当前目录确定。然后，Gradle 执行每个选定的任务。</li></ul><h2 id="settings-gradle文件" tabindex="-1"><a class="header-anchor" href="#settings-gradle文件"><span>settings.gradle文件</span></a></h2><p>设置文件在初始化阶段执行。multi-project项目必须在根目录创建settings文件，因为该文件定义了哪些项目参与构建。对于单项目，设置文件是可选的。除了定义包含的项目之外，您可能还需要它来将库添加到构建脚本类路径。</p><p><strong>示例：单项目的构建配置</strong></p><p><em><strong>settings.gradle</strong></em></p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>rootProject<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;basic&#39;</span>
println <span class="token string">&#39;This is executed during the initialization phase.&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>build.gradle</strong></em></p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>println <span class="token string">&#39;This is executed during the configuration phase.&#39;</span>

tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&#39;configured&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    println <span class="token string">&#39;This is also executed during the configuration phase, because :configured is used in the build.&#39;</span>
<span class="token punctuation">}</span>

tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        println <span class="token string">&#39;This is executed during the execution phase.&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&#39;testBoth&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doFirst <span class="token punctuation">{</span>
      println <span class="token string">&#39;This is executed first during the execution phase.&#39;</span>
    <span class="token punctuation">}</span>
    doLast <span class="token punctuation">{</span>
      println <span class="token string">&#39;This is executed last during the execution phase.&#39;</span>
    <span class="token punctuation">}</span>
    println <span class="token string">&#39;This is executed during the configuration phase as well, because :testBoth is used in the build.&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> gradle <span class="token builtin class-name">test</span> testBoth
This is executed during the initialization phase.

<span class="token operator">&gt;</span> Configure project <span class="token builtin class-name">:</span>
This is executed during the configuration phase.
This is executed during the configuration phase as well, because :testBoth is used <span class="token keyword">in</span> the build.

<span class="token operator">&gt;</span> Task :test
This is executed during the execution phase.

<span class="token operator">&gt;</span> Task :testBoth
This is executed first during the execution phase.
This is executed last during the execution phase.

BUILD SUCCESSFUL <span class="token keyword">in</span> 0s
<span class="token number">2</span> actionable tasks: <span class="token number">2</span> executed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于Build脚本，属性访问和方法调用的目标对象都是project。而settings脚本的目标对象是settings。</p><h2 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h2><p>Gradle 如何知道是进行单项目构建还是多项目构建？如果你触发构建的目录存在settings.gradle文件，gradle会使用该文件进行build。gradle也允许你在任何子项目目录下进行构建。当gradle运行的时候当前目录不存在settings.gradle文件，将会按照下面的方式查找：</p><ul><li>在父目录中查找</li><li>如果没有发现，按照单项目执行</li><li>如果发现，Gradle 会检查当前项目是否是多项目层次结构的一部分。如果不是，则作为单个项目执行。否则，将执行多项目build。</li></ul><p>此行为的目的是什么？Gradle 需要确定您所处的项目是否为多项目构建的子项目。当然，如果是子项目，则仅构建子项目及其依赖项目，但是gradle需要为整个多项目创建build配置。</p><h2 id="生命周期监听" tabindex="-1"><a class="header-anchor" href="#生命周期监听"><span>生命周期监听</span></a></h2><p>监听构建过程有两种方式：实现监听器接口或触发执行闭包。</p><p>你可以在项目evaluated之前或之后收到通知。这在可以在所有build脚本被定义后加入一些自己的逻辑，例如日志和监控。</p><p>下面是一个示例，该示例向<code>hasTests</code>属性值为 true 的每个项目添加一个任务。</p><p><em><strong>build.gradle</strong></em></p><div class="language-clojure line-numbers-mode" data-ext="clojure" data-title="clojure"><pre class="language-clojure"><code>allprojects <span class="token punctuation">{</span>
    afterEvaluate <span class="token punctuation">{</span> project -&gt;
        if <span class="token punctuation">(</span><span class="token function">project.hasTests</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            println <span class="token string">&quot;Adding test task to $project&quot;</span>
            project.task<span class="token punctuation">(</span><span class="token function">&#39;test&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                doLast <span class="token punctuation">{</span>
                    println <span class="token string">&quot;Running tests for $project&quot;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>project-a.gradle</strong></em></p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>hasTests <span class="token operator">=</span> <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> gradle <span class="token parameter variable">-q</span> <span class="token builtin class-name">test</span>
Adding <span class="token builtin class-name">test</span> task to project <span class="token string">&#39;:project-a&#39;</span>
Running tests <span class="token keyword">for</span> project <span class="token string">&#39;:project-a&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>评估任何项目时，也可以接收通知。此示例执行项目评估的一些自定义日志记录。请注意，无论项目评估成功还是失败并出现异常，都会收到通知。</p><p><em><strong>build.gradle</strong></em></p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>gradle<span class="token punctuation">.</span>afterProject <span class="token punctuation">{</span> project <span class="token operator">-&gt;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>project<span class="token punctuation">.</span>state<span class="token punctuation">.</span>failure<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        println <span class="token interpolation-string"><span class="token string">&quot;Evaluation of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">project</span></span><span class="token string"> FAILED&quot;</span></span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        println <span class="token interpolation-string"><span class="token string">&quot;Evaluation of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">project</span></span><span class="token string"> succeeded&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> gradle <span class="token parameter variable">-q</span> <span class="token builtin class-name">test</span>
Evaluation of root project <span class="token string">&#39;build-project-evaluate-events&#39;</span> succeeded
Evaluation of project <span class="token string">&#39;:project-a&#39;</span> succeeded
Evaluation of project <span class="token string">&#39;:project-b&#39;</span> FAILED

FAILURE: Build failed with an exception.

* Where:
Build <span class="token function">file</span> <span class="token string">&#39;/home/user/gradle/samples/project-b.gradle&#39;</span> line: <span class="token number">1</span>

* What went wrong:
A problem occurred evaluating project <span class="token string">&#39;:project-b&#39;</span><span class="token builtin class-name">.</span>
<span class="token operator">&gt;</span> broken

* Try:
<span class="token operator">&gt;</span> Run with <span class="token parameter variable">--stacktrace</span> option to get the stack trace.
<span class="token operator">&gt;</span> Run with <span class="token parameter variable">--info</span> or <span class="token parameter variable">--debug</span> option to get <span class="token function">more</span> log output.
<span class="token operator">&gt;</span> Run with <span class="token parameter variable">--scan</span> to get full insights.

* Get <span class="token function">more</span> <span class="token builtin class-name">help</span> at https://help.gradle.org

BUILD FAILED <span class="token keyword">in</span> 0s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将任务添加到项目后，您可以立即收到通知。这可用于在构建文件中提供任务之前设置一些默认值或添加行为。</p><p>下面的示例在创建每个任务时设置<code>srcDir</code>属性</p><p><em><strong>build.gradle</strong></em></p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>tasks<span class="token punctuation">.</span>whenTaskAdded <span class="token punctuation">{</span> task <span class="token operator">-&gt;</span>
    task<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>srcDir <span class="token operator">=</span> <span class="token string">&#39;src/main/java&#39;</span>
<span class="token punctuation">}</span>

tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>

println <span class="token interpolation-string"><span class="token string">&quot;source dir is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">a</span></span><span class="token string">.srcDir&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> gradle <span class="token parameter variable">-q</span> a
<span class="token builtin class-name">source</span> <span class="token function">dir</span> is src/main/java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以在执行任何任务之前和之后立即收到通知。</p><p>下面的示例记录每个任务执行的开始和结束。请注意，无论任务是成功完成还是失败并出现异常，都会收到通知。</p><p><em><strong>build.gradle</strong></em></p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span>

tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&#39;broken&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dependsOn ok
    doLast <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&#39;broken&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

gradle<span class="token punctuation">.</span>taskGraph<span class="token punctuation">.</span>beforeTask <span class="token punctuation">{</span> Task task <span class="token operator">-&gt;</span>
    println <span class="token interpolation-string"><span class="token string">&quot;executing </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">task</span></span><span class="token string"> ...&quot;</span></span>
<span class="token punctuation">}</span>

gradle<span class="token punctuation">.</span>taskGraph<span class="token punctuation">.</span>afterTask <span class="token punctuation">{</span> Task task<span class="token punctuation">,</span> TaskState state <span class="token operator">-&gt;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>failure<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        println <span class="token interpolation-string"><span class="token string">&quot;FAILED&quot;</span></span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        println <span class="token interpolation-string"><span class="token string">&quot;done&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="gradle使用的目录和文件" tabindex="-1"><a class="header-anchor" href="#gradle使用的目录和文件"><span>gradle使用的目录和文件</span></a></h1>`,45),pn={href:"https://docs.gradle.org/current/userguide/directory_layout.html#dir:gradle_user_home",target:"_blank",rel:"noopener noreferrer"},rn={href:"https://docs.gradle.org/current/userguide/directory_layout.html#dir:project_root",target:"_blank",rel:"noopener noreferrer"},cn={id:"gradle-用户主目录",tabindex:"-1"},dn={class:"header-anchor",href:"#gradle-用户主目录"},un={href:"https://docs.gradle.org/current/userguide/directory_layout.html#dir:gradle_user_home",target:"_blank",rel:"noopener noreferrer"},vn=t('<p>Gradle 用户主目录（默认情况下）用于存储全局配置属性和初始化脚本以及缓存和日志文件。其结构大致如下：<code>$USER_HOME/.gradle</code></p><figure><img src="'+c+'" alt="image-20221202165418305" tabindex="0" loading="lazy"><figcaption>image-20221202165418305</figcaption></figure><ol><li>全局缓存目录（用于非项目特定的所有内容）</li><li>特定于版本的缓存（例如，支持增量构建）</li><li>共享缓存（例如，用于依赖项的工件）</li><li>Gradle 守护进程的注册表和日志</li><li>全局初始化脚本</li><li>工具链支持下载的 JDK</li><li>由 Gradle Wrapper 下载的发行版</li><li>全局 Gradle 配置属性</li></ol>',3),gn={id:"清理缓存和分发",tabindex:"-1"},kn={class:"header-anchor",href:"#清理缓存和分发"},mn={href:"https://docs.gradle.org/current/userguide/directory_layout.html#dir:gradle_user_home:cache_cleanup",target:"_blank",rel:"noopener noreferrer"},bn=t("<p>从版本 4.10 开始，Gradle 会自动清理其用户主目录。当 Gradle 守护程序停止或关闭时，清理将在后台运行。如果使用 <code>--no-daemon</code>，它将在build后的以前台方式运行，并带有可视进度指示器</p><p>定期应用以下清理策略（最多每 24 小时一次）：</p><ul><li>将检查<code>caches/&lt;gradle-version&gt;/</code> 中特定于版本的缓存，以确定它们是否仍在使用中。否则，发布版本的目录将在 30 天处于非活动状态后删除，快照版本的目录将在不活动 7 天后删除。</li><li>检查。<code>caches</code> 中的共享缓存（例如 jars-*）是否仍在使用。如果没有仍在使用它们的 Gradle 版本，则会将其删除</li><li>当前 Gradle 版本使用的共享缓存<code>caches/</code>中的文件（例如 <code>jars-3h或modules-2</code> ） 将检查上次访问它们的时间。根据文件是可以在本地重新创建还是必须再次从远程存储库下载，该文件将分别在 7 天或 30 天未被访问后被删除。</li><li>将检查<code>wrapper/dists/</code> 中的 Gradle 发行版是否仍在使用，即是否存在相应的特定于版本的缓存目录。未使用的分配将被删除。</li></ul>",3),hn={id:"项目根目录",tabindex:"-1"},_n={class:"header-anchor",href:"#项目根目录"},yn={href:"https://docs.gradle.org/current/userguide/directory_layout.html#dir:project_root",target:"_blank",rel:"noopener noreferrer"},fn=t('<p>项目根目录包含属于项目的所有源文件。此外，它还包含由 Gradle 生成的文件和目录，例如 <code>.gradle和build</code> 。虽然前者通常签入源代码管理，但后者是Gradle用于支持增量构建等功能的瞬态文件。总体而言，典型项目根目录的剖析大致如下：</p><figure><img src="'+d+'" alt="image-20221202165624634" tabindex="0" loading="lazy"><figcaption>image-20221202165624634</figcaption></figure><ol><li>由 Gradle 生成的特定于项目的缓存目录</li><li>特定于版本的缓存（例如，支持增量构建）</li><li>此项目的构建目录，Gradle 在其中生成所有构建工件。</li><li>包含 Gradle Wrapper 的 JAR 文件和配置</li><li>特定于项目的 Gradle 配置属性</li><li>用于使用 Gradle 包装器执行构建的脚本</li><li>项目的设置文件，其中定义了子项目列表</li><li>通常，一个项目被组织成一个或多个子项目</li><li>每个子项目都有自己的 Gradle 构建脚本</li></ol>',3),xn={id:"项目缓存清理",tabindex:"-1"},Gn={class:"header-anchor",href:"#项目缓存清理"},qn={href:"https://docs.gradle.org/current/userguide/directory_layout.html#dir:project_root:cache_cleanup",target:"_blank",rel:"noopener noreferrer"},jn=t(`<p>从版本 4.10 开始，Gradle 会自动清理特定于项目的缓存目录。生成项目后，将定期（最多每 24 小时）检查<code>.gradle/&lt;gradle-version&gt;/</code> 中特定于版本的缓存目录，以确定它们是否仍在使用中。如果 7 天未使用，则会将其删除。</p><h1 id="gradle属性配置" tabindex="-1"><a class="header-anchor" href="#gradle属性配置"><span>gradle属性配置</span></a></h1><p>Gradle 提供了多种机制来配置 Gradle 本身和特定项目的行为。 以下是使用这些机制的参考。</p><p>配置 Gradle 行为时，您可以使用这些方法，按优先级从高到低的顺序列出：</p><ul><li>命令行：例如<code> --build-cache</code></li><li>系统属性：<code>gradle.properties</code> 文件中以 <code>systemProp</code> 开头的属性 ，例如 <code>systemProp.http.proxyHost=somehost.org</code></li><li>gradle属性：项目根目录或用户gradle目录 <code>gradle.properties</code> 文件 中的属性，例如 <code>org.gradle.caching=true</code></li><li>环境变量：<code>GRADLE_OPTS</code> 环境变量中指定的属性</li></ul><p>除了配置构建环境之外，您还可以使用项目属性（例如 <code>-PreleaseType=final</code>）配置给定的项目构建。</p><h2 id="gradle属性" tabindex="-1"><a class="header-anchor" href="#gradle属性"><span>gradle属性</span></a></h2><p>Gradle 考虑的最终配置是命令行上设置的所有 Gradle 属性和您的 gradle.properties 文件的组合。 如果在多个位置配置了一个选项，则在这些位置中的任何一个中找到的第一个将获胜：</p><ul><li>命令行，例如 -P 或 --project-prop 指定的属性</li><li><code>GRADLE_USER_HOME</code> 目录下的 gradle.properties</li><li>项目根目录下gradle.properties</li><li>gradle安装目录下的 gradle.properties</li></ul><blockquote><p>-Dgradle.user.home 命令行更改用户目录</p></blockquote><p>下面的这些属性来配置gradle的构建环境：</p><ul><li>org.gradle.caching=(true,false)：当设置为 true 时，Gradle 将尽可能重用任何先前构建的任务输出，从而加快构建速度。 默认情况下，构建缓存未启用。</li><li>org.gradle.daemon=(true,false)：当设置为 true 时，Gradle 守护进程用于运行构建。 默认为 true，构建将使用守护程序运行。</li><li>org.gradle.jvmargs=(JVM arguments)：指定用于 Gradle 守护程序的 JVM 参数。 该设置对于配置 JVM 内存设置以提高构建性能特别有用。 这不会影响 Gradle 客户端 VM 的 JVM 设置。默认：<em>-Xmx512m &quot;-XX:MaxMetaspaceSize=256m&quot;</em></li><li>org.gradle.logging.level=(quiet,warn,lifecycle,info,debug)：指定gradle的日志级别。默认是lifecycle</li><li>org.gradle.parallel=(true,false):配置后，Gradle 将 fork org.gradle.workers.max JVM 以并行执行项目。 默认为false。</li><li>org.gradle.workers.max=(max # of worker processes):配置并行工作线程数，默认和CPU个数相同</li></ul><h2 id="系统属性" tabindex="-1"><a class="header-anchor" href="#系统属性"><span>系统属性</span></a></h2><p>使用 -D 命令行选项，您可以将系统属性传递给运行 Gradle 的 JVM。 gradle 命令的 -D 选项与 java 命令的 -D 选项作用相同。</p><p>您还可以在 gradle.properties 文件中使用前缀 systemProp 设置系统属性。</p><p>下面是常用的系统属性：</p><ul><li>gradle.wrapperUser=(myuser)： 下载gradle发行包时使用的basic身份验证-用户名</li><li>gradle.wrapperPassword=(mypassword)：下载gradle发行包时使用的basic身份验证-密码</li><li>gradle.user.home=(path to directory)： 指定gradle的用户目录</li><li>https.protocols：以逗号分隔格式指定支持的 TLS 版本。 例如：TLSv1.2、TLSv1.3。</li></ul><blockquote><p>在多项目构建中，除根以外的任何项目中设置的systemProp属性都将被忽略。 也就是说，只会检查根项目的 gradle.properties 文件中以“systemProp”开头的属性。</p></blockquote><p>配置gradle wapper的http代理</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>systemProp<span class="token punctuation">.</span>http<span class="token punctuation">.</span>proxyHost<span class="token operator">=</span>www<span class="token punctuation">.</span>somehost<span class="token punctuation">.</span>org
systemProp<span class="token punctuation">.</span>http<span class="token punctuation">.</span>proxyPort<span class="token operator">=</span><span class="token number">8080</span>
systemProp<span class="token punctuation">.</span>http<span class="token punctuation">.</span>proxyUser<span class="token operator">=</span>userid
systemProp<span class="token punctuation">.</span>http<span class="token punctuation">.</span>proxyPassword<span class="token operator">=</span>password
systemProp<span class="token punctuation">.</span>http<span class="token punctuation">.</span>nonProxyHosts<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">.</span>nonproxyrepos<span class="token punctuation">.</span>com<span class="token operator">|</span>localhost

systemProp<span class="token punctuation">.</span>https<span class="token punctuation">.</span>proxyHost<span class="token operator">=</span>www<span class="token punctuation">.</span>somehost<span class="token punctuation">.</span>org
systemProp<span class="token punctuation">.</span>https<span class="token punctuation">.</span>proxyPort<span class="token operator">=</span><span class="token number">8080</span>
systemProp<span class="token punctuation">.</span>https<span class="token punctuation">.</span>proxyUser<span class="token operator">=</span>userid
systemProp<span class="token punctuation">.</span>https<span class="token punctuation">.</span>proxyPassword<span class="token operator">=</span>password
systemProp<span class="token punctuation">.</span>http<span class="token punctuation">.</span>nonProxyHosts<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">.</span>nonproxyrepos<span class="token punctuation">.</span>com<span class="token operator">|</span>localhost
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量"><span>环境变量</span></a></h2><p>以下环境变量可用于 gradle 命令。 请注意，命令行选项和系统属性优先于环境变量。</p><ul><li>GRADLE_OPTS： 指定启动 Gradle 客户端 VM 时要使用的 JVM 参数。 客户端 VM 仅处理命令行输入/输出，因此很少需要更改其 VM 选项。 实际构建由 Gradle 守护程序运行，不受此环境变量的影响。</li><li>GRADLE_USER_HOME</li><li>JAVA_HOME：指定用于客户端 VM 的 JDK 安装目录。 此 VM 也用于守护进程，除非在带有 org.gradle.java.home 的 Gradle 属性文件中指定了不同的 VM。</li></ul><h2 id="项目属性" tabindex="-1"><a class="header-anchor" href="#项目属性"><span>项目属性</span></a></h2><p>您可以通过 -P 命令行选项将属性直接添加到您的项目对象。</p><p>Gradle 还可以在看到特殊命名的系统属性或环境变量时设置项目属性。 如果环境变量名称看起来像 ORG_GRADLE_PROJECT_prop=somevalue，那么 Gradle 将在您的项目对象上设置一个 prop 属性，其值为 somevalue。 Gradle 也支持系统属性，但命名模式不同，类似于 org.gradle.project.prop。 以下两项都将您的 Project 对象上的 foo 属性设置为“bar”。</p><blockquote><p>如果引用了项目属性但不存在，则会引发异常并且构建将失败。使用 Project.hasProperty(java.lang.String) 方法检查是否存在。</p></blockquote><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&#39;performRelease&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>project<span class="token punctuation">.</span><span class="token function">hasProperty</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;isCI&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;Performing release actions&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidUserDataException</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;Cannot perform release outside of CI&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="初始化脚本" tabindex="-1"><a class="header-anchor" href="#初始化脚本"><span>初始化脚本</span></a></h1><p>初始化脚本（又名 init 脚本）类似于 Gradle 中的其他脚本。 但是，这些脚本在构建开始之前运行。 以下是几种可能的用途：</p><ul><li>设置企业范围的配置，例如在哪里可以找到自定义插件。</li><li>根据当前环境设置属性，例如开发人员的机器与持续集成服务器。</li><li>提供构建所需的有关用户的个人信息，例如存储库或数据库身份验证凭据。</li><li>定义特定于机器的详细信息，例如 JDK 的安装位置。</li><li>注册构建监听器。 希望收听 Gradle 事件的外部工具可能会发现这很有用。</li><li>注册构建记录器。 您可能希望自定义 Gradle 如何记录它生成的事件。</li></ul><blockquote><p>初始化脚本的一个主要限制是它们无法访问 buildSrc 项目中的类</p></blockquote><h1 id="依赖管理" tabindex="-1"><a class="header-anchor" href="#依赖管理"><span>依赖管理</span></a></h1><figure><img src="`+u+'" alt="dependency management resolution" tabindex="0" loading="lazy"><figcaption>dependency management resolution</figcaption></figure><p>就拿java项目来举例。可能需要导入Guava类库，这是一个提供丰富实用函数的开源库。除了Guava，该项目还需要JUnit库来编译和执行测试代码。</p><p>Guava和JUnit代表了这个项目的依赖关系。开发人员可以在构建脚本中声明不同范围的依赖关系，例如仅用于编译源代码或执行测试。在Gradle中，依赖项的范围称为配置（<em>configuration</em>）。</p>',36),Pn={href:"https://docs.gradle.org/current/userguide/dependency_management_terminology.html#sub:terminology_module",target:"_blank",rel:"noopener noreferrer"},wn=t('<p>在运行时，Gradle将根据指定的任务查找声明的依赖项。依赖项可能需要从远程存储库下载、从本地目录检索或需要在多项目设置中构建另一个项目。此过程称为依赖关系解析。</p><p>解析后，解析机制将依赖项的底层文件存储在本地缓存（也称为依赖缓存）中。未来的构建重用缓存中存储的文件，以避免不必要的网络调用。</p><p>模块可以提供额外的元数据。元数据是更详细地描述模块的数据，例如在存储库中查找模块的坐标、项目信息或其作者。作为元数据的一部分，模块可以定义需要其他模块才能正常工作。例如，JUnit5平台模块还需要平台公共模块。Gradle自动解析这些附加模块，称为传递依赖关系。如果需要，您可以根据项目的需求定制行为和传递依赖关系的处理。</p><p>具有数十个或数百个已声明依赖项的项目很容易受到依赖地狱的困扰。Gradle提供了足够的工具，可以通过构建扫描或内置任务来可视化、导航和分析项目的依赖关系图。</p><figure><img src="'+v+'" alt="gradle core test build scan dependencies" tabindex="0" loading="lazy"><figcaption>gradle core test build scan dependencies</figcaption></figure><h2 id="存储库管理" tabindex="-1"><a class="header-anchor" href="#存储库管理"><span>存储库管理</span></a></h2><h3 id="支持的存储库" tabindex="-1"><a class="header-anchor" href="#支持的存储库"><span>支持的存储库</span></a></h3>',7),Mn=n("li",null,"Maven Central是一个流行的存储库，托管开源库供Java项目使用。",-1),Tn=n("li",null,"Google 存储库托管了特定于 Android 的工件，包括 Android SDK。",-1),Rn=n("li",null,"maven自定义url",-1),An=n("li",null,"某些项目可能更喜欢将依赖项存储在共享驱动器上，或作为项目源代码的一部分存储，而不是二进制存储库产品。如果要使用（flatDir）文件系统目录作为存储库。这种类型的存储库不支持任何元数据格式，如 Ivy XML 或 Maven POM 文件。相反，Gradle 将根据工件的存在动态生成一个模块描述符",-1),En={href:"https://maven.apache.org/guides/introduction/introduction-to-repositories.html",target:"_blank",rel:"noopener noreferrer"},Dn=t(`<div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>repositories <span class="token punctuation">{</span>
    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">google</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    maven <span class="token punctuation">{</span>
        url <span class="token interpolation-string"><span class="token string">&quot;https://repo.spring.io/release&quot;</span></span>
    <span class="token punctuation">}</span>
    flatDir <span class="token punctuation">{</span>
        dirs <span class="token string">&#39;lib&#39;</span>
    <span class="token punctuation">}</span>
    flatDir <span class="token punctuation">{</span>
        dirs <span class="token string">&#39;lib1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lib2&#39;</span>
    <span class="token punctuation">}</span>
    <span class="token function">mavenLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>声明的顺序决定了 Gradle 在运行时如何检查依赖项。如果 Gradle 在特定存储库中找到模块描述符，它将尝试从同一存储库下载该模块的所有工件。</p></blockquote><blockquote><p>Maven POM 元数据可以引用其他存储库。这些将被Gradle忽略，Gradle将仅使用构建本身中声明的存储库。</p></blockquote><p>作为建议，应避免添加<code>mavenLocal()</code>为存储库。</p>`,4),Jn={href:"https://docs.gradle.org/current/userguide/dependency_resolution.html#sec:how-gradle-downloads-deps",target:"_blank",rel:"noopener noreferrer"},Ln={href:"https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:local-repos",target:"_blank",rel:"noopener noreferrer"},Cn=n("ul",null,[n("li",null,"无法跟踪工件的来源，这是一个正确性和安全问题"),n("li",null,"工件很容易被覆盖，这是一个安全性、正确性和可重复性问题")],-1),Sn={href:"https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:local-repos",target:"_blank",rel:"noopener noreferrer"},In={href:"https://docs.gradle.org/current/userguide/dependency_resolution.html#sec:dependency_cache",target:"_blank",rel:"noopener noreferrer"},Vn=n("ul",null,[n("li",null,"因此，您的构建速度较慢"),n("li",null,[s("鉴于存储库的顺序很重要，首先添加"),n("code",null,"mavenLocal()"),s("意味着所有构建速度都会变慢。")])],-1),Bn=t(`<h3 id="筛选器" tabindex="-1"><a class="header-anchor" href="#筛选器"><span>筛选器</span></a></h3><p>Gradle公开了一个API来声明存储库可能包含或不包含的内容。它有不同的用例：</p><ul><li>性能，当您知道在特定存储库中永远找不到依赖项时</li><li>安全性，通过避免泄露私有项目中使用的依赖项</li><li>可靠性，当某些存储库包含损坏的元数据或工件时</li></ul><p>当考虑到存储库的声明顺序很重要时，这一点更为重要。</p><p><strong>示例一： 按照group过滤</strong></p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>repositories <span class="token punctuation">{</span>
    maven <span class="token punctuation">{</span>
        url <span class="token interpolation-string"><span class="token string">&quot;https://repo.mycompany.com/maven2&quot;</span></span>
        content <span class="token punctuation">{</span>
            <span class="token comment">// this repository *only* contains artifacts with group &quot;my.company&quot;</span>
            includeGroup <span class="token interpolation-string"><span class="token string">&quot;my.company&quot;</span></span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    mavenCentral <span class="token punctuation">{</span>
        content <span class="token punctuation">{</span>
            <span class="token comment">// this repository contains everything BUT artifacts with group starting with &quot;my.company&quot;</span>
            excludeGroupByRegex <span class="token interpolation-string"><span class="token string">&quot;my\\\\.company.*&quot;</span></span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，存储库包含所有内容，不排除任何内容：</p><ul><li>如果您声明include，那么它将排除除包含的内容之外的所有内容。</li><li>如果您声明了一个exclude，那么它包括除被排除的内容之外的所有内容。</li><li>如果同时声明include和exclude，那么它只包含显式包含而不排除的内容。</li></ul><p>可以严格地或使用正则表达式按组、模块或版本进行过滤。使用严格版本时，可以使用Gradle支持的格式使用版本范围。此外，还有按解析上下文筛选选项：配置名称甚至配置属性。有关详细信息，请参阅RepositoryContentDescriptor。</p><p><strong>示例二： 按照版本类型过滤</strong></p><div class="language-Plain line-numbers-mode" data-ext="Plain" data-title="Plain"><pre class="language-Plain"><code>repositories {
    maven {
        url &quot;https://repo.mycompany.com/releases&quot;
        mavenContent {
            releasesOnly()
        }
    }
    maven {
        url &quot;https://repo.mycompany.com/snapshots&quot;
        mavenContent {
            snapshotsOnly()
        }
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="插件存储库" tabindex="-1"><a class="header-anchor" href="#插件存储库"><span>插件存储库</span></a></h3><p>Gradle将在构建期间的两个不同阶段使用存储库。</p><ul><li>第一个阶段是配置构建并加载它应用的插件。为此，Gradle将使用一组特殊的存储库。</li><li>第二阶段是在依赖关系解析期间。此时Gradle将使用项目中声明的存储库。</li></ul><p>默认情况下，Gradle将使用Gradle插件门户来查找插件。然而，出于不同的原因，其他公共或非公共存储库中都有可用的插件。当构建需要其中一个插件时，需要指定额外的存储库，以便Gradle知道在哪里搜索。</p><p><strong>settings.gradle</strong></p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>pluginManagement <span class="token punctuation">{</span>
    repositories <span class="token punctuation">{</span>
        <span class="token function">maven</span><span class="token punctuation">(</span>url <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;./maven-repo&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">gradlePluginPortal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">ivy</span><span class="token punctuation">(</span>url <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;./ivy-repo&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="集中声明存储库" tabindex="-1"><a class="header-anchor" href="#集中声明存储库"><span>集中声明存储库</span></a></h3><p>Gradle提供了一种在所有项目的中心位置声明存储库的方法，而不是在构建的每个子项目中或通过allprojects块声明存储库：</p><p><strong>settings.gradle</strong></p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>dependencyResolutionManagement <span class="token punctuation">{</span>
    repositories <span class="token punctuation">{</span>
        <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，项目声明的存储库将<strong>覆盖</strong>settings中声明的任何内容。您可以更改此行为以确保始终使用settings中的存储库：</p><p><strong>settings.gradle</strong></p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>dependencyResolutionManagement <span class="token punctuation">{</span>
    repositoriesMode<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>RepositoriesMode<span class="token punctuation">.</span>PREFER_SETTINGS<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果出于某种原因，项目或插件在项目中声明了存储库，Gradle会警告您。但是，如果您希望强制只使用设置存储库，则可以使其在生成过程中失败：</p><p><strong>settings.gradle</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="处理凭据" tabindex="-1"><a class="header-anchor" href="#处理凭据"><span>处理凭据</span></a></h3><p>有些仓库访问，需要通过身份认证。</p><div class="language-Plain line-numbers-mode" data-ext="Plain" data-title="Plain"><pre class="language-Plain"><code>repositories {
    maven {
        url &quot;http://repo.mycompany.com/maven2&quot;
        credentials {
            username &quot;user&quot;
            password &quot;password&quot;
        }
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>摘要式身份验证</p><div class="language-Plain line-numbers-mode" data-ext="Plain" data-title="Plain"><pre class="language-Plain"><code>repositories {
    maven {
        url &#39;https://repo.mycompany.com/maven2&#39;
        credentials {
            username &quot;user&quot;
            password &quot;password&quot;
        }
        authentication {
            digest(DigestAuthentication)
        }
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32),On={href:"https://docs.gradle.org/current/javadoc/org/gradle/authentication/http/BasicAuthentication.html",target:"_blank",rel:"noopener noreferrer"},Un={href:"https://docs.gradle.org/current/javadoc/org/gradle/authentication/http/BasicAuthentication.html",target:"_blank",rel:"noopener noreferrer"},zn=t(`<div class="language-Plain line-numbers-mode" data-ext="Plain" data-title="Plain"><pre class="language-Plain"><code>repositories {
    maven {
        url &#39;https://repo.mycompany.com/maven2&#39;
        credentials {
            username &quot;user&quot;
            password &quot;password&quot;
        }
        authentication {
            basic(BasicAuthentication)
        }
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Hn={href:"https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:http-header-auth",target:"_blank",rel:"noopener noreferrer"},Nn=t(`<div class="language-Plain line-numbers-mode" data-ext="Plain" data-title="Plain"><pre class="language-Plain"><code>repositories {
    maven {
        url &quot;http://repo.mycompany.com/maven2&quot;
        credentials(HttpHeaderCredentials) {
            name = &quot;Private-Token&quot;
            value = &quot;TOKEN&quot;
        }
        authentication {
            header(HttpHeaderAuthentication)
        }
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>外部化存储库凭据</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>    repositories <span class="token punctuation">{</span>
        maven <span class="token punctuation">{</span>
            name <span class="token operator">=</span> <span class="token string">&#39;mySecureRepository&#39;</span>
            <span class="token function">credentials</span><span class="token punctuation">(</span>PasswordCredentials<span class="token punctuation">)</span>
            <span class="token comment">// url = uri(&lt;&lt;some repository url&gt;&gt;)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户名和密码将从 <code>mySecureRepositoryUsername</code>和 <code>mySecureRepositoryPassword</code>属性中查找。</p><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h3><blockquote></blockquote><h3 id="共享依赖管理" tabindex="-1"><a class="header-anchor" href="#共享依赖管理"><span>共享依赖管理</span></a></h3><p>示例一： 基本使用</p><ol><li>在setting文件中声明依赖</li></ol><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>dependencyResolutionManagement <span class="token punctuation">{</span>
    versionCatalogs <span class="token punctuation">{</span>
        libs <span class="token punctuation">{</span>
            <span class="token function">version</span><span class="token punctuation">(</span><span class="token string">&#39;groovy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3.0.5&#39;</span><span class="token punctuation">)</span>
            <span class="token function">version</span><span class="token punctuation">(</span><span class="token string">&#39;checkstyle&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;8.37&#39;</span><span class="token punctuation">)</span>
            <span class="token function">library</span><span class="token punctuation">(</span><span class="token string">&#39;groovy-core&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;org.codehaus.groovy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;groovy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">versionRef</span><span class="token punctuation">(</span><span class="token string">&#39;groovy&#39;</span><span class="token punctuation">)</span>
            <span class="token function">library</span><span class="token punctuation">(</span><span class="token string">&#39;groovy-json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;org.codehaus.groovy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;groovy-json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">versionRef</span><span class="token punctuation">(</span><span class="token string">&#39;groovy&#39;</span><span class="token punctuation">)</span>
            <span class="token function">library</span><span class="token punctuation">(</span><span class="token string">&#39;groovy-nio&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;org.codehaus.groovy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;groovy-nio&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">versionRef</span><span class="token punctuation">(</span><span class="token string">&#39;groovy&#39;</span><span class="token punctuation">)</span>
            <span class="token function">library</span><span class="token punctuation">(</span><span class="token string">&#39;commons-lang3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;org.apache.commons&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;commons-lang3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>version <span class="token punctuation">{</span>
                strictly <span class="token string">&#39;[3.8, 4.0[&#39;</span>
                prefer <span class="token string">&#39;3.9&#39;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在build文件中引入依赖：</li></ol><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>dependencies <span class="token punctuation">{</span>
  implementation libs<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>声明依赖名称中指定的 <code>-</code> ，在引入时需要转化成 <code>.</code></p></blockquote><p>示例二： 依赖分组管理</p><p>我们可以将几个相关的依赖组合在一起，然后引入的时候一起引入。</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>dependencyResolutionManagement <span class="token punctuation">{</span>
    versionCatalogs <span class="token punctuation">{</span>
        libs <span class="token punctuation">{</span>
            <span class="token function">version</span><span class="token punctuation">(</span><span class="token string">&#39;groovy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3.0.5&#39;</span><span class="token punctuation">)</span>
            <span class="token function">version</span><span class="token punctuation">(</span><span class="token string">&#39;checkstyle&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;8.37&#39;</span><span class="token punctuation">)</span>
            <span class="token function">library</span><span class="token punctuation">(</span><span class="token string">&#39;groovy-core&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;org.codehaus.groovy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;groovy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">versionRef</span><span class="token punctuation">(</span><span class="token string">&#39;groovy&#39;</span><span class="token punctuation">)</span>
            <span class="token function">library</span><span class="token punctuation">(</span><span class="token string">&#39;groovy-json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;org.codehaus.groovy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;groovy-json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">versionRef</span><span class="token punctuation">(</span><span class="token string">&#39;groovy&#39;</span><span class="token punctuation">)</span>
            <span class="token function">library</span><span class="token punctuation">(</span><span class="token string">&#39;groovy-nio&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;org.codehaus.groovy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;groovy-nio&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">versionRef</span><span class="token punctuation">(</span><span class="token string">&#39;groovy&#39;</span><span class="token punctuation">)</span>
            <span class="token function">library</span><span class="token punctuation">(</span><span class="token string">&#39;commons-lang3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;org.apache.commons&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;commons-lang3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>version <span class="token punctuation">{</span>
                strictly <span class="token string">&#39;[3.8, 4.0[&#39;</span>
                prefer <span class="token string">&#39;3.9&#39;</span>
            <span class="token punctuation">}</span>
            <span class="token function">bundle</span><span class="token punctuation">(</span><span class="token string">&#39;groovy&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;groovy-core&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;groovy-json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;groovy-nio&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只需要引入分组名称，就可以引入多个依赖：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>dependencies <span class="token punctuation">{</span>
    implementation libs<span class="token punctuation">.</span>bundles<span class="token punctuation">.</span>groovy
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例三： 插件版本</p><p>除了可以集中管理依赖，还可以集中管理插件</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>dependencyResolutionManagement <span class="token punctuation">{</span>
    versionCatalogs <span class="token punctuation">{</span>
        libs <span class="token punctuation">{</span>
            <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">&#39;jmh&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;me.champeau.jmh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">&#39;0.6.5&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在build文件中引入声明的插件：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>plugins <span class="token punctuation">{</span>
    id <span class="token string">&#39;java-library&#39;</span>
    id <span class="token string">&#39;checkstyle&#39;</span>
    <span class="token function">alias</span><span class="token punctuation">(</span>libs<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>jmh<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例四：toml文件集中声明依赖</p><p>Gradle 还提供了一个常规文件来声明依赖，避免在settings文件中管理。这个文件名称默认是 <code>libs.versions.toml</code> ，可以在settings文件使用下列配置更改名称：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>dependencyResolutionManagement <span class="token punctuation">{</span>
    defaultLibrariesExtensionName<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;projectLibs&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>libs.versions.toml文件的示例内容如下：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="token punctuation">[</span>versions<span class="token punctuation">]</span>
groovy <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;3.0.5&quot;</span></span>
checkstyle <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;8.37&quot;</span></span>
my<span class="token operator">-</span>lib <span class="token operator">=</span> <span class="token punctuation">{</span> strictly <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;[1.0, 2.0[&quot;</span></span><span class="token punctuation">,</span> prefer <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;1.2&quot;</span></span> <span class="token punctuation">}</span>

<span class="token punctuation">[</span>libraries<span class="token punctuation">]</span>
groovy<span class="token operator">-</span>core <span class="token operator">=</span> <span class="token punctuation">{</span> module <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;org.codehaus.groovy:groovy&quot;</span></span><span class="token punctuation">,</span> version<span class="token punctuation">.</span>ref <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;groovy&quot;</span></span> <span class="token punctuation">}</span>
groovy<span class="token operator">-</span>json <span class="token operator">=</span> <span class="token punctuation">{</span> module <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;org.codehaus.groovy:groovy-json&quot;</span></span><span class="token punctuation">,</span> version<span class="token punctuation">.</span>ref <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;groovy&quot;</span></span> <span class="token punctuation">}</span>
groovy<span class="token operator">-</span>nio <span class="token operator">=</span> <span class="token punctuation">{</span> module <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;org.codehaus.groovy:groovy-nio&quot;</span></span><span class="token punctuation">,</span> version<span class="token punctuation">.</span>ref <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;groovy&quot;</span></span> <span class="token punctuation">}</span>
commons<span class="token operator">-</span>lang3 <span class="token operator">=</span> <span class="token punctuation">{</span> group <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;org.apache.commons&quot;</span></span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;commons-lang3&quot;</span></span><span class="token punctuation">,</span> version <span class="token operator">=</span> <span class="token punctuation">{</span> strictly <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;[3.8, 4.0[&quot;</span></span><span class="token punctuation">,</span> prefer<span class="token operator">=</span><span class="token interpolation-string"><span class="token string">&quot;3.9&quot;</span></span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>

<span class="token punctuation">[</span>bundles<span class="token punctuation">]</span>
groovy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">&quot;groovy-core&quot;</span></span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">&quot;groovy-json&quot;</span></span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">&quot;groovy-nio&quot;</span></span><span class="token punctuation">]</span>

<span class="token punctuation">[</span>plugins<span class="token punctuation">]</span>
jmh <span class="token operator">=</span> <span class="token punctuation">{</span> id <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;me.champeau.jmh&quot;</span></span><span class="token punctuation">,</span> version <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;0.6.5&quot;</span></span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例五： 导入bom文件</p><p>另一种集中管理项目依赖的方式是platform，maven的BOM文件就是platform的一个示例：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>dependencies <span class="token punctuation">{</span>
    <span class="token comment">// import a BOM</span>
    implementation <span class="token function">platform</span><span class="token punctuation">(</span><span class="token string">&#39;org.springframework.boot:spring-boot-dependencies:1.5.8.RELEASE&#39;</span><span class="token punctuation">)</span>

    <span class="token comment">// define dependencies without versions</span>
    implementation <span class="token string">&#39;com.google.code.gson:gson&#39;</span>
    implementation <span class="token string">&#39;dom4j:dom4j&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="插件" tabindex="-1"><a class="header-anchor" href="#插件"><span>插件</span></a></h1><h2 id="常用插件" tabindex="-1"><a class="header-anchor" href="#常用插件"><span>常用插件</span></a></h2><h3 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>java</span></a></h3><p>Java插件将Java编译以及测试和打包功能添加到项目中。它是许多其他JVM语言Gradle插件的基础。</p><h3 id="java-library" tabindex="-1"><a class="header-anchor" href="#java-library"><span>java-library</span></a></h3><p>功能如下：</p><ul><li>compileJava：编译 _src/main/_java 下所有 Java 源文件</li><li>compileTestJava：编译 <em>src/test/java</em> 下的源文件</li><li>test： 从 <em>src/test/java</em> 运行测试的任务</li><li>jar：将已编译的类和<em>src/main/resources</em> 的资源打包 <code>project-version.jar</code></li><li>javadoc: 为类生成 Javadoc</li></ul>`,38),Fn={href:"https://docs.gradle.org/current/userguide/base_plugin.html#sec:base_tasks",target:"_blank",rel:"noopener noreferrer"},Kn=t(`<ul><li><code>jar</code>附加到 <code>ssemble</code></li><li><code>test</code>附加到<code>check</code></li></ul><p>自定义源文件目录</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>sourceSets <span class="token punctuation">{</span>
    main <span class="token punctuation">{</span>
         java <span class="token punctuation">{</span>
            srcDirs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">]</span>
         <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    test <span class="token punctuation">{</span>
        java <span class="token punctuation">{</span>
            srcDirs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这会覆盖默认的配置，下面的方式是在默认的方式上进行追加：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>sourceSets <span class="token punctuation">{</span>
    main <span class="token punctuation">{</span>
        java <span class="token punctuation">{</span>
            srcDir <span class="token string">&#39;thirdParty/src/main/java&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>指定jdk的版本：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>java <span class="token punctuation">{</span>
    toolchain <span class="token punctuation">{</span>
        languageVersion <span class="token operator">=</span> JavaLanguageVersion<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="application插件" tabindex="-1"><a class="header-anchor" href="#application插件"><span>application插件</span></a></h3><p>创建可执行的JVM应用程序，它使在开发过程中轻松地在本地启动应用程序，并将应用程序打包为TAR或ZIP，包括特定于操作系统的启动脚本。</p><p>该插件会隐式的引用java插件，用来指定source set.</p>`,10),Zn={href:"https://docs.gradle.org/current/userguide/distribution_plugin.html#distribution_plugin",target:"_blank",rel:"noopener noreferrer"},$n=t(`<p>使用：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>plugins <span class="token punctuation">{</span>
    id <span class="token string">&#39;application&#39;</span>
<span class="token punctuation">}</span>
application <span class="token punctuation">{</span>
    <span class="token comment">// 启动类</span>
    mainClass <span class="token operator">=</span> <span class="token string">&#39;org.gradle.sample.Main&#39;</span>
    <span class="token comment">// 启动脚本的目录</span>
    executableDir <span class="token operator">=</span> <span class="token string">&#39;custom_bin_dir&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="java-platform" tabindex="-1"><a class="header-anchor" href="#java-platform"><span>java-platform</span></a></h3><ul><li>子项目间共享依赖版本,例如constraints</li><li>引入异构项目的BOM清单，用于统一版本，例如spring boot</li></ul>`,4);function Wn(Xn,Yn){const a=l("ExternalLinkIcon");return o(),p("div",null,[k,m,b,n("p",null,[s("这并不意味着你需要为构建做许多工作。Gradle 可以通过"),n("a",h,[s("插件（"),_,s("）"),e(a)]),s("添加一层约定（convention）以及预构建功能（prebuild functionality）来让常见的项目类型，例如 Java 库，更容易被构建。你甚至能将自己的约定和构建功能封装成插件来发布。")]),y,f,x,G,n("p",null,[s("几乎所有的构建过程都可以通过这种方式建模为一个 task 图，这也是 Gradle 灵活的原因之一。而且这个 task 图可以由插件和你的构建脚本来定义，并通过 "),n("a",q,[s("task 依赖机制"),e(a)]),s("将 task 连接起来。")]),j,P,n("p",null,[s("以上内容都是可选的，使用与否取决于实际需要。一些 task，比如"),n("a",w,[s("标准生命周期 task（standard lifecycle tasks）"),e(a)]),s("，甚至没有任何动作。它们只是将多个任务聚合在一起，以方便使用。")]),M,n("p",null,[s("最后，Gradle 的"),n("a",T,[s("增量构建"),e(a)]),s("支持强大而又可靠，所以为了保持构建的运行速度，请避免运行 "),R,s(" task，除非你确实想执行清理。")]),A,E,D,n("p",null,[s("这些阶段组成了 Gradle 的"),n("a",J,[s("构建生命周期（Build Lifecycle）"),e(a)]),s("。")]),L,C,n("p",null,[s("Maven 的构建生命周期概念与 Gradle 的"),n("a",S,[s("生命周期 task"),e(a)]),s(" 大致相似。")]),n("p",null,[s("设计良好的构建脚本主要"),n("a",I,[s("由声明式配置组成，而非命令式逻辑"),e(a)]),s("。容易理解的是，这些配置在配置阶段就会被评估。但许多构建也有 task 动作（例如通过 "),V,s(" 和 "),B,s(" 添加的），它们在执行阶段被评估。理解这一点非常重要，因为配置阶段评估的代码无法感知到执行阶段发生的变化。")]),n("p",null,[s("配置阶段的另一个重要方面是，每当构建运行时，都会对其中涉及的一切进行评估。因此要"),n("a",O,[s("避免在配置阶段做复杂的工作"),e(a)]),s("。除此之外，"),n("a",U,[s("构建扫描（build scan）"),e(a)]),s("可以帮助你识别这样的热点。")]),z,H,N,n("ul",null,[n("li",null,[n("a",F,[s("自定义 task 类型"),e(a)]),s(" 当你想让构建做一些现有 task 不能做的工作时，你可以简单地编写自己的 task 类型。通常最好把自定义 task 类型的源文件放在 "),n("a",K,[Z,e(a)]),s(" 目录或打包的插件中。然后你就可以像使用任何 Gradle 内建的 task 类型一样，使用这个自定义 task 类型。")]),$,n("li",null,[s("项目和 task 的"),n("a",W,[s("额外属性"),e(a)]),s(" 你可以将自定义属性添加到项目或 task 中，并在自定义动作或任何其他构建逻辑中使用。额外的属性甚至能被应用到那些不是由你明确创建的 task 上，比如由 Gradle 核心插件创建的 task。")]),n("li",null,[s("自定义约定 约定是简化构建的有力方法，它可以让用户更容易理解和使用。这可以从标准项目结构和命名约定中看出，比如 "),n("a",X,[s("Java 构建"),e(a)]),s("。你可以编写你自己的插件来提供约定，它们只需要为构建的相关方面配置默认值。")]),n("li",null,[n("a",Y,[s("自定义模型"),e(a)]),s(" Gradle 允许你在构建中引入除了 task、文件、依赖配置之外的新概念。你可以在大多数语言插件中看到这一点，它们将"),n("a",Q,[s("源集（source sets）"),e(a)]),s("的概念添加到了构建之中。对构建过程进行适当的建模可以大大提高构建的易用性和效率。")])]),nn,sn,n("p",null,[s("有一个普遍的误解，认为 Gradle 的强大和灵活来自于它的构建脚本是代码这一事实。这个观点完全错误。实际上那是底层模型和 API 提供的力量。正如我们在最佳实践中所建议的那样，你应该"),n("a",an,[s("避免在你的构建脚本中放入过多的命令式逻辑"),e(a)]),s("。")]),n("p",null,[s("然而，有一个领域，“将构建脚本视为可执行代码”在此领域是很有用的，即：理解构建脚本的语法如何映射到 Gradle 的 API。API 文档（由 "),n("a",en,[s("Groovy DSL 参考"),e(a)]),s("和 "),n("a",tn,[s("Javadocs"),e(a)]),s(" 组成）中列出了方法、属性并题及了闭包和动作。它们在构建脚本的上下文中有什么含义？请阅读 "),n("a",ln,[s("Groovy 构建脚本入门"),e(a)]),s("来获得这个问题的答案。这能帮助你有效地使用 API 文档。")]),on,n("p",null,[s("Gradle 使用两个主要目录来执行和管理其工作："),n("a",pn,[s("Gradle 用户主目录"),e(a)]),s("和"),n("a",rn,[s("项目根目录"),e(a)]),s("。以下两节介绍每个部分中存储的内容以及如何清理瞬态文件和目录。")]),n("h2",cn,[n("a",dn,[n("span",null,[n("a",un,[s("Gradle 用户主目录"),e(a)])])])]),vn,n("h3",gn,[n("a",kn,[n("span",null,[n("a",mn,[s("清理缓存和分发"),e(a)])])])]),bn,n("h2",hn,[n("a",_n,[n("span",null,[n("a",yn,[s("项目根目录"),e(a)])])])]),fn,n("h3",xn,[n("a",Gn,[n("span",null,[n("a",qn,[s("项目缓存清理"),e(a)])])])]),jn,n("p",null,[s("依赖关系通常以模块（"),n("a",Pn,[s("modules"),e(a)]),s("）的形式出现。您需要告诉Gradle在哪里可以找到这些模块，以便在构建过程中使用它们。存储模块的位置称为存储库。通过为构建声明存储库，Gradle将知道如何查找和检索模块。存储库可以有不同的形式：本地目录或远程存储库。")]),wn,n("ul",null,[Mn,Tn,Rn,An,n("li",null,[s("Gradle 可以使用"),n("a",En,[s("本地 Maven 存储库"),e(a)]),s("中提供的依赖项。声明此存储库对于使用一个项目发布到本地 Maven 存储库并在另一个项目中使用 Gradle 工件的团队是有益的")])]),Dn,n("ul",null,[n("li",null,[s("Maven 将其用作缓存，而不是存储库，这意味着它可以包含部分模块。 "),n("ul",null,[n("li",null,[s("例如，如果 Maven 从未下载过给定模块的源代码或 javadoc 文件，则 Gradle 也不会找到它们，因为一旦找到模块，它就会"),n("a",Jn,[s("在单个存储库中搜索文件"),e(a)]),s("。")])])]),n("li",null,[s("作为"),n("a",Ln,[s("本地存储库"),e(a)]),s("，Gradle 不信任其内容，因为： "),Cn]),n("li",null,[s("为了减轻元数据和/或工件可以更改的事实，Gradle 不会对"),n("a",Sn,[s("本地存储库"),e(a)]),s("执行"),n("a",In,[s("任何缓存"),e(a)]),Vn])]),Bn,n("p",null,[n("a",On,[s("basic"),e(a)]),n("a",Un,[s("身份验证"),e(a)])]),zn,n("p",null,[n("a",Hn,[s("使用 HTTP 标头身份验证"),e(a)])]),Nn,n("p",null,[s("Java 库插件还将上述任务集成到标准"),n("a",Fn,[s("的基本插件生命周期任务中"),e(a)]),s("：")]),Kn,n("p",null,[s("该插件隐式引用 "),n("a",Zn,[s("Distribution plugin"),e(a)]),s(" ， 该插件用来打包应用，包括启动脚本。")]),$n])}const ss=i(g,[["render",Wn],["__file","gradle-basic.html.vue"]]),as=JSON.parse('{"path":"/post/gradle-basic.html","title":"gradle-basic","lang":"zh-CN","frontmatter":{"title":"gradle-basic","tags":["java","gradle"],"categories":["中间件"],"date":"2022-12-02T16:43:59.000Z","description":"核心概念 1. Gradle 是一个通用的构建工具 Gradle 可以用于构建（build）任何软件，因为它对你要构建的东西或构建方式几乎不做任何假设。不过当前它最大的限制是，只支持兼容 Maven 和 lvy 的仓库和文件系统。 这并不意味着你需要为构建做许多工作。Gradle 可以通过插件（plugins）添加一层约定（convention）以及预...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/post/gradle-basic.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"gradle-basic"}],["meta",{"property":"og:description","content":"核心概念 1. Gradle 是一个通用的构建工具 Gradle 可以用于构建（build）任何软件，因为它对你要构建的东西或构建方式几乎不做任何假设。不过当前它最大的限制是，只支持兼容 Maven 和 lvy 的仓库和文件系统。 这并不意味着你需要为构建做许多工作。Gradle 可以通过插件（plugins）添加一层约定（convention）以及预..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-20T07:19:17.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"gradle"}],["meta",{"property":"article:published_time","content":"2022-12-02T16:43:59.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-20T07:19:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"gradle-basic\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-12-02T16:43:59.000Z\\",\\"dateModified\\":\\"2024-04-20T07:19:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"1. Gradle 是一个通用的构建工具","slug":"_1-gradle-是一个通用的构建工具","link":"#_1-gradle-是一个通用的构建工具","children":[]},{"level":2,"title":"2. 核心模型基于 task","slug":"_2-核心模型基于-task","link":"#_2-核心模型基于-task","children":[]},{"level":2,"title":"3. Gradle 的多个固定构建阶段","slug":"_3-gradle-的多个固定构建阶段","link":"#_3-gradle-的多个固定构建阶段","children":[]},{"level":2,"title":"4. Gradle 可以使用多种方式进行扩展","slug":"_4-gradle-可以使用多种方式进行扩展","link":"#_4-gradle-可以使用多种方式进行扩展","children":[]},{"level":2,"title":"5. 用构建脚本操作 API","slug":"_5-用构建脚本操作-api","link":"#_5-用构建脚本操作-api","children":[]},{"level":2,"title":"build.gradle文件","slug":"build-gradle文件","link":"#build-gradle文件","children":[]},{"level":2,"title":"settings.gradle文件","slug":"settings-gradle文件","link":"#settings-gradle文件","children":[]},{"level":2,"title":"初始化","slug":"初始化","link":"#初始化","children":[]},{"level":2,"title":"生命周期监听","slug":"生命周期监听","link":"#生命周期监听","children":[]},{"level":2,"title":"Gradle 用户主目录","slug":"gradle-用户主目录","link":"#gradle-用户主目录","children":[{"level":3,"title":"清理缓存和分发","slug":"清理缓存和分发","link":"#清理缓存和分发","children":[]}]},{"level":2,"title":"项目根目录","slug":"项目根目录","link":"#项目根目录","children":[{"level":3,"title":"项目缓存清理","slug":"项目缓存清理","link":"#项目缓存清理","children":[]}]},{"level":2,"title":"gradle属性","slug":"gradle属性","link":"#gradle属性","children":[]},{"level":2,"title":"系统属性","slug":"系统属性","link":"#系统属性","children":[]},{"level":2,"title":"环境变量","slug":"环境变量","link":"#环境变量","children":[]},{"level":2,"title":"项目属性","slug":"项目属性","link":"#项目属性","children":[]},{"level":2,"title":"存储库管理","slug":"存储库管理","link":"#存储库管理","children":[{"level":3,"title":"支持的存储库","slug":"支持的存储库","link":"#支持的存储库","children":[]},{"level":3,"title":"筛选器","slug":"筛选器","link":"#筛选器","children":[]},{"level":3,"title":"插件存储库","slug":"插件存储库","link":"#插件存储库","children":[]},{"level":3,"title":"集中声明存储库","slug":"集中声明存储库","link":"#集中声明存储库","children":[]},{"level":3,"title":"处理凭据","slug":"处理凭据","link":"#处理凭据","children":[]},{"level":3,"title":"","slug":"","link":"#","children":[]},{"level":3,"title":"共享依赖管理","slug":"共享依赖管理","link":"#共享依赖管理","children":[]}]},{"level":2,"title":"常用插件","slug":"常用插件","link":"#常用插件","children":[{"level":3,"title":"java","slug":"java","link":"#java","children":[]},{"level":3,"title":"java-library","slug":"java-library","link":"#java-library","children":[]},{"level":3,"title":"application插件","slug":"application插件","link":"#application插件","children":[]},{"level":3,"title":"java-platform","slug":"java-platform","link":"#java-platform","children":[]}]}],"git":{"createdTime":1713091835000,"updatedTime":1713597557000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":3}]},"readingTime":{"minutes":27.45,"words":8234},"filePathRelative":"post/gradle-basic.md","localizedDate":"2022年12月2日","excerpt":"\\n<h2>1. Gradle 是一个通用的构建工具</h2>\\n<p>Gradle 可以用于构建（build）任何软件，因为它对你要构建的东西或构建方式几乎不做任何假设。不过当前它最大的限制是，只支持兼容 Maven 和 lvy 的仓库和文件系统。</p>\\n<p>这并不意味着你需要为构建做许多工作。Gradle 可以通过<a href=\\"https://docs.gradle.org/current/userguide/plugins.html#plugins\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">插件（<em>plugins</em>）</a>添加一层约定（convention）以及预构建功能（prebuild functionality）来让常见的项目类型，例如 Java 库，更容易被构建。你甚至能将自己的约定和构建功能封装成插件来发布。</p>","autoDesc":true}');export{ss as comp,as as data};
