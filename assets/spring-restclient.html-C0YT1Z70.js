import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,b as s,d as n,e as l,a}from"./app-Crw0g0C7.js";const i={},u=a(`<p><code>RestClient</code>是一个同步的<code>HTTP</code>客户端，它提供了一个现代的、流畅的API。</p><h2 id="创建restclient" tabindex="-1"><a class="header-anchor" href="#创建restclient"><span>创建RestClient</span></a></h2><p><code>RestClient</code>使用静态的<code>create</code>方法创建。您还可以使用<code>builder</code>方法来定制更多配置项，例如: 指定要使用的<code>HTTP</code>库和要使用的消息转换器，设置默认URI、默认路径变量、默认请求头或<code>uriBuilderFactory</code>，或者注册拦截器和初始化器。一旦创建了<code>RestClient</code>，多个线程就可以安全地使用它。</p><p>以下示例显示了如何创建默认的<code>RestClient</code>，以及如何构建自定义的<code>RestClient</code>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RestClient</span> defaultClient <span class="token operator">=</span> <span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">RestClient</span> customClient <span class="token operator">=</span> <span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">requestFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpComponentsClientHttpRequestFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">messageConverters</span><span class="token punctuation">(</span>converters <span class="token operator">-&gt;</span> converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyCustomMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">&quot;https://example.com&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">defaultUriVariables</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;variable&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">defaultHeader</span><span class="token punctuation">(</span><span class="token string">&quot;My-Header&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Foo&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">requestInterceptor</span><span class="token punctuation">(</span>myCustomInterceptor<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">requestInitializer</span><span class="token punctuation">(</span>myCustomInitializer<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-restclient" tabindex="-1"><a class="header-anchor" href="#使用-restclient"><span>使用 RestClient</span></a></h2><p>当使用<code>RestClient</code>发出<code>HTTP</code>请求时，首先要指定使用哪种<code>HTTP</code>方法。这可以用<code>method(HttpMethod)</code>或<code>get</code>、<code>head</code>、<code>post</code>等来完成。</p><h3 id="请求url" tabindex="-1"><a class="header-anchor" href="#请求url"><span>请求URL</span></a></h3><p>接下来，可以使用<code>uri</code>方法指定请求<code>URI</code>，如果<code>RestClient</code>配置了默认<code>URI</code>，则可以跳过此步骤。<code>URL</code>通常指定为字符串，并带有可选的<code>URI</code>模板变量。字符串<code>URL</code>默认情况下是编码的，但这可以通过使用自定义<code>uriBuilderFactory</code>构建客户端来更改。</p>`,9),d=s("code",null,"java.net.URI",-1),r={href:"https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-uri-building.html",target:"_blank",rel:"noopener noreferrer"},k=a(`<h3 id="请求头和请求体" tabindex="-1"><a class="header-anchor" href="#请求头和请求体"><span>请求头和请求体</span></a></h3><p>可以通过 <code>header(String,String)</code>、<code>headers(Consumer&lt;HttpHeaders&gt;</code>)或<code>accept(MediaType…)</code>, <code>acceptCharset(Charset…) </code>等等操作请求头。</p><p>对于可以包含正文(<code>POST</code>、<code>PUT</code>和<code>PATCH</code>)的<code>HTTP</code>请求，可以使用其他方法：<code>contentType(MediaType)</code>和<code>contentLength(long)</code>。</p><p>请求体本身可以由 <code>body(Object)</code>设置，该主体在内部使用<code>HTTP</code>消息转换器进行转换。或者，可以使用<code>ParameterizedTypeReference</code>设置请求主体，从而允许您使用泛型。最后，可以将主体设置为一个回调函数，该函数写入<code>OutputStream</code>。</p><h3 id="获取响应体" tabindex="-1"><a class="header-anchor" href="#获取响应体"><span>获取响应体</span></a></h3><p>一旦设置了请求，就会通过调用<code>retrieve()</code>来访问<code>HTTP</code>响应。对于返回结果是列表等参数化类型，可以使用<code>body(Class)</code>或<code>body(ParameterizedTypeReference)</code>来访问响应正文。<code>body</code>方法将响应内容转换为各种类型——例如，<code>Byte</code>可以转换为<code>String</code>，<code>JSON</code>可以使用<code>Jackson</code>转换为对象。响应也可以转换为<code>ResponseEntity</code>，从而可以访问响应头和正文。</p><p><strong>Demo: 简单的GET请求</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> result <span class="token operator">=</span> restClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
  <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;https://example.com&quot;</span><span class="token punctuation">)</span> 
  <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
  <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Demo: 通过ResponseEntity提供对响应状态代码和标头的访问</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> restClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
  <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;https://example.com&quot;</span><span class="token punctuation">)</span> 
  <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">toEntity</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Response status: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Response headers: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Contents: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RestClient可以使用Jackson库将JSON转换为对象。请注意此示例中URI变量的使用情况，Accept头被设置为JSON；</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token class-name">Pet</span> pet <span class="token operator">=</span> restClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;https://petclinic.example.com/pets/{id}&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span> 
  <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span> 
  <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">Pet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RestClient用于执行包含JSON的POST请求，该请求体再次使用Jackson进行转换。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Pet</span> pet <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> response <span class="token operator">=</span> restClient<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
  <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;https://petclinic.example.com/pets/new&quot;</span><span class="token punctuation">)</span> 
  <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span> 
  <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>pet<span class="token punctuation">)</span> 
  <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">toBodilessEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h3><p>默认情况下，<code>RestClient</code>对<code>4xx</code>或<code>5xx</code>状态代码抛出<code>RestClientException</code>子类。可以使用<code>onStatus</code>方法覆盖此行为:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> result <span class="token operator">=</span> restClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
  <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;https://example.com/this-url-does-not-exist&quot;</span><span class="token punctuation">)</span> 
  <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">onStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpStatusCode</span><span class="token operator">::</span><span class="token function">is4xxClientError</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> 
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyCustomRuntimeException</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="exchange" tabindex="-1"><a class="header-anchor" href="#exchange"><span>Exchange</span></a></h3><p>对于更高级的场景，<code>RestClient</code>通过<code>exchange()</code>方法提供对底层<code>HTTP</code>请求和响应的访问，该方法可以代替<code>retrieve()</code>使用。使用<code>exchange()</code>时不会使用状态处理程序，因为<code>exchange</code>函数已经提供了对完整响应的访问，允许您执行任何必要的错误处理。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Pet</span> result <span class="token operator">=</span> restClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;https://petclinic.example.com/pets/{id}&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is4xxClientError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyCustomRuntimeException</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token class-name">Pet</span> pet <span class="token operator">=</span> <span class="token function">convertResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span> 
      <span class="token keyword">return</span> pet<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="http消息转换" tabindex="-1"><a class="header-anchor" href="#http消息转换"><span>HTTP消息转换</span></a></h3><p><code>spring-web</code>模块包含<code>HttpMessageConverter</code>接口，用于通过<code>InputStream</code>和<code>OutputStream</code>读取HTTP请求主体和写入响应主体。<code>HttpMessageConverter</code>实例用于客户端(例如在RestClient中)和服务器端(例如在Spring MVC REST控制器中)。</p><p>框架中提供了主要媒体(<code>MIME</code>)类型的具体实现，默认情况下，这些实现在客户端的<code>RestClient</code>和<code>RestTemplate</code>以及服务器端的<code>RequestMappingHandlerAdapter</code>中注册。</p><p><code>HttpMessageConverter</code>的几个实现如下所述。对于所有转换器，都使用默认的媒体类型，但您可以通过设置<code>supportedMediaTypes</code>属性来覆盖它。</p><table><thead><tr><th style="text-align:left;">MessageConverter</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>StringHttpMessageConverter</code></td><td style="text-align:left;">从HTTP请求和响应中读取和写入String实例。默认情况下，此转换器支持所有文本媒体类型（<code>text/*</code>），并使用<code>text/plain</code>的<code>Content Type</code>进行写入。</td></tr><tr><td style="text-align:left;"><code>FormHttpMessageConverter</code></td><td style="text-align:left;">从HTTP请求和响应中读取和写入表单数据。默认情况下，此转换器读取和写入<code>application/x-www-form-urlencoded</code>媒体类型。表单数据从<code>MultiValueMap&lt;String，String&gt;</code>中读取并写入。</td></tr><tr><td style="text-align:left;"><code>ByteArrayHttpMessageConverter</code></td><td style="text-align:left;">从HTTP请求和响应中读取和写入字节数组。默认情况下，此转换器支持所有媒体类型(<code>*/*</code>)，并使用<code>application/octet-stream</code> 格式进行写入。</td></tr><tr><td style="text-align:left;"><code>MarshallingHttpMessageConverter</code></td><td style="text-align:left;">通过使用<code>org.springframework.oxm</code>包中的Marshaller和Unmarshaller抽象来读取和写入XML。此转换器需要Marshaller和Unmarshaller才能使用。您可以通过构造函数或bean属性注入这些。默认情况下，此转换器支持<code>text/xml</code>和<code>application/xml</code>。</td></tr><tr><td style="text-align:left;"><code>MappingJackson2HttpMessageConverter</code></td><td style="text-align:left;">使用<code>Jackson</code>的<code>ObjectMapper</code>读取和写入<code>JSON</code>。通过使用Jackson提供的注释，您可以根据需要自定义JSON<code>映射</code>。当您需要进一步的控制时（对于需要为特定类型提供自定义JSON序列化程序/反序列化程序的情况），您可以通过<code>ObjectMapper</code>属性注入自定义的<code>ObjectMapper</code>。默认情况下，此转换器支持<code>application/json</code>。</td></tr><tr><td style="text-align:left;"><code>MappingJackson2XmlHttpMessageConverter</code></td><td style="text-align:left;">使用Jackson XML读取和写入xml。您可以根据需要通过使用JAXB或Jackson提供的注释来定制XML映射。当需要进一步控制时（对于需要为特定类型提供自定义XML序列化程序/反序列化程序的情况），可以通过<code>ObjectMapper</code>属性注入自定义<code>XmlMapper</code>。默认情况下，此转换器支持<code>application/xml</code>。</td></tr><tr><td style="text-align:left;"><code>SourceHttpMessageConverter</code></td><td style="text-align:left;">一个可以读写<code>javax.xml.transform.Source</code>的<code>HttpMessageConverter</code>实现。仅支持<code>DOMSource</code>、<code>SAXSource</code>和<code>StreamSource</code>。默认情况下，此转换器支持<code>text/xml</code>和<code>application/xml</code>。</td></tr></tbody></table><p>默认情况下，<code>RestClient</code>和<code>RestTemplate</code>注册所有内置的消息转换器，具体取决于类路径上底层库的可用性。您还可以通过在<code>RestClient</code>构建器上使用<code>messageConverters()</code>方法，或通过<code>RestTemplate</code>的<code>messageConverters</code>属性，将消息转换器设置为显式使用。</p><h3 id="jackson-json-views" tabindex="-1"><a class="header-anchor" href="#jackson-json-views"><span>Jackson JSON Views</span></a></h3><p>要序列化对象属性的子集，可以指定Jackson JSON View，如下例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">MappingJacksonValue</span> value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MappingJacksonValue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;eric&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;7!jd#h23&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
value<span class="token punctuation">.</span><span class="token function">setSerializationView</span><span class="token punctuation">(</span><span class="token class-name">User<span class="token punctuation">.</span>WithoutPasswordView</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> response <span class="token operator">=</span> restClient<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// or RestTemplate.postForEntity</span>
  <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">toBodilessEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="multipart" tabindex="-1"><a class="header-anchor" href="#multipart"><span>Multipart</span></a></h3><p>要发送多部分数据，您需要提供一个<code>MultiValueMap&lt;String,Object&gt;</code>，其值可能是部分内容的<code>Object</code>、文件部分的<code>Resource</code>或带有标头的部分内容的<code>HttpEntity</code>。例如</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> parts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

parts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;fieldPart&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;fieldValue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
parts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;filePart&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span><span class="token string">&quot;...logo.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
parts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;jsonPart&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Jason&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_XML</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
parts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;xmlPart&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>myBean<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// send using RestClient.post or RestTemplate.postForEntity</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在大多数情况下，不必为每个部分指定<code>Content-Type</code>。内容类型是根据选择用于序列化的<code>HttpMessageConverter</code>自动确定的，或者在<code>Resource</code>的情况下，根据文件扩展名自动确定的。如果需要，可以显式地为<code>MediaType</code>提供<code>HttpEntity</code>包装器。</p><p>一旦<code>MultiValueMap</code>准备好，就可以使用<code>RestClient.POST().body(parts)</code>(或<code>RestTemplate.postForObject</code>)将其用作<code>POST</code>请求的主体。 如果<code>MultiValueMap</code>至少包含一个非字符串值，则<code>FormHttpMessageConverter</code>会将内容类型设置为<code>multipart/form</code>数据。如果<code>MultiValueMap</code>具有字符串值，则内容类型默认为<code>application/x-www-form-urlencoded</code>。如有必要，还可以显式设置<code>Content-Type</code>。</p><h3 id="client-request-factories" tabindex="-1"><a class="header-anchor" href="#client-request-factories"><span>Client Request Factories</span></a></h3><p>为了执行<code>HTTP</code>请求，<code>RestClient</code>使用客户端<code>HTTP</code>库。这些库通过<code>ClientRequestFactory</code>接口进行调整。有多种实现方式可供选择：</p><ul><li><code>JdkClientHttpRequestFactory</code> for Java’s <code>HttpClient</code></li><li><code>HttpComponentsClientHttpRequestFactory</code> for use with Apache HTTP Components <code>HttpClient</code></li><li><code>JettyClientHttpRequestFactory</code> for Jetty’s <code>HttpClient</code></li><li><code>ReactorNettyClientRequestFactory</code> for Reactor Netty’s <code>HttpClient</code></li><li><code>SimpleClientHttpRequestFactory</code> as a simple default</li></ul><p>如果在构建<code>RestClient</code>时没有指定请求工厂，那么它将使用<code>Apache</code>或<code>JettyHttpClient</code>(如果它们在类路径中可用)。否则，如果加载了<code>java.net.http</code>模块，它将使用<code>java</code>的<code>HttpClient</code>。最后，它将采用默认的<code>SimpleClientHttpRequestFactory</code>。</p><h2 id="spring-boot支持" tabindex="-1"><a class="header-anchor" href="#spring-boot支持"><span>Spring Boot支持</span></a></h2><p>如果您的应用程序中没有使用Spring Web Flux或Project Reactor，我们建议您使用RestClient来调用远程REST服务。RestClient接口提供了一种功能风格的阻塞API。</p><p>Spring Boot创建并预配置原型(prototype)<code>RestClient.Builder</code>。强烈建议在组件中注入它，并使用它来创建<code>RestClient</code>实例。Spring Boot使用<code>HttpMessageConverters</code>和适当的<code>ClientHttpRequestFactory</code>配置该构建器。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>

	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RestClient</span> restClient<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token class-name">MyService</span><span class="token punctuation">(</span><span class="token class-name">RestClient<span class="token punctuation">.</span>Builder</span> restClientBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>restClient <span class="token operator">=</span> restClientBuilder<span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">&quot;https://example.org&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token class-name">Details</span> <span class="token function">someRestCall</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>restClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/{name}/details&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">Details</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义restclient" tabindex="-1"><a class="header-anchor" href="#自定义restclient"><span>自定义RestClient</span></a></h3><p>RestClient自定义有三种主要方法，具体取决于您希望自定义应用的范围。</p><ul><li>要使任何自定义的范围尽可能窄，请注入自动配置<code>RestClient.Builder</code>，然后根据需要调用其方法。<code>RestClient.Builder</code>实例是有状态的：生成器上的任何更改都会反映在随后使用它创建的所有客户端中。如果您想使用同一生成器创建多个客户端，也可以考虑使用<code>RestClient.Builder other=Builder.clone()</code>；。</li><li>为了在应用程序范围内对所有<code>RestClient.Builder</code>进行定制。您可以声明<code>RestClientCustomizer </code>bean。</li><li>最后，您可以使用<code>RestClient.create</code>。在这种情况下，不会应用自动配置或<code>RestClientCustomizer</code>。</li></ul><h3 id="restclient-ssl-support" tabindex="-1"><a class="header-anchor" href="#restclient-ssl-support"><span>RestClient SSL Support</span></a></h3><p>如果您需要在<code>RestClient</code>使用的<code>ClientHttpRequestFactory</code>上进行自定义SSL配置，则可以注入一个<code>RestClientSsl</code>实例，该实例可以与构建器的<code>apply</code>方法一起使用。 <code>RestClientSsl</code>接口提供对您在<code>application.properties</code>或<code>application.yaml</code>文件中定义的任何SSL Bundle的访问。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>

	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RestClient</span> restClient<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token class-name">MyService</span><span class="token punctuation">(</span><span class="token class-name">RestClient<span class="token punctuation">.</span>Builder</span> restClientBuilder<span class="token punctuation">,</span> <span class="token class-name">RestClientSsl</span> ssl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>restClient <span class="token operator">=</span> restClientBuilder<span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">&quot;https://example.org&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>ssl<span class="token punctuation">.</span><span class="token function">fromBundle</span><span class="token punctuation">(</span><span class="token string">&quot;mybundle&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token class-name">Details</span> <span class="token function">someRestCall</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>restClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/{name}/details&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">Details</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果除了SSL Bundle之外还需要应用其他自定义，则可以将<code>ClientHttpRequestFactorySettings</code>类与<code>ClientHttpRequestFactory</code>一起使用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>

	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RestClient</span> restClient<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token class-name">MyService</span><span class="token punctuation">(</span><span class="token class-name">RestClient<span class="token punctuation">.</span>Builder</span> restClientBuilder<span class="token punctuation">,</span> <span class="token class-name">SslBundles</span> sslBundles<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">ClientHttpRequestFactorySettings</span> settings <span class="token operator">=</span> <span class="token class-name">ClientHttpRequestFactorySettings</span><span class="token punctuation">.</span><span class="token constant">DEFAULTS</span>
			<span class="token punctuation">.</span><span class="token function">withReadTimeout</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">withSslBundle</span><span class="token punctuation">(</span>sslBundles<span class="token punctuation">.</span><span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token string">&quot;mybundle&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">ClientHttpRequestFactory</span> requestFactory <span class="token operator">=</span> <span class="token class-name">ClientHttpRequestFactories</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>restClient <span class="token operator">=</span> restClientBuilder<span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">&quot;https://example.org&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">requestFactory</span><span class="token punctuation">(</span>requestFactory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token class-name">Details</span> <span class="token function">someRestCall</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>restClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/{name}/details&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">Details</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,50);function v(m,g){const t=p("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("URL也可以由函数或"),d,n("提供，两者都未编码。有关使用和编码URI的更多详细信息，请参阅"),s("a",r,[n("URI"),l(t)]),n("。")]),k])}const y=e(i,[["render",v],["__file","spring-restclient.html.vue"]]),C=JSON.parse('{"path":"/Spring/spring-restclient.html","title":"Spring RestClient","lang":"zh-CN","frontmatter":{"title":"Spring RestClient","date":"2024-05-01T00:00:00.000Z","categories":["Spring"],"tags":["Spring","http"],"description":"RestClient是一个同步的HTTP客户端，它提供了一个现代的、流畅的API。 创建RestClient RestClient使用静态的create方法创建。您还可以使用builder方法来定制更多配置项，例如: 指定要使用的HTTP库和要使用的消息转换器，设置默认URI、默认路径变量、默认请求头或uriBuilderFactory，或者注册拦截器...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/Spring/spring-restclient.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"Spring RestClient"}],["meta",{"property":"og:description","content":"RestClient是一个同步的HTTP客户端，它提供了一个现代的、流畅的API。 创建RestClient RestClient使用静态的create方法创建。您还可以使用builder方法来定制更多配置项，例如: 指定要使用的HTTP库和要使用的消息转换器，设置默认URI、默认路径变量、默认请求头或uriBuilderFactory，或者注册拦截器..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-10T12:45:31.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"http"}],["meta",{"property":"article:published_time","content":"2024-05-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-10T12:45:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring RestClient\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-10T12:45:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"创建RestClient","slug":"创建restclient","link":"#创建restclient","children":[]},{"level":2,"title":"使用 RestClient","slug":"使用-restclient","link":"#使用-restclient","children":[{"level":3,"title":"请求URL","slug":"请求url","link":"#请求url","children":[]},{"level":3,"title":"请求头和请求体","slug":"请求头和请求体","link":"#请求头和请求体","children":[]},{"level":3,"title":"获取响应体","slug":"获取响应体","link":"#获取响应体","children":[]},{"level":3,"title":"错误处理","slug":"错误处理","link":"#错误处理","children":[]},{"level":3,"title":"Exchange","slug":"exchange","link":"#exchange","children":[]},{"level":3,"title":"HTTP消息转换","slug":"http消息转换","link":"#http消息转换","children":[]},{"level":3,"title":"Jackson JSON Views","slug":"jackson-json-views","link":"#jackson-json-views","children":[]},{"level":3,"title":"Multipart","slug":"multipart","link":"#multipart","children":[]},{"level":3,"title":"Client Request Factories","slug":"client-request-factories","link":"#client-request-factories","children":[]}]},{"level":2,"title":"Spring Boot支持","slug":"spring-boot支持","link":"#spring-boot支持","children":[{"level":3,"title":"自定义RestClient","slug":"自定义restclient","link":"#自定义restclient","children":[]},{"level":3,"title":"RestClient SSL Support","slug":"restclient-ssl-support","link":"#restclient-ssl-support","children":[]}]}],"git":{"createdTime":1718023531000,"updatedTime":1718023531000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":1}]},"readingTime":{"minutes":8.51,"words":2553},"filePathRelative":"Spring/spring-restclient.md","localizedDate":"2024年5月1日","excerpt":"<p><code>RestClient</code>是一个同步的<code>HTTP</code>客户端，它提供了一个现代的、流畅的API。</p>\\n<h2>创建RestClient</h2>\\n<p><code>RestClient</code>使用静态的<code>create</code>方法创建。您还可以使用<code>builder</code>方法来定制更多配置项，例如: 指定要使用的<code>HTTP</code>库和要使用的消息转换器，设置默认URI、默认路径变量、默认请求头或<code>uriBuilderFactory</code>，或者注册拦截器和初始化器。一旦创建了<code>RestClient</code>，多个线程就可以安全地使用它。</p>","autoDesc":true}');export{y as comp,C as data};
