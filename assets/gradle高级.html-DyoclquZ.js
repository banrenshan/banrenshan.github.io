import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as c,c as p,b as n,d as e,e as t,a as s}from"./app-Crw0g0C7.js";const l="/assets/file-collection-vs-file-tree-BCAc4OMy.png",r={},u=s(`<h1 id="文件api" tabindex="-1"><a class="header-anchor" href="#文件api"><span>文件API</span></a></h1><p>文件操作几乎是每个Gradle构建的基础。它们涉及处理源文件、管理文件相关性和生成报告。Gradle提供了一个强大的API来简化这些操作，使开发人员能够轻松地执行必要的文件任务。</p><h2 id="硬编码路径和懒加载" tabindex="-1"><a class="header-anchor" href="#硬编码路径和懒加载"><span>硬编码路径和懒加载</span></a></h2><p>最佳做法是避免在构建脚本中使用硬编码路径。Gradle还在构建脚本中鼓励懒加载。这意味着任务和操作应该推迟到实际需要时才执行，而不是急切地执行。</p><p>本章中的许多示例使用硬编码路径作为字符串文字。这使它们易于理解，但这不是一个好的做法。问题是，路径经常会发生变化，你需要改变的地方越多，你就越有可能漏掉某一个并破坏构建。</p><p>在可能的情况下，应该使用任务、任务属性和项目属性（按首选项的顺序）来配置文件路径。</p><p>例如，如果您创建一个任务来打包Java应用程序的已编译类，则应该使用类似于以下的实现：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="token keyword">def</span> archivesDirPath <span class="token operator">=</span> layout<span class="token punctuation">.</span>buildDirectory<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span><span class="token string">&#39;archives&#39;</span><span class="token punctuation">)</span>

tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&#39;packageClasses&#39;</span><span class="token punctuation">,</span> Zip<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    archiveAppendix <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;classes&quot;</span></span>
    destinationDirectory <span class="token operator">=</span> archivesDirPath

    from compileJava
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>compileJava</code>任务是要打包的文件的来源，项目属性<code>archivesDirPath</code>存储归档的位置，因为我们可能会在构建的其他地方使用它。</p><p>像这样直接使用任务作为参数依赖于它是否有定义的输出，所以这并不总是可能的。这个例子可以通过依赖Java插件的<code>destinationDirectory</code>约定而不是覆盖它来进一步改进，但它确实演示了项目属性的使用。</p><h2 id="定位文件" tabindex="-1"><a class="header-anchor" href="#定位文件"><span>定位文件</span></a></h2><p>要对文件执行某些操作，您需要知道它在哪里，这就是文件路径提供的信息。Gradle构建在标准Java File类的基础上，该类表示单个文件的位置，并提供用于处理路径集合的API。</p><h3 id="使用projectlayout" tabindex="-1"><a class="header-anchor" href="#使用projectlayout"><span>使用ProjectLayout</span></a></h3><p>ProjectLayout类用于访问项目中的各种目录和文件。它提供了检索项目目录、构建目录、设置文件和项目文件结构中其他重要位置的路径的方法。当您需要在不同的项目路径中使用构建脚本或插件中的文件时，此类特别有用：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="token keyword">def</span> archivesDirPath <span class="token operator">=</span> layout<span class="token punctuation">.</span>buildDirectory<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span><span class="token string">&#39;archives&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,15),d={id:"使用-project-file",tabindex:"-1"},v={class:"header-anchor",href:"#使用-project-file"},k={href:"https://docs.gradle.org/current/userguide/working_with_files.html#sec:single_file_paths",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"Project.file()",-1),g=s(`<p>Gradle提供了<code>Project.file(java.lang.Object)</code>方法，用于指定单个文件或目录的位置。相对路径是相对于项目目录解析的，而绝对路径保持不变。</p><blockquote><p>不要使用 <code>new File(relative path) </code> , 除非作为参数传递给 file()、 files()、 from()等方法。否则，这将创建一个相对于当前工作目录（CWD）的路径。Gradle无法保证CWD的位置，这意味着依赖它的构建可能随时中断。</p></blockquote><p>以下是将<code>file()</code>方法与不同类型的参数一起使用的一些示例：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="token comment">// Using a relative path</span>
File configFile <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&#39;src/config.xml&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// Using an absolute path</span>
configFile <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span>configFile<span class="token punctuation">.</span>absolutePath<span class="token punctuation">)</span>

<span class="token comment">// Using a File object with a relative path</span>
configFile <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&#39;src/config.xml&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// Using a java.nio.file.Path object with a relative path</span>
configFile <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;config.xml&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// Using an absolute java.nio.file.Path object</span>
configFile <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&#39;user.home&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;global-config.xml&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如您所看到的，您可以将字符串、<code>File</code>实例和<code>Path</code>实例传递到<code>file()</code>方法，所有这些都会产生一个绝对的<code>File</code>对象。</p><p>在多项目构建的情况下，<code>file()</code>方法将始终将相对路径转换为相对于当前项目目录的路径，当前项目目录可能是子项目。</p><h3 id="使用project-getrootdir" tabindex="-1"><a class="header-anchor" href="#使用project-getrootdir"><span>使用Project.getRootDir()</span></a></h3><p>假设您要使用相对于根项目目录的路径。在这种情况下，您需要使用特殊的<code>Project.getRootDir()</code>属性来构造一个绝对路径，如下所示：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>File configFile <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">rootDir</span></span><span class="token string">/shared/config.xml&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>假设您正在目录<code>/dev/projects/AcmeHealth</code>中进行多项目构建。 上面的构建脚本位于：<code>AcmeHealth/subjects/AcmePatientRecordLib/build.gradle</code>。 文件路径将解析为绝对值：<code>/dev/projects/AcmeHealth/shared/config.xml</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>dev
├── projects
│   ├── AcmeHealth
│   │   ├── subprojects
│   │   │   ├── AcmePatientRecordLib
│   │   │   │   └── build.gradle
│   │   │   └── <span class="token punctuation">..</span>.
│   │   ├── shared
│   │   │   └── config.xml
│   │   └── <span class="token punctuation">..</span>.
│   └── <span class="token punctuation">..</span>.
└── settings.gradle
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，Project还为多项目构建提供了<code>Project.getRootProject()</code>，在本例中，它将解析为：<code>dev/projects/AcmeHealth/subjects/Acme PatientRecordLib</code></p>`,12),b={id:"使用-filecollection",tabindex:"-1"},f={class:"header-anchor",href:"#使用-filecollection"},h={href:"https://docs.gradle.org/current/userguide/working_with_files.html#sec:file_collections",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"FileCollection",-1),j=s(`<p>文件集合只是由<code>FileCollection</code>接口表示的一组文件路径。</p><p>路径集可以是任何文件路径。文件路径不必以任何方式关联，因此它们不必在同一目录中或具有共享的父目录。</p><p>指定文件集合的推荐方法是使用<code>ProjectLayout.files(java.lang.Object…)</code>方法，该方法返回一个<code>FileCollection</code>实例。这种灵活的方法允许您传递多个字符串、文件实例、字符串集合、文件集合等。如果任务已经定义了输出，您也可以将任务作为参数传入。</p><p>与上一节中介绍的<code>Project.file(java.lang.Object)</code>方法一样，所有相对路径都是相对于当前项目目录计算的。以下示例演示了可以使用的各种参数类型——字符串、文件实例、列表或路径：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>FileCollection collection <span class="token operator">=</span> layout<span class="token punctuation">.</span><span class="token function">files</span><span class="token punctuation">(</span><span class="token string">&#39;src/file1.txt&#39;</span><span class="token punctuation">,</span>
                                  <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&#39;src/file2.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  <span class="token punctuation">[</span><span class="token string">&#39;src/file3.csv&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;src/file4.csv&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                                  Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;file5.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件集合在Gradle中具有重要属性。它们可以是：</p><ul><li>created lazily</li><li>iterated over</li><li>filtered</li><li>combined</li></ul><p>在运行生成时评估组成集合的文件时，延迟创建文件集合非常有用。在以下示例中，我们查询文件系统以找出特定目录中存在的文件，然后将这些文件放入文件集合：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&#39;list&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Directory projectDirectory <span class="token operator">=</span> layout<span class="token punctuation">.</span>projectDirectory
    doLast <span class="token punctuation">{</span>
        File srcDir

        <span class="token comment">// Create a file collection using a closure</span>
        collection <span class="token operator">=</span> projectDirectory<span class="token punctuation">.</span>files <span class="token punctuation">{</span> srcDir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>

        srcDir <span class="token operator">=</span> projectDirectory<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asFile
        println <span class="token interpolation-string"><span class="token string">&quot;Contents of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">srcDir</span></span><span class="token string">.name&quot;</span></span>
        collection<span class="token punctuation">.</span>collect <span class="token punctuation">{</span> projectDirectory<span class="token punctuation">.</span>asFile<span class="token punctuation">.</span><span class="token function">relativePath</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>each <span class="token punctuation">{</span> println it <span class="token punctuation">}</span>

        srcDir <span class="token operator">=</span> projectDirectory<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&#39;src2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asFile
        println <span class="token interpolation-string"><span class="token string">&quot;Contents of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">srcDir</span></span><span class="token string">.name&quot;</span></span>
        collection<span class="token punctuation">.</span>collect <span class="token punctuation">{</span> projectDirectory<span class="token punctuation">.</span>asFile<span class="token punctuation">.</span><span class="token function">relativePath</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>each <span class="token punctuation">{</span> println it <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ gradle <span class="token parameter variable">-q</span> list
Contents of src
src/dir1
src/file1.txt
Contents of src2
src2/dir1
src2/dir2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>懒惰创建的关键是将闭包（在Groovy中）或Provider（在Kotlin中）传递给<code>files()</code>方法。您的闭包或提供程序必须返回<code>files()</code>接受的类型的值，如<code>List&lt;File&gt;</code>、<code>String</code>或<code>FileCollection</code>。</p><p>可以通过集合上的<code>each()</code>方法（在Groovy中）或forEach方法（在Kotlin中）或在for循环中使用该集合来对文件集合进行迭代。在这两种方法中，文件集合都被视为一组<code>File</code>实例，即迭代变量的类型为<code>File</code>。</p><p>下面的例子演示了这样的迭代。它还演示了如何使用as运算符（或支持的属性）将文件集合转换为其他类型：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>
<span class="token comment">// Iterate over the files in the collection</span>
collection<span class="token punctuation">.</span>each <span class="token punctuation">{</span> File file <span class="token operator">-&gt;</span>
    println file<span class="token punctuation">.</span>name
<span class="token punctuation">}</span>

<span class="token comment">// Convert the collection to various types</span>
Set set <span class="token operator">=</span> collection<span class="token punctuation">.</span>files
Set set2 <span class="token operator">=</span> collection <span class="token keyword">as</span> Set
List list <span class="token operator">=</span> collection <span class="token keyword">as</span> List
String path <span class="token operator">=</span> collection<span class="token punctuation">.</span>asPath
File file <span class="token operator">=</span> collection<span class="token punctuation">.</span>singleFile

<span class="token comment">// Add and subtract collections</span>
<span class="token keyword">def</span> union <span class="token operator">=</span> collection <span class="token operator">+</span> projectLayout<span class="token punctuation">.</span><span class="token function">files</span><span class="token punctuation">(</span><span class="token string">&#39;src/file2.txt&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> difference <span class="token operator">=</span> collection <span class="token operator">-</span> projectLayout<span class="token punctuation">.</span><span class="token function">files</span><span class="token punctuation">(</span><span class="token string">&#39;src/file2.txt&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您还可以在示例的末尾看到如何使用<code>+</code>和<code>-</code>运算符合并和减去文件集合。生成的文件集合的一个重要特性是它们是活动的。换句话说，当您以这种方式组合文件集合时，结果总是反映源文件集合中当前的内容，即使它们在构建过程中发生了更改。</p><p>例如，假设上例中的集合在创建并集后获得一两个额外的文件。只要在将这些文件添加到集合后使用并集，则并集也将包含这些附加文件。不同的文件集合也是如此。</p><p>在筛选时，实时集合也很重要。假设您要使用文件集合的子集。在这种情况下，您可以利用FileCollection.filter（org.gradle.api.Spec.Spec）方法来确定要“保留”哪些文件。在以下示例中，我们创建一个新集合，该集合仅由源集合中以.txt结尾的文件组成：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>FileCollection textFiles <span class="token operator">=</span> collection<span class="token punctuation">.</span>filter <span class="token punctuation">{</span> File f <span class="token operator">-&gt;</span>
    f<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;.txt&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ gradle <span class="token parameter variable">-q</span> filterTextFiles
src/file1.txt
src/file2.txt
src/file5.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果集合在任何时候发生更改，无论是通过添加文件还是从自身删除文件，那么textFiles都会立即反映更改，因为它也是一个活动集合。请注意，传递给filter（）的闭包将File作为参数，并应返回布尔值。</p><h4 id="了解到文件集合的隐式转换" tabindex="-1"><a class="header-anchor" href="#了解到文件集合的隐式转换"><span>了解到文件集合的隐式转换</span></a></h4><p>Gradle中的许多对象都具有接受一组输入文件的属性。例如，JavaCompile任务有一个定义要编译的源文件的源属性。您可以使用files（）方法支持的任何类型设置此属性的值，如API文档中所述。这意味着，例如，您可以将属性设置为File、String、collection、FileCollection，甚至闭包或Provider。</p><p>这是特定任务的一个功能！这意味着隐式转换不会只发生在具有FileCollection或FileTree属性的任何任务上。如果您想知道隐式转换是否发生在特定情况下，您需要阅读相关文档，例如相应任务的API文档。或者，您可以通过在构建中显式使用ProjectLayout.files（java.lang.Object…）来消除所有疑问。</p><p>以下是源属性可以采用的不同类型参数的一些示例：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&#39;compile&#39;</span><span class="token punctuation">,</span> JavaCompile<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// Use a File object to specify the source directory</span>
    source <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&#39;src/main/java&#39;</span><span class="token punctuation">)</span>

    <span class="token comment">// Use a String path to specify the source directory</span>
    source <span class="token operator">=</span> <span class="token string">&#39;src/main/java&#39;</span>

    <span class="token comment">// Use a collection to specify multiple source directories</span>
    source <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;src/main/java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;../shared/java&#39;</span><span class="token punctuation">]</span>

    <span class="token comment">// Use a FileCollection (or FileTree in this case) to specify the source files</span>
    source <span class="token operator">=</span> <span class="token function">fileTree</span><span class="token punctuation">(</span>dir<span class="token punctuation">:</span> <span class="token string">&#39;src/main/java&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matching <span class="token punctuation">{</span> include <span class="token string">&#39;org/gradle/api/**&#39;</span> <span class="token punctuation">}</span>

    <span class="token comment">// Using a closure to specify the source files.</span>
    source <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token comment">// Use the contents of each zip file in the src dir</span>
        <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>findAll <span class="token punctuation">{</span>it<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.zip&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span>collect <span class="token punctuation">{</span> <span class="token function">zipTree</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一件需要注意的事情是，像source这样的属性在核心Gradle任务中有相应的方法。这些方法遵循附加到值集合而不是替换它们的约定。同样，此方法接受files（）方法支持的任何类型，如下所示：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>compile <span class="token punctuation">{</span>
    <span class="token comment">// Add some source directories use String paths</span>
    source <span class="token string">&#39;src/main/java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;src/main/groovy&#39;</span>

    <span class="token comment">// Add a source directory using a File object</span>
    source <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&#39;../shared/java&#39;</span><span class="token punctuation">)</span>

    <span class="token comment">// Add some source directories using a closure</span>
    source <span class="token punctuation">{</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&#39;src/test/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于这是一个常见的约定，我们建议您在自己的自定义任务中遵循它。具体来说，如果计划添加一个方法来配置基于集合的属性，请确保该方法附加而不是替换值。</p>`,28),x={id:"使用-filetree",tabindex:"-1"},_={class:"header-anchor",href:"#使用-filetree"},F={href:"https://docs.gradle.org/current/userguide/working_with_files.html#sec:file_trees",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"FileTree",-1),A=s('<p>文件树是一个文件集合，它保留了所包含文件的目录结构，并且具有<code>FileTree</code>类型。这意味着文件树中的所有路径都必须有一个共享的父目录。下图突出显示了在复制文件的典型情况下文件树和文件集合之间的区别：</p><figure><img src="'+l+`" alt="file collection vs file tree" tabindex="0" loading="lazy"><figcaption>file collection vs file tree</figcaption></figure><blockquote><p>尽管FileTree扩展了FileCollection（一种is-a关系），但它们的行为不同。换句话说，您可以在需要文件集合的任何位置使用文件树，但请记住，文件集合是文件的平面列表/集合，而文件树是文件和目录层次结构。要将文件树转换为平面集合，请使用FileTree.getFiles（）属性。</p></blockquote><p>创建文件树的最简单方法是将文件或目录路径传递给Project.fileTree（java.lang.Object）方法。这将创建该基本目录中所有文件和目录的树（但不是基本目录本身）。以下示例演示了如何使用此方法以及如何使用Ant样式模式过滤文件和目录：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="token comment">// Create a file tree with a base directory</span>
ConfigurableFileTree tree <span class="token operator">=</span> <span class="token function">fileTree</span><span class="token punctuation">(</span>dir<span class="token punctuation">:</span> <span class="token string">&#39;src/main&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// Add include and exclude patterns to the tree</span>
tree<span class="token punctuation">.</span>include <span class="token string">&#39;**/*.java&#39;</span>
tree<span class="token punctuation">.</span>exclude <span class="token string">&#39;**/Abstract*&#39;</span>

<span class="token comment">// Create a tree using closure</span>
tree <span class="token operator">=</span> <span class="token function">fileTree</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    include <span class="token string">&#39;**/*.java&#39;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Create a tree using a map</span>
tree <span class="token operator">=</span> <span class="token function">fileTree</span><span class="token punctuation">(</span>dir<span class="token punctuation">:</span> <span class="token string">&#39;src&#39;</span><span class="token punctuation">,</span> include<span class="token punctuation">:</span> <span class="token string">&#39;**/*.java&#39;</span><span class="token punctuation">)</span>
tree <span class="token operator">=</span> <span class="token function">fileTree</span><span class="token punctuation">(</span>dir<span class="token punctuation">:</span> <span class="token string">&#39;src&#39;</span><span class="token punctuation">,</span> includes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;**/*.java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;**/*.xml&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
tree <span class="token operator">=</span> <span class="token function">fileTree</span><span class="token punctuation">(</span>dir<span class="token punctuation">:</span> <span class="token string">&#39;src&#39;</span><span class="token punctuation">,</span> include<span class="token punctuation">:</span> <span class="token string">&#39;**/*.java&#39;</span><span class="token punctuation">,</span> exclude<span class="token punctuation">:</span> <span class="token string">&#39;**/*test*/**&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以在PatternFilterable的API文档中看到更多受支持模式的示例。 默认情况下，fileTree（）返回一个fileTree实例，该实例为方便起见应用了一些默认的排除模式——与Ant的默认值相同。有关完整的默认排除列表，请参阅Ant手册。</p><p>如果这些默认排除有问题，您可以通过在设置脚本中更改默认排除来解决此问题：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>ant<span class="token punctuation">.</span>DirectoryScanner

DirectoryScanner<span class="token punctuation">.</span><span class="token function">removeDefaultExclude</span><span class="token punctuation">(</span><span class="token string">&#39;**/.git&#39;</span><span class="token punctuation">)</span>
DirectoryScanner<span class="token punctuation">.</span><span class="token function">removeDefaultExclude</span><span class="token punctuation">(</span><span class="token string">&#39;**/.git/**&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用文件树可以执行与使用文件集合相同的许多操作：</p><ul><li>迭代它们（深度优先）</li><li>过滤它们（使用FileTree.maching（org.gradle.api.Action）和Ant样式模式）</li><li>合并它们</li></ul><p>您还可以使用FileTree.visite（org.gradle.api.Action）方法遍历文件树。以下示例演示了所有这些技术：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="token comment">// Iterate over the contents of a tree</span>
tree<span class="token punctuation">.</span>each <span class="token punctuation">{</span>File file <span class="token operator">-&gt;</span>
    println file
<span class="token punctuation">}</span>

<span class="token comment">// Filter a tree</span>
FileTree filtered <span class="token operator">=</span> tree<span class="token punctuation">.</span>matching <span class="token punctuation">{</span>
    include <span class="token string">&#39;org/gradle/api/**&#39;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Add trees together</span>
FileTree sum <span class="token operator">=</span> tree <span class="token operator">+</span> <span class="token function">fileTree</span><span class="token punctuation">(</span>dir<span class="token punctuation">:</span> <span class="token string">&#39;src/test&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// Visit the elements of the tree</span>
tree<span class="token punctuation">.</span>visit <span class="token punctuation">{</span>element <span class="token operator">-&gt;</span>
    println <span class="token interpolation-string"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">element</span></span><span class="token string">.relativePath =&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">element</span></span><span class="token string">.file&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function D(C,T){const a=i("ExternalLinkIcon");return c(),p("div",null,[u,n("h3",d,[n("a",v,[n("span",null,[e("使用 "),n("a",k,[m,t(a)])])])]),g,n("h3",b,[n("a",f,[n("span",null,[e("使用 "),n("a",h,[y,t(a)])])])]),j,n("h3",x,[n("a",_,[n("span",null,[e("使用 "),n("a",F,[P,t(a)])])])]),A])}const q=o(r,[["render",D],["__file","gradle高级.html.vue"]]),I=JSON.parse('{"path":"/tool/gradle%E9%AB%98%E7%BA%A7.html","title":"文件API","lang":"zh-CN","frontmatter":{"description":"文件API 文件操作几乎是每个Gradle构建的基础。它们涉及处理源文件、管理文件相关性和生成报告。Gradle提供了一个强大的API来简化这些操作，使开发人员能够轻松地执行必要的文件任务。 硬编码路径和懒加载 最佳做法是避免在构建脚本中使用硬编码路径。Gradle还在构建脚本中鼓励懒加载。这意味着任务和操作应该推迟到实际需要时才执行，而不是急切地执行...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/tool/gradle%E9%AB%98%E7%BA%A7.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"文件API"}],["meta",{"property":"og:description","content":"文件API 文件操作几乎是每个Gradle构建的基础。它们涉及处理源文件、管理文件相关性和生成报告。Gradle提供了一个强大的API来简化这些操作，使开发人员能够轻松地执行必要的文件任务。 硬编码路径和懒加载 最佳做法是避免在构建脚本中使用硬编码路径。Gradle还在构建脚本中鼓励懒加载。这意味着任务和操作应该推迟到实际需要时才执行，而不是急切地执行..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-12T07:52:04.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:modified_time","content":"2024-06-12T07:52:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"文件API\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-12T07:52:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"硬编码路径和懒加载","slug":"硬编码路径和懒加载","link":"#硬编码路径和懒加载","children":[]},{"level":2,"title":"定位文件","slug":"定位文件","link":"#定位文件","children":[{"level":3,"title":"使用ProjectLayout","slug":"使用projectlayout","link":"#使用projectlayout","children":[]},{"level":3,"title":"使用 Project.file()","slug":"使用-project-file","link":"#使用-project-file","children":[]},{"level":3,"title":"使用Project.getRootDir()","slug":"使用project-getrootdir","link":"#使用project-getrootdir","children":[]},{"level":3,"title":"使用 FileCollection","slug":"使用-filecollection","link":"#使用-filecollection","children":[]},{"level":3,"title":"使用 FileTree","slug":"使用-filetree","link":"#使用-filetree","children":[]}]}],"git":{"createdTime":1718023531000,"updatedTime":1718178724000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":1}]},"readingTime":{"minutes":10.3,"words":3090},"filePathRelative":"tool/gradle高级.md","localizedDate":"2024年6月10日","excerpt":"\\n<p>文件操作几乎是每个Gradle构建的基础。它们涉及处理源文件、管理文件相关性和生成报告。Gradle提供了一个强大的API来简化这些操作，使开发人员能够轻松地执行必要的文件任务。</p>\\n<h2>硬编码路径和懒加载</h2>\\n<p>最佳做法是避免在构建脚本中使用硬编码路径。Gradle还在构建脚本中鼓励懒加载。这意味着任务和操作应该推迟到实际需要时才执行，而不是急切地执行。</p>\\n<p>本章中的许多示例使用硬编码路径作为字符串文字。这使它们易于理解，但这不是一个好的做法。问题是，路径经常会发生变化，你需要改变的地方越多，你就越有可能漏掉某一个并破坏构建。</p>\\n<p>在可能的情况下，应该使用任务、任务属性和项目属性（按首选项的顺序）来配置文件路径。</p>","autoDesc":true}');export{q as comp,I as data};
