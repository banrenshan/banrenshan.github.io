import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-JRZgQj53.js";const e={},p=t(`<p>Spring Expression Language(简称SpEL)是一种强大的表达式语言，支持在运行时查询和操作对象图。语言语法类似于Unified EL，但提供了额外的功能，特别是方法调用和基本的字符串模板功能。</p><p>虽然还有其他几种Java表达式语言可用 - OGNL，MVEL和JBoss EL等。创建Spring表达式语言是为了向Spring社区提供单一支持良好的表达式语言，可用于Spring产品。</p><p>虽然SpEL是Spring表达式evaluation的基础，但它并不直接与Spring结合，可以独立使用。为了自成一体，本章中的许多示例都使用SpEL，就好像它是独立的表达式语言一样。这需要创建一些引导基础结构类，比如parser。大多数Spring用户不需要处理这个基础设施，只需要创建表达式字符串进行evaluation。这种典型用法的一个例子是将SpEL集成到创建XML或基于注释的bean定义中。</p><h2 id="evaluation" tabindex="-1"><a class="header-anchor" href="#evaluation"><span>Evaluation</span></a></h2><p>本节介绍使用SpEL接口及其表达式语言。 以下代码引入了SpEL API来evaluate 字符串表达式<code>Hello World</code>。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;Hello World&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>message变量的值是。</p><p>SpEL类和接口位于包<code>org.springframework.expression</code>及其子包中。 <code>ExpressionParser</code>接口负责解析表达式字符串。 在这个例子中，表达式字符串是由<strong>单引号</strong>括起来的字符串文字。接口<code>Expression</code>负责evaluate先前定义的表达式字符串。当分别调用<code>parser.parseExpression</code>和<code>exp.getValue</code>时，可能会抛出两个异常，<code>ParseException</code>和<code>EvaluationException</code>。</p><p>SpEL支持很多功能，例如调用方法，访问属性和调用构造函数。</p><p>作为方法调用的一个例子，我们在字符串文字上调用concat方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;Hello World&#39;.concat(&#39;!&#39;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>message 的值是&quot;Hello World!&quot;</p><p>作为调用JavaBean属性的示例，可以调用String属性Bytes，如下所示。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// invokes &#39;getBytes()&#39;</span>
<span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;Hello World&#39;.bytes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SpEL还支持使用<strong>点符号</strong>的嵌套属性，即<code>prop1.prop2.prop3</code>和属性值的设置</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// invokes &#39;getBytes().length&#39;</span>
<span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;Hello World&#39;.bytes.length&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以调用String的构造函数，而不是使用字符串文字。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;new String(&#39;hello world&#39;).toUpperCase()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> message <span class="token operator">=</span> exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意使用泛型方法<code>public &lt;T&gt; T getValue(Class &lt;T&gt; desiredResultType)</code>。 使用此方法不需要将表达式的值转换为所需的结果类型。 如果值不能转换为类型T或使用注册类型转换器转换，则会抛出<code>EvaluationException</code>。</p><p>SpEL更常见的用法是提供一个针对特定对象实例(称为根对象)进行评估的表达式字符串。 该示例演示如何从<code>Inventor</code>类的实例中检索<code>name</code>属性或创建布尔条件：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Create and set a calendar</span>
<span class="token class-name">GregorianCalendar</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GregorianCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
c<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1856</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// The constructor arguments are name, birthday, and nationality.</span>
<span class="token class-name">Inventor</span> tesla <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inventor</span><span class="token punctuation">(</span><span class="token string">&quot;Nikola Tesla&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Serbian&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>tesla<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// name == &quot;Nikola Tesla&quot;</span>

exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;name == &#39;Nikola Tesla&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> result <span class="token operator">=</span> exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>tesla<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// result == true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="evaluationcontext" tabindex="-1"><a class="header-anchor" href="#evaluationcontext"><span>EvaluationContext</span></a></h3><p>评估一个表达式来解析属性、方法或字段并帮助执行类型转换时，将使用接口<code>EvaluationContext</code>。 有两个开箱即用的实现：</p><ul><li><code>SimpleEvaluationContext</code>：展示了一些重要的SpEL语言功能和配置选项的子集。示例包括但不限于数据绑定表达式，基于属性的过滤器等</li><li><code>StandardEvaluationContext</code>：展示全套SpEL语言功能和配置选项。您可以使用它来指定默认的根对象并配置每个可用的评估相关策略。</li></ul><p><code>SimpleEvaluationContext</code>被设计为仅支持SpEL语言语法的一个子集。它不包括Java类型引用，构造函数和bean引用。它还要求明确选择对表达式中属性和方法的支持级别。默认情况下，create()静态工厂方法只启用对属性的读访问权限。 您还可以获取构建器以配置所需的确切支持级别，并将目标设置为以下一项或多项组合：</p><ul><li>仅限自定义PropertyAccessor(不反射)</li><li>用于只读访问的数据绑定属性</li><li>用于读取和写入的数据绑定属性</li></ul><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换"><span>类型转换</span></a></h3><p>默认情况下，SpEL使用Spring核心中可用的转换服务(<code>org.springframework.core.convert.ConversionService</code>)。这种转换服务附带了许多内置的转换器，可以进行常规转换，也可以完全扩展，因此可以添加类型之间的自定义转换。此外，它具有泛型意识。 这意味着，当在表达式中使用泛型类型时，SpEL将尝试转换以维护其遇到的任何对象的类型正确性。</p><p>这在实践中意味着什么？ 假设正在使用setValue()进行赋值来设置List属性。 该属性的类型实际上是<code>List &lt;Boolean&gt;</code>。 SpEL将认识到列表中的元素在被设置之前需要转换为布尔值。 一个简单的例子：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Simple</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> booleanList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Simple</span> simple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Simple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
simple<span class="token punctuation">.</span>booleanList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">EvaluationContext</span> context <span class="token operator">=</span> <span class="token class-name">SimpleEvaluationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forReadOnlyDataBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// false is passed in here as a string. SpEL and the conversion service will</span>
<span class="token comment">// correctly recognize that it needs to be a Boolean and convert it</span>
parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;booleanList[0]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> simple<span class="token punctuation">,</span> <span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// b will be false</span>
<span class="token class-name">Boolean</span> b <span class="token operator">=</span> simple<span class="token punctuation">.</span>booleanList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="parser配置" tabindex="-1"><a class="header-anchor" href="#parser配置"><span>Parser配置</span></a></h3><p>可以使用解析器配置对象(<code>org.springframework.expression.spel.SpelParserConfiguration</code>)来配置SpEL表达式解析器。配置对象控制一些表达式组件的行为。例如，如果索引到数组或集合中，并且指定索引处的元素为空，则可以自动创建该元素。当使用由一系列属性引用组成的表达式时，这非常有用。 如果索引到数组或列表中并指定超出数组或列表当前大小末尾的索引，则可以自动增大数组或列表以适应该索引。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Turn on:</span>
<span class="token comment">// - auto null reference initialization</span>
<span class="token comment">// - auto collection growing</span>
<span class="token class-name">SpelParserConfiguration</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelParserConfiguration</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Expression</span> expression <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;list[3]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Demo</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Object</span> o <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// demo.list will now be a real collection of 4 entries</span>
<span class="token comment">// Each entry is a new empty String</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spel编译" tabindex="-1"><a class="header-anchor" href="#spel编译"><span>SpEL编译</span></a></h3><p>Spring Framework 4.1包含一个基本的表达式编译器。 表达式通常在评估过程中被解释,这提供了很大的动态灵活性，但不能提供最佳性能。 对于偶然的表达用法，这很好，但是当像Spring Integration这样的其他组件使用时，性能可能非常重要，并且并不需要动态性。</p><p>SpEL编译器旨在解决此需求。编译器将在评估过程中动态生成一个真正的Java类，以体现表达式行为并使用它来实现更快的表达式评估。由于缺少表达式的类型，编译器在执行编译时使用在表达式的解释评估期间收集的信息。例如，它不完全知道表达式的属性引用的类型，但是在第一次解释评估期间，它将查明它是什么。当然，如果各种表达式元素的类型随着时间的推移而变化，那么基于这些信息的编译可能会在稍后造成麻烦。出于这个原因，编译最适合于在重复评估时其类型信息不会改变的表达式。 对于像这样的基本表达式：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>someArray[0].someProperty.someOtherProperty &lt; 0.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中涉及数组访问，某些属性取消引用和数字操作，性能增益可能非常明显。 在50000次迭代的示例微基准测试中，仅使用解释器评估75ms，使用表达式的编译版本仅评估3ms。</p><h4 id="编译器配置" tabindex="-1"><a class="header-anchor" href="#编译器配置"><span>编译器配置</span></a></h4><p>编译器默认情况下未打开，但有两种方法可以打开它。 可以使用前面讨论过的解析器配置过程打开它，或者当SpEL用法嵌入到另一个组件内时使用系统属性打开它。 本节讨论这两个选项。</p><p>理解编译器可以运行的几种模式非常重要(<code>org.springframework.expression.spel.SpelCompilerMode</code>)。 模式如下：</p><ul><li><code>OFF </code>- 编译器关闭; 这是默认值。</li><li><code>IMMEDIATE </code>- 在即时模式下，尽快编译表达式。 这通常是在第一次解释评估之后。 如果编译的表达式失败(通常是由于类型改变，如上所述)，则表达式评估的调用者将收到异常。</li><li><code>MIXED </code>- 在混合模式下，表达式会随着时间的推移在解释模式和编译模式之间无声切换。经过一些解释运行后，它们将切换到编译形式，并且如果编译形式出现问题(如类型改变，如上所述)，则表达式将自动切换回解释形式。稍后它可能会生成另一个编译表单并切换到它。 基本上，用户进入<code>IMMEDIATE</code>模式的异常是在内部处理的。</li></ul><p><code>IMMEDIATE</code>模式之所以存在，因为<code>MIXED</code>模式可能会导致有副作用的表达式。如果编译后的表达式在部分成功后爆炸，它可能已经做了一些影响系统状态的事情。如果发生这种情况，调用者可能不希望它以解释模式重新运行，因为部分表达式可能会运行两次。</p><p>选择模式后，使用<code>SpelParserConfiguration</code>配置解析器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">SpelParserConfiguration</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelParserConfiguration</span><span class="token punctuation">(</span><span class="token class-name">SpelCompilerMode</span><span class="token punctuation">.</span><span class="token constant">IMMEDIATE</span><span class="token punctuation">,</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">SpelExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Expression</span> expr <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;payload&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">MyMessage</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Object</span> payload <span class="token operator">=</span> expr<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>指定编译器模式时，也可以指定一个类加载器(允许传递null)。 编译的表达式将在所提供的任何子类下创建的子类加载器中定义。确保是否指定类加载器很重要，它可以查看表达式评估过程中涉及的所有类型。 如果没有指定，则将使用默认的类加载器(通常是表达式评估期间运行的线程的上下文类加载器)。</p><p>配置编译器的第二种方式是在SpEL嵌入到其他组件中时使用，并且可能无法通过配置对象进行配置。在这些情况下，可以使用系统属性。属性<code>spring.expression.compiler.mode</code>可以设置为SpelCompilerMode枚举值(off，immediate或mixed)。</p><h4 id="编译器限制" tabindex="-1"><a class="header-anchor" href="#编译器限制"><span>编译器限制</span></a></h4><p>自Spring Framework 4.1以来，基本的编译框架已经到位。 但是，该框架还不支持编译各种表达式。 最初的重点是可能用于性能关键环境的常用表达式。 以下几种表达方式目前无法编译：</p><ul><li>Expressions involving assignment</li><li>Expressions relying on the conversion service</li><li>Expressions using custom resolvers or accessors</li><li>Expressions using overloaded operators</li><li>Expressions using array construction syntax</li><li>Expressions using selection or projection</li></ul><p>越来越多类型的表达将在未来可编译。</p><h2 id="bean定义中使用表达式" tabindex="-1"><a class="header-anchor" href="#bean定义中使用表达式"><span>bean定义中使用表达式</span></a></h2><p>SpEL表达式可以用于XML或基于注解的配置元数据来定义<code>BeanDefinitions</code>。 在这两种情况下，定义表达式的语法都是<code>#{&lt;表达式字符串&gt;}</code>的形式。</p><h3 id="xml配置" tabindex="-1"><a class="header-anchor" href="#xml配置"><span>XML配置</span></a></h3><p>可以使用如下所示的表达式来设置属性或构造函数参数值。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">&quot;numberGuess&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;org.spring.samples.NumberGuess&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">&quot;randomNumber&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;#{ T(java.lang.Math).random() * 100.0 }&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> other properties <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变量systemProperties是预定义的，所以你可以在你的表达式中使用它，如下所示。 请注意，您不必在此上下文中将预定义变量与<code>#</code>符号相加。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">&quot;taxCalculator&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;org.spring.samples.TaxCalculator&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">&quot;defaultLocale&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;#{ systemProperties[&#39;user.region&#39;] }&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> other properties <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如，您也可以通过名称引用其他bean属性。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>numberGuess<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.spring.samples.NumberGuess<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>randomNumber<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#{ T(java.lang.Math).random() * 100.0 }<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

    <span class="token comment">&lt;!-- other properties --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>shapeGuess<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.spring.samples.ShapeGuess<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>initialShapeSeed<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#{ numberGuess.randomNumber }<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

    <span class="token comment">&lt;!-- other properties --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注解配置" tabindex="-1"><a class="header-anchor" href="#注解配置"><span>注解配置</span></a></h3><p><code>@Value</code>注释可以放在字段，方法和构造函数参数上以指定默认值。</p><p>以下是设置字段变量的默认值的示例。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FieldValueTestBean</span>

    <span class="token comment">//@Value(&quot;#{systemProperties[&#39;user.region&#39;] }&quot;)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> defaultLocale<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDefaultLocale</span><span class="token punctuation">(</span><span class="token class-name">String</span> defaultLocale<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>defaultLocale <span class="token operator">=</span> defaultLocale<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDefaultLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultLocale<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面显示了等价但属性setter方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PropertyValueTestBean</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> defaultLocale<span class="token punctuation">;</span>

    <span class="token comment">//@Value(&quot;#{ systemProperties[&#39;user.region&#39;] }&quot;)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDefaultLocale</span><span class="token punctuation">(</span><span class="token class-name">String</span> defaultLocale<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>defaultLocale <span class="token operator">=</span> defaultLocale<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDefaultLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultLocale<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自动装配的方法和构造函数也可以使用@Value注解。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleMovieLister</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> defaultLocale<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{ systemProperties[&#39;user.region&#39;] }&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> defaultLocale<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>movieFinder <span class="token operator">=</span> movieFinder<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>defaultLocale <span class="token operator">=</span> defaultLocale<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieRecommender</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> defaultLocale<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">CustomerPreferenceDao</span> customerPreferenceDao<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token class-name">MovieRecommender</span><span class="token punctuation">(</span><span class="token class-name">CustomerPreferenceDao</span> customerPreferenceDao<span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{systemProperties[&#39;user.country&#39;]}&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> defaultLocale<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>customerPreferenceDao <span class="token operator">=</span> customerPreferenceDao<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>defaultLocale <span class="token operator">=</span> defaultLocale<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="语言参考" tabindex="-1"><a class="header-anchor" href="#语言参考"><span>语言参考</span></a></h2><h3 id="文字表达式" tabindex="-1"><a class="header-anchor" href="#文字表达式"><span>文字表达式</span></a></h3><p>支持的文字表达式的类型是字符串，数值(int，real，hex)，布尔值和null。 字符串由<strong>单引号</strong>分隔。 <strong>要将单引号本身放入字符串中，请使用两个单引号字符</strong>。</p><p>下面的清单显示了文字的简单用法。 通常，它们不会像这样孤立地使用，而是作为更复杂表达式的一部分，例如在逻辑比较运算符的一侧使用文字。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// evals to &quot;Hello World&quot;</span>
<span class="token class-name">String</span> helloWorld <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;Hello World&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">double</span> avogadrosNumber <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;6.0221415E+23&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// evals to 2147483647</span>
<span class="token keyword">int</span> maxValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;0x7FFFFFFF&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">boolean</span> trueValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Object</span> nullValue <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数字支持使用负号，指数表示法和小数点。 默认情况下，实数使用Double.parseDouble()进行分析。</p><h3 id="properties-arrays-lists-maps-indexers" tabindex="-1"><a class="header-anchor" href="#properties-arrays-lists-maps-indexers"><span>Properties, Arrays, Lists, Maps, Indexers</span></a></h3><p>使用属性引用进行浏览很容易：只需使用句点来指示嵌套的属性值。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// evals to 1856</span>
<span class="token keyword">int</span> year <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;Birthdate.Year + 1900&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> city <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;placeOfBirth.City&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于属性名称的第一个字母，不区分大小写。 数组和列表的内容使用方括号表示法获得。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">EvaluationContext</span> context <span class="token operator">=</span> <span class="token class-name">SimpleEvaluationContext</span><span class="token punctuation">.</span><span class="token function">forReadOnlyDataBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Inventions Array</span>

<span class="token comment">// evaluates to &quot;Induction motor&quot;</span>
<span class="token class-name">String</span> invention <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;inventions[3]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>
        context<span class="token punctuation">,</span> tesla<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Members List</span>

<span class="token comment">// evaluates to &quot;Nikola Tesla&quot;</span>
<span class="token class-name">String</span> name <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;Members[0].Name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>
        context<span class="token punctuation">,</span> ieee<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// List and Array navigation</span>
<span class="token comment">// evaluates to &quot;Wireless communication&quot;</span>
<span class="token class-name">String</span> invention <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;Members[0].Inventions[6]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>
        context<span class="token punctuation">,</span> ieee<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过指定括号内的文字键值来获得MAP的内容。 在这种情况下，因为Officer MAP的键是字符串，所以我们可以指定字符串文字。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Officer&#39;s Dictionary</span>

<span class="token class-name">Inventor</span> pupin <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;Officers[&#39;president&#39;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>
        societyContext<span class="token punctuation">,</span> <span class="token class-name">Inventor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// evaluates to &quot;Idvor&quot;</span>
<span class="token class-name">String</span> city <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;Officers[&#39;president&#39;].PlaceOfBirth.City&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>
        societyContext<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// setting values</span>
parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;Officers[&#39;advisors&#39;][0].PlaceOfBirth.Country&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>
        societyContext<span class="token punctuation">,</span> <span class="token string">&quot;Croatia&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内联lists" tabindex="-1"><a class="header-anchor" href="#内联lists"><span>内联lists</span></a></h3><p>列表可以使用<code>{}</code>表示法直接在表达式中表达。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// evaluates to a Java list containing the four numbers</span>
<span class="token class-name">List</span> numbers <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;{1,2,3,4}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List</span> listOfLists <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;{{&#39;a&#39;,&#39;b&#39;},{&#39;x&#39;,&#39;y&#39;}}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>{}</code>本身意味着一个空的列表。 出于性能原因，如果列表本身完全由固定文字组成，则会创建一个常量列表来表示表达式，而不是在每个评估中创建一个新列表。</p><h3 id="内联maps" tabindex="-1"><a class="header-anchor" href="#内联maps"><span>内联Maps</span></a></h3><p>也可以使用<code>{key：value}</code>表示法在表达式中直接表示Map。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// evaluates to a Java map containing the two entries</span>
<span class="token class-name">Map</span> inventorInfo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;{name:&#39;Nikola&#39;,dob:&#39;10-July-1856&#39;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Map</span> mapOfMaps <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;{name:{first:&#39;Nikola&#39;,last:&#39;Tesla&#39;},dob:{day:10,month:&#39;July&#39;,year:1856}}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>{:}</code>本身意味着一张空白的Map。 出于性能原因，如果Map本身由固定文字或其他嵌套常量结构(列表或Map)组成，则将创建常量<code>Map</code>来表示表达式，而不是在每次评估中构建新<code>Map</code>。 <code>Map</code>键的引号是可选的，上面的例子没有使用带引号的键。</p><h3 id="array构造" tabindex="-1"><a class="header-anchor" href="#array构造"><span>Array构造</span></a></h3><p>可以使用熟悉的Java语法构建数组，可以选择提供初始化程序以在构建时填充数组。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;new int[4]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Array with initializer</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;new int[]{1,2,3}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Multi dimensional array</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;new int[4][5]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在构建多维数组时，目前不允许提供初始化程序。</p><h3 id="方法调用" tabindex="-1"><a class="header-anchor" href="#方法调用"><span>方法调用</span></a></h3><p>使用典型的Java编程语法调用方法。 你也可以在文字上调用方法。 可变参数也被支持。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// string literal, evaluates to &quot;bc&quot;</span>
<span class="token class-name">String</span> bc <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;abc&#39;.substring(1, 3)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// evaluates to true</span>
<span class="token keyword">boolean</span> isMember <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;isMember(&#39;Mihajlo Pupin&#39;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>
        societyContext<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h3><h4 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符"><span>关系运算符</span></a></h4><p>关系运算符： 等于，不等于，小于，小于或等于，大于，大于或等于使用标准操作符表示法支持。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// evaluates to true</span>
<span class="token keyword">boolean</span> trueValue <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;2 == 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// evaluates to false</span>
<span class="token keyword">boolean</span> falseValue <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;2 &lt; -5.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// evaluates to true</span>
<span class="token keyword">boolean</span> trueValue <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;black&#39; &lt; &#39;block&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>根据一个简单的规则，对空的比较大于/小于：null在这里被视为无(即不为零)。 因此，任何其他值总是大于空(X&gt; null始终为真)，并且其他值永远不会小于(X &lt;null总是为false)。如果您更喜欢数字比较，请避免基于数字的空比较，以便与零比较(例如，X&gt; 0或X &lt;0)。</p></blockquote><p>除标准关系运算符外，SpEL还支持基于instanceof和正则表达式的匹配运算符。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// evaluates to false</span>
<span class="token keyword">boolean</span> falseValue <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>
        <span class="token string">&quot;&#39;xyz&#39; instanceof T(Integer)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// evaluates to true</span>
<span class="token keyword">boolean</span> trueValue <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>
        <span class="token string">&quot;&#39;5.00&#39; matches &#39;^-?\\\\d+(\\\\.\\\\d{2})?$&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//evaluates to false</span>
<span class="token keyword">boolean</span> falseValue <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>
        <span class="token string">&quot;&#39;5.0067&#39; matches &#39;^-?\\\\d+(\\\\.\\\\d{2})?$&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意原始类型，因为它们会立即装箱到包装类型，所以如预期的那样，1个instanceof T(int)的计算结果为false，而1个instanceof T(Integer)的计算结果为true。</p></blockquote><p>每个符号运算符也可以被指定为纯粹的字母等值。 这避免了所使用的符号对嵌入表达式的文档类型(例如XML文档)具有特殊含义的问题。 文本等价物如下所示：lt(&lt;)，gt(&gt;)，le(⇐)，ge(&gt; =)，eq(==)，ne(！=)，div(/)，mod(％) ，而不是(！)。 这些不区分大小写。</p><h4 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// -- AND --</span>

<span class="token comment">// evaluates to false</span>
<span class="token keyword">boolean</span> falseValue <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;true and false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// evaluates to true</span>
<span class="token class-name">String</span> expression <span class="token operator">=</span> <span class="token string">&quot;isMember(&#39;Nikola Tesla&#39;) and isMember(&#39;Mihajlo Pupin&#39;)&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> trueValue <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>societyContext<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// -- OR --</span>

<span class="token comment">// evaluates to true</span>
<span class="token keyword">boolean</span> trueValue <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;true or false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// evaluates to true</span>
<span class="token class-name">String</span> expression <span class="token operator">=</span> <span class="token string">&quot;isMember(&#39;Nikola Tesla&#39;) or isMember(&#39;Albert Einstein&#39;)&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> trueValue <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>societyContext<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// -- NOT --</span>

<span class="token comment">// evaluates to false</span>
<span class="token keyword">boolean</span> falseValue <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;!true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// -- AND and NOT --</span>
<span class="token class-name">String</span> expression <span class="token operator">=</span> <span class="token string">&quot;isMember(&#39;Nikola Tesla&#39;) and !isMember(&#39;Mihajlo Pupin&#39;)&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> falseValue <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>societyContext<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数学运算符" tabindex="-1"><a class="header-anchor" href="#数学运算符"><span>数学运算符</span></a></h4><p>加法运算符可用于数字和字符串。 减法，乘法和除法只能用于数字。 其他支持的数学运算符是模数(％)和指数函数(^)。 标准运算符优先级被强制执行。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Addition</span>
<span class="token keyword">int</span> two <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;1 + 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2</span>

<span class="token class-name">String</span> testString <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>
        <span class="token string">&quot;&#39;test&#39; + &#39; &#39; + &#39;string&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#39;test string&#39;</span>

<span class="token comment">// Subtraction</span>
<span class="token keyword">int</span> four <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;1 - -3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 4</span>

<span class="token keyword">double</span> d <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;1000.00 - 1e4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// -9000</span>

<span class="token comment">// Multiplication</span>
<span class="token keyword">int</span> six <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;-2 * -3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 6</span>

<span class="token keyword">double</span> twentyFour <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;2.0 * 3e0 * 4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 24.0</span>

<span class="token comment">// Division</span>
<span class="token keyword">int</span> minusTwo <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;6 / -3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// -2</span>

<span class="token keyword">double</span> one <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;8.0 / 4e0 / 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1.0</span>

<span class="token comment">// Modulus</span>
<span class="token keyword">int</span> three <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;7 % 4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3</span>

<span class="token keyword">int</span> one <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;8 / 5 % 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1</span>

<span class="token comment">// Operator precedence</span>
<span class="token keyword">int</span> minusTwentyOne <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;1+2-3*8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// -21</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="赋值" tabindex="-1"><a class="header-anchor" href="#赋值"><span>赋值</span></a></h3><p>属性的设置是通过使用赋值运算符完成的。 这通常是在对setValue的调用中完成的，但也可以在对getValue的调用中完成。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Inventor</span> inventor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inventor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">EvaluationContext</span> context <span class="token operator">=</span> <span class="token class-name">SimpleEvaluationContext</span><span class="token punctuation">.</span><span class="token function">forReadWriteDataBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> inventor<span class="token punctuation">,</span> <span class="token string">&quot;Aleksandar Seovic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// alternatively</span>
<span class="token class-name">String</span> aleks <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>
        <span class="token string">&quot;Name = &#39;Aleksandar Seovic&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> inventor<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型" tabindex="-1"><a class="header-anchor" href="#类型"><span>类型</span></a></h3><p>特殊的T运算符可用于指定java.lang.Class(类型)的实例。也使用此运算符调用静态方法。<code>StandardEvaluationContext</code>使用<code>TypeLocator</code>来查找类型，并且可以通过理解java.lang包来构建<code>StandardTypeLocator</code>(可以替换它)。 这意味着T()对java.lang中类型的引用不需要完全限定，但所有其他类型引用必须是。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Class</span> dateClass <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;T(java.util.Date)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Class</span> stringClass <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;T(String)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">boolean</span> trueValue <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>
        <span class="token string">&quot;T(java.math.RoundingMode).CEILING &lt; T(java.math.RoundingMode).FLOOR&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数"><span>构造函数</span></a></h3><p>可以使用new运算符调用构造函数。 除了基本类型和String(可以使用int，float等)之外，全限定类名应该用于所有类。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Inventor</span> einstein <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>
        <span class="token string">&quot;new org.spring.samples.spel.inventor.Inventor(&#39;Albert Einstein&#39;, &#39;German&#39;)&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Inventor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//create new inventor instance within add method of List</span>
p<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>
        &quot;<span class="token class-name">Members</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>samples<span class="token punctuation">.</span>spel<span class="token punctuation">.</span>inventor<span class="token punctuation">.</span></span>Inventor</span><span class="token punctuation">(</span>
            &#39;<span class="token class-name">Albert</span> <span class="token class-name">Einstein</span><span class="token char">&#39;, &#39;</span><span class="token class-name">German</span>&#39;<span class="token punctuation">)</span><span class="token punctuation">)</span>&quot;<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>societyContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h3><p>变量可以使用语法<code>#variableName</code>在表达式中引用。 在<code>EvaluationContext</code>实现上使用<code>setVariable</code>方法设置变量。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Inventor</span> tesla <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inventor</span><span class="token punctuation">(</span><span class="token string">&quot;Nikola Tesla&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Serbian&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">EvaluationContext</span> context <span class="token operator">=</span> <span class="token class-name">SimpleEvaluationContext</span><span class="token punctuation">.</span><span class="token function">forReadWriteDataBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
context<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token string">&quot;newName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mike Tesla&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;Name = #newName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> tesla<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tesla<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// &quot;Mike Tesla&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="this和-root变量" tabindex="-1"><a class="header-anchor" href="#this和-root变量"><span><code>#this</code>和<code>#root</code>变量</span></a></h5><p>变量<code>#this</code>总是指向当前评估对象(针对其解析了非限定参考)。 变量<code>#root</code>总是引用根上下文对象。 尽管<code>#this</code>可能会随着表达式组件的不同而变化，但<code>#root</code>总是指向根。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// create an array of integers</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> primes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
primes<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// create parser and set variable &#39;primes&#39; as the array of integers</span>
<span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">EvaluationContext</span> context <span class="token operator">=</span> <span class="token class-name">SimpleEvaluationContext</span><span class="token punctuation">.</span><span class="token function">forReadOnlyDataAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
context<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token string">&quot;primes&quot;</span><span class="token punctuation">,</span> primes<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// all prime numbers &gt; 10 from the list (using selection ?{...})</span>
<span class="token comment">// evaluates to [11, 13, 17]</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> primesGreaterThanTen <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>
        <span class="token string">&quot;#primes.?[#this&gt;10]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h3><p>您可以通过注册可在表达式字符串内调用的用户定义函数来扩展SpEL。 该函数通过EvaluationContext进行注册。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>

<span class="token class-name">EvaluationContext</span> context <span class="token operator">=</span> <span class="token class-name">SimpleEvaluationContext</span><span class="token punctuation">.</span><span class="token function">forReadOnlyDataBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
context<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token string">&quot;myFunction&quot;</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如，给定一个反转字符串的实用方法如下所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">StringUtils</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> backwards <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> input<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            backwards<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> backwards<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述方法可以如下注册和使用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">EvaluationContext</span> context <span class="token operator">=</span> <span class="token class-name">SimpleEvaluationContext</span><span class="token punctuation">.</span><span class="token function">forReadOnlyDataBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
context<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token string">&quot;reverseString&quot;</span><span class="token punctuation">,</span>
        <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">&quot;reverseString&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> helloWorldReversed <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>
        <span class="token string">&quot;#reverseString(&#39;hello&#39;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bean-引用" tabindex="-1"><a class="header-anchor" href="#bean-引用"><span>Bean 引用</span></a></h3><p>如果已经使用bean解析器配置了评估上下文，则可以使用@符号从表达式中查找bean。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">StandardEvaluationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardEvaluationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
context<span class="token punctuation">.</span><span class="token function">setBeanResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyBeanResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// This will end up calling resolve(context,&quot;foo&quot;) on MyBeanResolver during evaluation</span>
<span class="token class-name">Object</span> bean <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;@foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了访问工厂bean本身，bean名称应该以一个＆符号为前缀。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">StandardEvaluationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardEvaluationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
context<span class="token punctuation">.</span><span class="token function">setBeanResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyBeanResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// This will end up calling resolve(context,&quot;&amp;foo&quot;) on MyBeanResolver during evaluation</span>
<span class="token class-name">Object</span> bean <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三元运算-if-then-else" tabindex="-1"><a class="header-anchor" href="#三元运算-if-then-else"><span>三元运算(If-Then-Else)</span></a></h3><p>您可以使用三元运算符来执行表达式中的if-then-else条件逻辑。 一个最小的例子是：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> falseString <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>
        <span class="token string">&quot;false ? &#39;trueExp&#39; : &#39;falseExp&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，布尔值false将返回字符串值’falseExp&#39;。 下面显示了一个更现实的例子。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>societyContext<span class="token punctuation">,</span> <span class="token string">&quot;IEEE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
societyContext<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token string">&quot;queryName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Nikola Tesla&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

expression <span class="token operator">=</span> <span class="token string">&quot;isMember(#queryName)? #queryName + &#39; is a member of the &#39; &quot;</span> <span class="token operator">+</span>
        <span class="token string">&quot;+ Name + &#39; Society&#39; : #queryName + &#39; is not a member of the &#39; + Name + &#39; Society&#39;&quot;</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> queryResultString <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>societyContext<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// queryResultString = &quot;Nikola Tesla is a member of the IEEE Society&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另请参阅下一节的Elvis运算符，以获取三元运算符的更简短的语法。</p><h3 id="the-elvis-运算" tabindex="-1"><a class="header-anchor" href="#the-elvis-运算"><span>The Elvis 运算</span></a></h3><p>Elvis运算符缩短了三元运算符语法，并用于Groovy语言。 使用三元运算符语法，通常必须重复两次变量，例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;Elvis Presley&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> displayName <span class="token operator">=</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> name <span class="token operator">:</span> <span class="token string">&quot;Unknown&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>相反，你可以使用Elvis操作符。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> name <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;name?:&#39;Unknown&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#39;Unknown&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是一个更复杂的例子</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">EvaluationContext</span> context <span class="token operator">=</span> <span class="token class-name">SimpleEvaluationContext</span><span class="token punctuation">.</span><span class="token function">forReadOnlyDataBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Inventor</span> tesla <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inventor</span><span class="token punctuation">(</span><span class="token string">&quot;Nikola Tesla&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Serbian&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> name <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;Name?:&#39;Elvis Presley&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> tesla<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Nikola Tesla</span>

tesla<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
name <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;Name?:&#39;Elvis Presley&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> tesla<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安全导航运算符" tabindex="-1"><a class="header-anchor" href="#安全导航运算符"><span>安全导航运算符</span></a></h3><p>安全导航运算符用于避免NullPointerException，并且来自Groovy语言。 通常，当您访问对象时，可能需要在访问对象的方法或属性之前验证它是否为空。 为了避免这种情况，安全导航运算符将简单地返回null而不是抛出异常。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">EvaluationContext</span> context <span class="token operator">=</span> <span class="token class-name">SimpleEvaluationContext</span><span class="token punctuation">.</span><span class="token function">forReadOnlyDataBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Inventor</span> tesla <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inventor</span><span class="token punctuation">(</span><span class="token string">&quot;Nikola Tesla&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Serbian&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
tesla<span class="token punctuation">.</span><span class="token function">setPlaceOfBirth</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PlaceOfBirth</span><span class="token punctuation">(</span><span class="token string">&quot;Smiljan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> city <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;PlaceOfBirth?.City&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> tesla<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Smiljan</span>

tesla<span class="token punctuation">.</span><span class="token function">setPlaceOfBirth</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
city <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;PlaceOfBirth?.City&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> tesla<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// null - does not throw NullPointerException!!!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="集合查询" tabindex="-1"><a class="header-anchor" href="#集合查询"><span>集合查询</span></a></h3><p>选择是一种强大的表达式语言功能，允许您通过从条目中进行选择来将某个源集合转换为另一个源集合。 选择使用语法<code>.?[selectionExpression]</code>。 这将过滤集合并返回包含原始元素子集的新集合。 例如，选择可以让我们轻松获得塞尔维亚发明者名单：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Inventor</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Inventor</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>
        <span class="token string">&quot;Members.?[Nationality == &#39;Serbian&#39;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>societyContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在列表和Map上都可以进行选择。 在前一种情况下，针对每个单独列表元素评估选择标准。Map针对每个映射条目(Java类型Map.Entry的对象)评估选择标准。 Map条目将其键和值作为用于选择的属性进行访问。</p><p>这个表达式将返回一个新的Map，该Map由入口值小于27的原始Map的那些元素组成。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span> newMap <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;map.?[value&lt;27]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>除了返回所有选定的元素之外，还可以检索第一个或最后一个值。 要获得匹配选择的第一个条目，语法是：<code>^[selectionExpression]</code>，同时获得最后一个匹配选择的语法是<code>$[selectionExpression]</code>。</p><h3 id="集合投影" tabindex="-1"><a class="header-anchor" href="#集合投影"><span>集合投影</span></a></h3><p>投影允许集合驱动子表达式的评估，结果是一个新的集合。 投影的语法是<code>.![projectionExpression]</code>。 举例来说，最容易理解的是，假设我们有一个发明者名单，但想要他们出生的城市名单。 实际上，我们想要为发明人列表中的每个条目评估“placeOfBirth.city”。 使用投影：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// returns [&#39;Smiljan&#39;, &#39;Idvor&#39; ]</span>
<span class="token class-name">List</span> placesOfBirth <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;Members.![placeOfBirth.city]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Map也可以用于驱动投影，在这种情况下，投影表达式将针对Map中的每个条目进行评估(表示为Java Map.Entry)。 在Map上投影的结果是一个列表，其中包含对每个Map项的投影表达式的评估。</p><h3 id="表达式模板" tabindex="-1"><a class="header-anchor" href="#表达式模板"><span>表达式模板</span></a></h3><p>表达式模板允许将文本文本与一个或多个评估块混合。 每个评估块都使用可定义的前缀和后缀字符进行分隔，常见的选择是使用<code>＃{}</code>作为分隔符。 例如:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> randomPhrase <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>
        <span class="token string">&quot;random number is #{T(java.lang.Math).random()}&quot;</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">TemplateParserContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// evaluates to &quot;random number is 0.7038186818312008&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串通过将文本字符串’random number is’与评估表达式的结果进行评估，在这种情况下是调用random()方法的结果。 方法parseExpression()的第二个参数的类型是ParserContext。 ParserContext接口用于影响表达式如何解析以支持表达式模板功能。 TemplateParserContext的定义如下所示。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TemplateParserContext</span> <span class="token keyword">implements</span> <span class="token class-name">ParserContext</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getExpressionPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;#{&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getExpressionSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;}&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,169),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","spring-表达式.html.vue"]]),d=JSON.parse('{"path":"/Spring/spring-%E8%A1%A8%E8%BE%BE%E5%BC%8F.html","title":"Spring 表达式","lang":"zh-CN","frontmatter":{"title":"Spring 表达式","date":"2024-04-27T00:00:00.000Z","categories":["Spring"],"tags":["Spring","el"],"description":"Spring Expression Language(简称SpEL)是一种强大的表达式语言，支持在运行时查询和操作对象图。语言语法类似于Unified EL，但提供了额外的功能，特别是方法调用和基本的字符串模板功能。 虽然还有其他几种Java表达式语言可用 - OGNL，MVEL和JBoss EL等。创建Spring表达式语言是为了向Spring社区提...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/Spring/spring-%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"Spring 表达式"}],["meta",{"property":"og:description","content":"Spring Expression Language(简称SpEL)是一种强大的表达式语言，支持在运行时查询和操作对象图。语言语法类似于Unified EL，但提供了额外的功能，特别是方法调用和基本的字符串模板功能。 虽然还有其他几种Java表达式语言可用 - OGNL，MVEL和JBoss EL等。创建Spring表达式语言是为了向Spring社区提..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-01T10:32:37.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"el"}],["meta",{"property":"article:published_time","content":"2024-04-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-01T10:32:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring 表达式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-01T10:32:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"Evaluation","slug":"evaluation","link":"#evaluation","children":[{"level":3,"title":"EvaluationContext","slug":"evaluationcontext","link":"#evaluationcontext","children":[]},{"level":3,"title":"类型转换","slug":"类型转换","link":"#类型转换","children":[]},{"level":3,"title":"Parser配置","slug":"parser配置","link":"#parser配置","children":[]},{"level":3,"title":"SpEL编译","slug":"spel编译","link":"#spel编译","children":[]}]},{"level":2,"title":"bean定义中使用表达式","slug":"bean定义中使用表达式","link":"#bean定义中使用表达式","children":[{"level":3,"title":"XML配置","slug":"xml配置","link":"#xml配置","children":[]},{"level":3,"title":"注解配置","slug":"注解配置","link":"#注解配置","children":[]}]},{"level":2,"title":"语言参考","slug":"语言参考","link":"#语言参考","children":[{"level":3,"title":"文字表达式","slug":"文字表达式","link":"#文字表达式","children":[]},{"level":3,"title":"Properties, Arrays, Lists, Maps, Indexers","slug":"properties-arrays-lists-maps-indexers","link":"#properties-arrays-lists-maps-indexers","children":[]},{"level":3,"title":"内联lists","slug":"内联lists","link":"#内联lists","children":[]},{"level":3,"title":"内联Maps","slug":"内联maps","link":"#内联maps","children":[]},{"level":3,"title":"Array构造","slug":"array构造","link":"#array构造","children":[]},{"level":3,"title":"方法调用","slug":"方法调用","link":"#方法调用","children":[]},{"level":3,"title":"运算符","slug":"运算符","link":"#运算符","children":[]},{"level":3,"title":"赋值","slug":"赋值","link":"#赋值","children":[]},{"level":3,"title":"类型","slug":"类型","link":"#类型","children":[]},{"level":3,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[]},{"level":3,"title":"变量","slug":"变量","link":"#变量","children":[]},{"level":3,"title":"函数","slug":"函数","link":"#函数","children":[]},{"level":3,"title":"Bean 引用","slug":"bean-引用","link":"#bean-引用","children":[]},{"level":3,"title":"三元运算(If-Then-Else)","slug":"三元运算-if-then-else","link":"#三元运算-if-then-else","children":[]},{"level":3,"title":"The Elvis 运算","slug":"the-elvis-运算","link":"#the-elvis-运算","children":[]},{"level":3,"title":"安全导航运算符","slug":"安全导航运算符","link":"#安全导航运算符","children":[]},{"level":3,"title":"集合查询","slug":"集合查询","link":"#集合查询","children":[]},{"level":3,"title":"集合投影","slug":"集合投影","link":"#集合投影","children":[]},{"level":3,"title":"表达式模板","slug":"表达式模板","link":"#表达式模板","children":[]}]}],"git":{"createdTime":1714556533000,"updatedTime":1714559557000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":2}]},"readingTime":{"minutes":21.62,"words":6486},"filePathRelative":"Spring/spring-表达式.md","localizedDate":"2024年4月27日","excerpt":"<p>Spring Expression Language(简称SpEL)是一种强大的表达式语言，支持在运行时查询和操作对象图。语言语法类似于Unified EL，但提供了额外的功能，特别是方法调用和基本的字符串模板功能。</p>\\n<p>虽然还有其他几种Java表达式语言可用 - OGNL，MVEL和JBoss EL等。创建Spring表达式语言是为了向Spring社区提供单一支持良好的表达式语言，可用于Spring产品。</p>\\n<p>虽然SpEL是Spring表达式evaluation的基础，但它并不直接与Spring结合，可以独立使用。为了自成一体，本章中的许多示例都使用SpEL，就好像它是独立的表达式语言一样。这需要创建一些引导基础结构类，比如parser。大多数Spring用户不需要处理这个基础设施，只需要创建表达式字符串进行evaluation。这种典型用法的一个例子是将SpEL集成到创建XML或基于注释的bean定义中。</p>","autoDesc":true}');export{k as comp,d as data};
