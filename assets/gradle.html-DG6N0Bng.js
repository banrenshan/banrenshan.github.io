import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as p,c as o,b as n,d as a,e,a as l}from"./app-JRZgQj53.js";const c="/assets/gradle-basic-1-KW9bbNMt.png",r="/assets/wrapper-workflow-XtKGA9XA.png",d="/assets/author-gradle-1-Bd8vYCez.png",u="/assets/build-lifecycle-example-xPR1-YnS.png",v="/assets/author-gradle-7-C2o_iT03.png",g={},m=l('<h1 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h1><p><code>Gradle</code>根据构建脚本中的信息自动构建、测试和部署软件。</p><figure><img src="'+c+`" alt="gradle basic 1" tabindex="0" loading="lazy"><figcaption>gradle basic 1</figcaption></figure><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h2><h3 id="project" tabindex="-1"><a class="header-anchor" href="#project"><span>Project</span></a></h3><p>Gradle <code>project </code>是一个可以构建的软件，例如应用程序或库。单个项目生成包括一个称为根项目的单个项目。多项目构建包括一个根项目和任意数量的子项目。</p><h3 id="构建脚本" tabindex="-1"><a class="header-anchor" href="#构建脚本"><span>构建脚本</span></a></h3><p>构建脚本详细说明了构建项目的步骤。每个项目都可以包括一个或多个构建脚本。</p><h3 id="依赖管理" tabindex="-1"><a class="header-anchor" href="#依赖管理"><span>依赖管理</span></a></h3><p>依赖关系管理是一种用于声明和解析项目所需外部资源的自动化技术。每个项目通常包括许多外部依赖项，Gradle将在构建过程中解决这些依赖项。</p><h3 id="任务" tabindex="-1"><a class="header-anchor" href="#任务"><span>任务</span></a></h3><p>任务是一个基本的工作单元，例如编译代码或运行测试。每个项目都包含一个或多个在构建脚本或插件中定义的任务。</p><h3 id="插件" tabindex="-1"><a class="header-anchor" href="#插件"><span>插件</span></a></h3><p>插件用于扩展Gradle的功能，并可选择为项目贡献任务。</p><h2 id="gradle-项目结构" tabindex="-1"><a class="header-anchor" href="#gradle-项目结构"><span>Gradle 项目结构</span></a></h2><p>项目根目录中存在<code>gradlew</code>和<code>gradlew.bat</code>文件，这清楚地表明使用了Gradle。Gradle项目将类似于以下内容：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>project
├── gradle <span class="token comment"># 存储 wrapper 文件                             </span>
│   ├── libs.versions.toml   <span class="token comment"># 用于依赖项管理的catalog            </span>
│   └── wrapper
│       ├── gradle-wrapper.jar
│       └── gradle-wrapper.properties
├── gradlew         <span class="token comment">#Gradle wrapper scripts                    </span>
├── gradlew.bat     <span class="token comment">#Gradle wrapper scripts                    </span>
├── settings.gradle<span class="token punctuation">(</span>.kts<span class="token punctuation">)</span>        <span class="token comment"># 设置文件以定义根项目名称和子项目       </span>
├── subproject-a
│   ├── build.gradle<span class="token punctuation">(</span>.kts<span class="token punctuation">)</span> <span class="token comment"># 构建脚本             </span>
│   └── src                             
└── subproject-b
    ├── build.gradle<span class="token punctuation">(</span>.kts<span class="token punctuation">)</span>              
    └── src   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gradlewrapper" tabindex="-1"><a class="header-anchor" href="#gradlewrapper"><span>GradleWrapper</span></a></h2><p>执行任何Gradle构建的推荐方法是使用<code>GradleWrapper</code>。Wrapper脚本调用一个已声明的Gradle版本，必要时可以提前下载。</p><figure><img src="`+r+`" alt="wrapper workflow" tabindex="0" loading="lazy"><figcaption>wrapper workflow</figcaption></figure><p>Wrapper 入口 是 <code>gradlew</code>或<code>gradlew.bat</code>。Wrapper提供了以下好处：</p><ul><li>在给定的Gradle版本上标准化项目。</li><li>为不同的用户提供相同的Gradle版本。</li><li>为不同的执行环境（IDE、CI服务器…）提供Gradle版本。</li></ul><p>始终建议使用Wrapper执行构建，以确保构建的可靠、可控和标准化执行。根据操作系统的不同，可以运行<code>gradlew</code>或<code>gradlew.bat</code>而不是<code>gradle</code>命令。</p><p>典型的Gradle调用：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ gradle build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要在Linux或OSX计算机上运行Wrapper，请执行以下操作：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ ./gradlew build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要在Windows PowerShell上运行Wrapper，请执行以下操作：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ .<span class="token punctuation">\\</span>gradlew.bat build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该命令在Wrapper所在的同一目录中运行。如果要在其他目录中运行该命令，则必须提供Wrapper的相对路径：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token punctuation">..</span>/gradlew build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以下控制台输出演示了在基于Java的项目中，在Windows计算机上的命令提示符（cmd）中使用Wrapper：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ gradlew.bat build

Downloading https://services.gradle.org/distributions/gradle-5.0-all.zip
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.
Unzipping C:<span class="token punctuation">\\</span>Documents and Settings<span class="token punctuation">\\</span>Claudia<span class="token punctuation">\\</span>.gradle<span class="token punctuation">\\</span>wrapper<span class="token punctuation">\\</span>dists<span class="token punctuation">\\</span>gradle-5.0-all<span class="token punctuation">\\</span>ac27o8rbd0ic8ih41or9l32mv<span class="token punctuation">\\</span>gradle-5.0-all.zip to C:<span class="token punctuation">\\</span>Documents and Settings<span class="token punctuation">\\</span>Claudia<span class="token punctuation">\\</span>.gradle<span class="token punctuation">\\</span>wrapper<span class="token punctuation">\\</span>dists<span class="token punctuation">\\</span>gradle-5.0-al<span class="token punctuation">\\</span>ac27o8rbd0ic8ih41or9l32mv
Set executable permissions for: C:<span class="token punctuation">\\</span>Documents and Settings<span class="token punctuation">\\</span>Claudia<span class="token punctuation">\\</span>.gradle<span class="token punctuation">\\</span>wrapper<span class="token punctuation">\\</span>dists<span class="token punctuation">\\</span>gradle-5.0-all<span class="token punctuation">\\</span>ac27o8rbd0ic8ih41or9l32mv<span class="token punctuation">\\</span>gradle-5.0<span class="token punctuation">\\</span>bin<span class="token punctuation">\\</span>gradle

BUILD SUCCESSFUL <span class="token keyword">in</span> 12s
<span class="token number">1</span> actionable task: <span class="token number">1</span> executed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="目录结构" tabindex="-1"><a class="header-anchor" href="#目录结构"><span>目录结构</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>├── caches    <span class="token comment"># 全局缓存目录（用于非特定于项目的所有内容）。              </span>
│   ├── <span class="token number">4.8</span>   <span class="token comment">#特定于版本的缓存（例如，支持增量构建）。                  </span>
│   ├── <span class="token number">4.9</span>                     
│   ├── ⋮
│   ├── jars-3   <span class="token comment">#共享缓存（例如，用于依赖项的工件）。               </span>
│   └── modules-2  <span class="token comment">#共享缓存（例如，用于依赖项的工件）。             </span>
├── daemon <span class="token comment">#Gradle守护程序的注册表和日志。</span>
│   ├── ⋮
│   ├── <span class="token number">4.8</span>
│   └── <span class="token number">4.9</span>
├── init.d   <span class="token comment"># 全局初始化脚本。               </span>
│   └── my-setup.gradle
├── jdks     <span class="token comment">#通过工具链下载的JDK支持。               </span>
│   ├── ⋮
│   └── jdk-14.0.2+12
├── wrapper <span class="token comment">#GradleWrapper下载的分发内容。</span>
│   └── dists                   
│       ├── ⋮
│       ├── gradle-4.8-bin
│       ├── gradle-4.9-all
│       └── gradle-4.9-bin
└── gradle.properties  <span class="token comment">#全局配置属性。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下， Gradle User Home（<code>~/.Gradle</code>或<code>C:\\Users\\&lt;USERNAME&gt;\\.Gradle</code>）存储全局配置属性、初始化脚本、缓存和日志文件， 即上面的目录信息。可以使用环境变量 <code>GRADLE_USER_HOME </code>修改。</p><h2 id="命令格式" tabindex="-1"><a class="header-anchor" href="#命令格式"><span>命令格式</span></a></h2><p>在命令行上执行Gradle符合以下结构：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gradle <span class="token punctuation">[</span>taskName<span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token punctuation">[</span>--option-name<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>允许在任务名称之前和之后使用选项:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gradle <span class="token punctuation">[</span>--option-name<span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token punctuation">[</span>taskName<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果指定了多个任务，则应使用空格将它们分隔开:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gradle <span class="token punctuation">[</span>taskName1 taskName2<span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token punctuation">[</span>--option-name<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以指定选项值。建议使用<code>=</code>,也可以不指定<code>=</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gradle <span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token parameter variable">--console</span><span class="token operator">=</span>plain
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启用功能的长格式选项，反例是添加 <code>--no </code> ，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gradle <span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span> --build-cache
gradle <span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span> --no-build-cache
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>许多长格式的选项都有相应的短格式。以下内容相当：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gradle <span class="token parameter variable">--help</span>
gradle <span class="token parameter variable">-h</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="settings-文件" tabindex="-1"><a class="header-anchor" href="#settings-文件"><span><em>settings</em> 文件</span></a></h2><p>设置文件的主要用途是将子项目添加到构建中。Gradle支持单项目和多项目构建。</p><ul><li>对于单个项目生成，设置文件是可选的。</li><li>对于多项目生成，设置文件是必需的，并声明所有子项目。</li></ul><p>设置文件是一个脚本。它要么是用Groovy编写的<code>settings.gradle</code>文件，要么是Kotlin中的<code>settings.gradle.kts</code>文件。设置文件通常位于项目的根目录中。</p><p>让我们看一个例子：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>rootProject.name <span class="token operator">=</span> <span class="token string">&#39;root-project&#39;</span>   <span class="token comment"># 项目名称</span>

include<span class="token punctuation">(</span><span class="token string">&#39;sub-project-a&#39;</span><span class="token punctuation">)</span>            <span class="token comment"># 添加子项目</span>
include<span class="token punctuation">(</span><span class="token string">&#39;sub-project-b&#39;</span><span class="token punctuation">)</span>
include<span class="token punctuation">(</span><span class="token string">&#39;sub-project-c&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="构建脚本-1" tabindex="-1"><a class="header-anchor" href="#构建脚本-1"><span>构建脚本</span></a></h2><p>每个Gradle构建都至少包含一个构建脚本。在构建文件中，可以添加两种类型的依赖项：</p><ul><li>Gradle和构建脚本所依赖的库或插件。</li><li>项目源（即源代码）所依赖的库。</li></ul><p>构建脚本要么是用Groovy编写的<code>build.gradle</code>文件，要么是Kotlin中的<code>build.gradle.kts</code>文件。</p><h2 id="依赖管理-1" tabindex="-1"><a class="header-anchor" href="#依赖管理-1"><span>依赖管理</span></a></h2><p>依赖关系管理是一种用于声明和解析项目所需外部资源的自动化技术。构建脚本定义了构建可能需要的外部依赖。依赖关系是指支持构建项目的JAR、插件、库或源代码。</p><h3 id="version-catalog" tabindex="-1"><a class="header-anchor" href="#version-catalog"><span>Version catalog</span></a></h3><p>版本目录提供了一种将依赖项声明集中在<code>libs.versions.toml</code>文件中的方法。 catalog 使子项目之间的依赖关系和版本配置共享变得简单。它还允许团队在大型项目中强制执行库和插件的版本。</p><p>catalog 通常包含四个部分：</p><ul><li>[versions]来声明插件和库将引用的版本号。</li><li>[libraries]定义构建文件中使用的库。</li><li>[bundle]来定义一组依赖关系。</li><li>[plugins]定义插件。</li></ul><div class="language-toml line-numbers-mode" data-ext="toml" data-title="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">versions</span><span class="token punctuation">]</span>
<span class="token key property">androidGradlePlugin</span> <span class="token punctuation">=</span> <span class="token string">&quot;7.4.1&quot;</span>
<span class="token key property">mockito</span> <span class="token punctuation">=</span> <span class="token string">&quot;2.16.0&quot;</span>

<span class="token punctuation">[</span><span class="token table class-name">libraries</span><span class="token punctuation">]</span>
<span class="token key property">googleMaterial</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">group</span> <span class="token punctuation">=</span> <span class="token string">&quot;com.google.android.material&quot;</span><span class="token punctuation">,</span> <span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">&quot;material&quot;</span><span class="token punctuation">,</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;1.1.0-alpha05&quot;</span> <span class="token punctuation">}</span>
<span class="token key property">mockitoCore</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">module</span> <span class="token punctuation">=</span> <span class="token string">&quot;org.mockito:mockito-core&quot;</span><span class="token punctuation">,</span> <span class="token key property">version.ref</span> <span class="token punctuation">=</span> <span class="token string">&quot;mockito&quot;</span> <span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token table class-name">plugins</span><span class="token punctuation">]</span>
<span class="token key property">androidApplication</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">id</span> <span class="token punctuation">=</span> <span class="token string">&quot;com.android.application&quot;</span><span class="token punctuation">,</span> <span class="token key property">version.ref</span> <span class="token punctuation">=</span> <span class="token string">&quot;androidGradlePlugin&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该文件位于<code>gradle/libs.versions.toml</code>目录中，因此gradle和IDE可以自动使用该文件。catalog应检入源代码管理。</p><p>若要将依赖项添加到项目中，请在build.gradle（.kts）文件的依赖项块中指定一个依赖项。以下build.gradle.kts文件使用上面的<code>catalog</code>向项目添加了一个插件和两个依赖项：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>plugins <span class="token punctuation">{</span>
   <span class="token function">alias</span><span class="token punctuation">(</span>libs<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>androidApplication<span class="token punctuation">)</span>  
<span class="token punctuation">}</span>

dependencies <span class="token punctuation">{</span>
    <span class="token comment">// Dependency on a remote binary to compile and run the code</span>
    <span class="token function">implementation</span><span class="token punctuation">(</span>libs<span class="token punctuation">.</span>googleMaterial<span class="token punctuation">)</span>    

    <span class="token comment">// Dependency on a remote binary to compile and run the test code</span>
    <span class="token function">testImplementation</span><span class="token punctuation">(</span>libs<span class="token punctuation">.</span>mockitoCore<span class="token punctuation">)</span>   
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="插件-1" tabindex="-1"><a class="header-anchor" href="#插件-1"><span>插件</span></a></h2><p>Gradle是建立在插件系统上。Gradle本身主要由基础设施组成，例如复杂的依赖关系解析引擎。它的其余功能来自插件。插件是一种为Gradle构建系统提供额外功能的软件。</p><p>插件可以应用于Gradle构建脚本，以添加新任务、配置或其他与构建相关的功能：</p><ul><li><strong>The Java Library Plugin -</strong> <code>java-library</code>： 用于定义和构建Java库。它使用compileJava任务编译Java源代码，使用Javadoc任务生成Javadoc，并使用JAR任务将编译后的类打包到JAR文件中。</li><li>The Google Services Gradle Plugin - <code>com.google.gms:google-services</code>：使用名为<code>googleServices{}</code>的配置块和名为<code>generateReleaseAssets</code>的任务，在Android应用程序中启用Google API和<code>Firebase</code>服务。</li><li>The Gradle Bintray Plugin - <code>com.jfrog.bintray</code>：允许您通过使用<code>bintray{}</code>块配置插件，将工件发布到<code>Bintray</code>。</li></ul><p>插件有三种分发方式：</p><ul><li>核心插件-Gradle开发并维护一组核心插件。</li><li>社区插件-Gradle的社区通过Gradle插件门户共享插件。</li><li>本地插件-Gradle允许用户使用API创建自定义插件。</li></ul><p>将插件应用到项目可以使插件扩展项目的功能。您可以使用插件id（全局唯一的标识符/名称）和版本在构建脚本中应用插件：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>plugins <span class="token punctuation">{</span>
    id «plugin id» version «plugin version»
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="核心插件" tabindex="-1"><a class="header-anchor" href="#核心插件"><span>核心插件</span></a></h3><p>Gradle Core插件是Gradle发行版中包含的一组插件。这些插件为构建和管理项目提供了基本功能。核心插件的一些例子包括：</p><ul><li>java：为构建java项目提供支持。</li><li>groovy：增加了对编译和测试groovy源文件的支持。</li><li>ear：增加了对为企业应用程序构建ear文件的支持。</li></ul><p>核心插件的独特之处在于，当应用于构建脚本时，它们提供了简短的名称，例如核心<code>JavaPlugin</code>的<code>java</code>。它们也不需要版本。要将java插件应用于项目，请执行以下操作：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>plugins <span class="token punctuation">{</span>
    <span class="token function">id</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;java&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="社区插件" tabindex="-1"><a class="header-anchor" href="#社区插件"><span>社区插件</span></a></h3><p>社区插件是由Gradle社区开发的插件，而不是核心Gradle发行版的一部分。这些插件提供了可能特定于某些用例或技术的附加功能。 Spring Boot Gradle插件打包可执行的JAR或WAR文件，并运行Spring Boot Java应用程序。</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>plugins <span class="token punctuation">{</span>
    <span class="token function">id</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;org.springframework.boot&quot;</span></span><span class="token punctuation">)</span> version <span class="token interpolation-string"><span class="token string">&quot;3.1.5&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="本地插件" tabindex="-1"><a class="header-anchor" href="#本地插件"><span>本地插件</span></a></h3><p>自定义或本地插件是在特定项目或组织中开发和使用的。这些插件不是公开共享的，而是根据项目或组织的特定需求量身定制的。 本地插件可以封装通用的构建逻辑，提供与内部系统或工具的集成，或者将复杂的功能抽象为可重用的组件。</p><p>Gradle为用户提供了使用API开发自定义插件的能力。要创建自己的插件，您通常会遵循以下步骤：</p><p>1.定义插件类：创建一个新的类来实现<code>plugin&lt;Project&gt;</code>接口。</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token comment">// Define a &#39;HelloPlugin&#39; plugin</span>
<span class="token keyword">class</span> HelloPlugin <span class="token operator">:</span> Plugin<span class="token operator">&lt;</span>Project<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">apply</span><span class="token punctuation">(</span>project<span class="token operator">:</span> Project<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Define the &#39;hello&#39; task</span>
        <span class="token keyword">val</span> helloTask <span class="token operator">=</span> project<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            doLast <span class="token punctuation">{</span>
                <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello, Gradle!&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.构建并选择性地发布您的插件：生成一个包含插件代码的JAR文件，并选择性地将此JAR发布到存储库（本地或远程）以用于其他项目。</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token comment">// Publish the plugin</span>
plugins <span class="token punctuation">{</span>
    \`maven<span class="token operator">-</span>publish\`
<span class="token punctuation">}</span>

publishing <span class="token punctuation">{</span>
    publications <span class="token punctuation">{</span>
        create<span class="token operator">&lt;</span>MavenPublication<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;mavenJava&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">from</span><span class="token punctuation">(</span>components<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;java&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    repositories <span class="token punctuation">{</span>
        <span class="token function">mavenLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.应用你的插件：当你想使用插件时，在构建文件的plugins{}\`块中包括插件ID和版本。</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="token comment">// Apply the plugin</span>
plugins <span class="token punctuation">{</span>
    <span class="token function">id</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;com.example.hello&quot;</span></span><span class="token punctuation">)</span> version <span class="token interpolation-string"><span class="token string">&quot;1.0&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="依赖声明" tabindex="-1"><a class="header-anchor" href="#依赖声明"><span>依赖声明</span></a></h2><p><code>Configuration</code>: 一个命名的依赖项集合，为特定的目标（如编译或运行模块）组织在一起。主要的类别：</p><ul><li><p>compileOnly ：用于编译，但不在运行时使用</p></li><li><p>implementation ：用于编译和运行时</p></li><li><p>runtimeOnly ： 用于运行时</p></li><li><p>testCompileOnly</p></li><li><p>testImplementation</p></li><li><p>testRuntimeOnly</p></li><li><p>api ：非标准，需要 java-library 插件支持</p><blockquote><p>JAVA库主要作为依赖提供给其他项目，其本身也会依赖其他JAVA库。那么其依赖项可以暴漏出来给消费者使用吗？为此，JAVA库插件提供了 <code>api</code> Configuration。我们来看下面示例：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>dependencies <span class="token punctuation">{</span>
    api <span class="token string">&#39;org.apache.httpcomponents:httpclient:4.5.7&#39;</span>
    implementation <span class="token string">&#39;org.apache.commons:commons-lang3:3.5&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>api配置中的依赖项将被传递地暴露给库的使用者，因此将出现在使用者的编译类路径上。implementation 则不会。</p></blockquote></li><li><p>compileOnlyApi ：非标准，需要 java-library 插件支持</p></li></ul><h2 id="java相关的插件" tabindex="-1"><a class="header-anchor" href="#java相关的插件"><span>JAVA相关的插件</span></a></h2>`,98),k=n("li",null,[n("p",null,"Java插件支持 Java编译 、测试和build功能。它是许多其他JVM语言Gradle插件的基础。")],-1),b=n("li",null,[n("p",null,"Java库插件通过提供有关Java库的特定知识来扩展Java插件（Java）的功能。例如API公开功能。")],-1),h={href:"https://docs.gradle.org/current/userguide/distribution_plugin.html#distribution_plugin",target:"_blank",rel:"noopener noreferrer"},f=l(`<blockquote><p>Java平台插件提供了为Java生态系统声明平台的功能。一个平台可以用于不同的目的：</p><ul><li>一起发布的模块的描述（例如，共享同一版本）</li><li>异构库的一组推荐版本。一个典型的例子包括Spring Boot BOM</li><li>在子项目之间共享一组依赖关系版本</li></ul><p>平台是一种特殊的软件组件，不包含任何源码：它只用于引用其他库，组织依赖关系。</p></blockquote><h2 id="增量构建" tabindex="-1"><a class="header-anchor" href="#增量构建"><span>增量构建</span></a></h2><p>增量构建是一种避免了任务的重复运行。如果这些任务只会重新产生相同的输出，那么重新执行这些任务是不必要的。</p><p>为了使增量构建发挥作用，任务必须定义其输入和输出。Gradle将确定输入或输出在构建时是否发生了更改。如果它们发生了更改，Gradle将执行该任务。否则，它将跳过执行。</p><p>增量构建始终处于启用状态，查看它们的最佳方式是打开详细(<em>verbose</em> )模式。在详细模式下，每个任务状态都会在构建过程中进行标记：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ ./gradlew compileJava <span class="token parameter variable">--console</span><span class="token operator">=</span>verbose

<span class="token operator">&gt;</span> Task :buildSrc:generateExternalPluginSpecBuilders UP-TO-DATE
<span class="token operator">&gt;</span> Task :buildSrc:extractPrecompiledScriptPluginPlugins UP-TO-DATE
<span class="token operator">&gt;</span> Task :buildSrc:compilePluginsBlocks UP-TO-DATE
<span class="token operator">&gt;</span> Task :buildSrc:generatePrecompiledScriptPluginAccessors UP-TO-DATE
<span class="token operator">&gt;</span> Task :buildSrc:generateScriptPluginAdapters UP-TO-DATE
<span class="token operator">&gt;</span> Task :buildSrc:compileKotlin UP-TO-DATE
<span class="token operator">&gt;</span> Task :buildSrc:compileJava NO-SOURCE
<span class="token operator">&gt;</span> Task :buildSrc:compileGroovy NO-SOURCE
<span class="token operator">&gt;</span> Task :buildSrc:pluginDescriptors UP-TO-DATE
<span class="token operator">&gt;</span> Task :buildSrc:processResources UP-TO-DATE
<span class="token operator">&gt;</span> Task :buildSrc:classes UP-TO-DATE
<span class="token operator">&gt;</span> Task :buildSrc:jar UP-TO-DATE
<span class="token operator">&gt;</span> Task :list:compileJava UP-TO-DATE
<span class="token operator">&gt;</span> Task :utilities:compileJava UP-TO-DATE
<span class="token operator">&gt;</span> Task :app:compileJava UP-TO-DATE

BUILD SUCCESSFUL <span class="token keyword">in</span> 374ms
<span class="token number">12</span> actionable tasks: <span class="token number">12</span> up-to-date
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当您运行以前执行过且没有更改的任务时，会在该任务旁边打印<code>UP-TO-DATE</code>。</p><p>增量构建是一个很好的优化，有助于避免已经完成的工作。如果开发人员连续更改单个文件，则可能不需要重新生成项目中的所有其他文件。然而，当同一个开发人员切换到上周创建的新分支时，会发生什么？即使开发人员正在构建以前构建过的东西，文件也会重新构建。</p><p>这就是构建缓存的作用所在。生成缓存存储以前的生成结果，并在需要时进行恢复。它防止了执行耗时且昂贵的过程所带来的冗余工作和成本。 当构建缓存已用于重新填充本地目录时，任务标记为<code>FROM-CACHE</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ ./gradlew compileJava --build-cache

<span class="token operator">&gt;</span> Task :buildSrc:generateExternalPluginSpecBuilders UP-TO-DATE
<span class="token operator">&gt;</span> Task :buildSrc:extractPrecompiledScriptPluginPlugins UP-TO-DATE
<span class="token operator">&gt;</span> Task :buildSrc:compilePluginsBlocks UP-TO-DATE
<span class="token operator">&gt;</span> Task :buildSrc:generatePrecompiledScriptPluginAccessors UP-TO-DATE
<span class="token operator">&gt;</span> Task :buildSrc:generateScriptPluginAdapters UP-TO-DATE
<span class="token operator">&gt;</span> Task :buildSrc:compileKotlin UP-TO-DATE
<span class="token operator">&gt;</span> Task :buildSrc:compileJava NO-SOURCE
<span class="token operator">&gt;</span> Task :buildSrc:compileGroovy NO-SOURCE
<span class="token operator">&gt;</span> Task :buildSrc:pluginDescriptors UP-TO-DATE
<span class="token operator">&gt;</span> Task :buildSrc:processResources UP-TO-DATE
<span class="token operator">&gt;</span> Task :buildSrc:classes UP-TO-DATE
<span class="token operator">&gt;</span> Task :buildSrc:jar UP-TO-DATE
<span class="token operator">&gt;</span> Task :list:compileJava FROM-CACHE
<span class="token operator">&gt;</span> Task :utilities:compileJava FROM-CACHE
<span class="token operator">&gt;</span> Task :app:compileJava FROM-CACHE

BUILD SUCCESSFUL <span class="token keyword">in</span> 364ms
<span class="token number">12</span> actionable tasks: <span class="token number">3</span> from cache, <span class="token number">9</span> up-to-date
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦本地目录被重新填充，下一次执行将把任务标记为UP-TO-DATE，而不是FROM-CACHE。构建缓存允许您跨团队共享和重用未更改的构建和测试输出。这加快了本地和CI构建的速度。</p><h2 id="持续构建" tabindex="-1"><a class="header-anchor" href="#持续构建"><span>持续构建</span></a></h2><p>Continuous Build允许您在文件输入更改时自动重新执行请求的任务。您可以使用<code>-t</code>或<code>--continuous</code>命令行选项在此模式下执行构建。</p><p>例如，您可以连续运行测试任务和所有相关任务，方法是运行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ gradle <span class="token builtin class-name">test</span> <span class="token parameter variable">--continuous</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Gradle的行为就像您在更改对请求任务有贡献的源或测试后运行Gradle测试一样。这意味着不相关的更改（例如对生成脚本的更改）不会触发重新生成。若要合并构建逻辑的更改，必须手动重新启动连续生成。</p><p>持续构建使用文件系统监视来检测输入的更改。如果文件系统监视在您的系统上不起作用，那么连续构建也不起作用。特别是，当使用<code>--no-daemon</code>进程时，连续构建不起作用。</p><p>当Gradle检测到输入的更改时，它不会立即触发构建。相反，它将等待一段时间，直到在一段安静的时间内没有检测到其他变化。您可以通过Gradle属性<code>org.Gradle.continous.quietperiod</code>以毫秒为单位配置静默期。</p><p>如果Gradle连接到交互式输入源（如终端），则可以通过按<code>CTRL-D</code>退出连续构建（在Microsoft Windows上，还需要在<code>CTRL-D</code>之后按<code>ENTER</code>或<code>RETURN</code>）。</p><p>如果Gradle未连接到交互式输入源（例如，作为脚本的一部分运行），则必须终止构建过程（例如，使用kill命令或类似命令）。</p><p>如果构建是通过工具API执行的，则可以使用工具API的取消机制来取消构建。</p><h1 id="构建的生命周期" tabindex="-1"><a class="header-anchor" href="#构建的生命周期"><span>构建的生命周期</span></a></h1><p>Gradle构建有三个不同的阶段：</p><figure><img src="`+d+'" alt="author gradle 1" tabindex="0" loading="lazy"><figcaption>author gradle 1</figcaption></figure><p>Gradle按顺序运行这些阶段：</p>',25),y=n("li",null,"检测 settings.gradle(.kts) 文件",-1),P={href:"https://docs.gradle.org/current/dsl/org.gradle.api.initialization.Settings.html",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"Settings",-1),G=n("li",null,"评估设置文件以确定哪些项目参与构建。",-1),A={href:"https://docs.gradle.org/current/dsl/org.gradle.api.Project.html",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"Project",-1),_=n("li",null,[n("strong",null,"Configuration"),n("ul",null,[n("li",null,"评估参与构建的每个项目的构建脚本build.gradle（.kts）。"),n("li",null,"为请求的任务创建任务图。")])],-1),S=n("li",null,[n("strong",null,"Execution"),n("ul",null,[n("li",null,"安排并执行所选任务。"),n("li",null,"任务之间的依赖关系决定了执行顺序。"),n("li",null,"任务的执行可以并行进行。")])],-1),j=l('<figure><img src="'+u+'" alt="build lifecycle example" tabindex="0" loading="lazy"><figcaption>build lifecycle example</figcaption></figure><h1 id="settings-文件-1" tabindex="-1"><a class="header-anchor" href="#settings-文件-1"><span>Settings 文件</span></a></h1><p>设置文件是每个Gradle构建的入口点。</p><figure><img src="'+v+'" alt="author gradle 7" tabindex="0" loading="lazy"><figcaption>author gradle 7</figcaption></figure><h1 id="配置构建环境" tabindex="-1"><a class="header-anchor" href="#配置构建环境"><span>配置构建环境</span></a></h1><h1 id="在gradle中使用文件api" tabindex="-1"><a class="header-anchor" href="#在gradle中使用文件api"><span>在gradle中使用文件API</span></a></h1><h1 id="编写task" tabindex="-1"><a class="header-anchor" href="#编写task"><span>编写Task</span></a></h1><h1 id="编写插件" tabindex="-1"><a class="header-anchor" href="#编写插件"><span>编写插件</span></a></h1><h1 id="高级功能" tabindex="-1"><a class="header-anchor" href="#高级功能"><span>高级功能</span></a></h1><h2 id="通过工具嵌入gradle-api" tabindex="-1"><a class="header-anchor" href="#通过工具嵌入gradle-api"><span>通过工具嵌入Gradle API</span></a></h2><p>Gradle提供了一个称为工具API的程序化API，您可以使用它将Gradle嵌入到自己的软件中。此API允许您执行和监视构建，并向Gradle查询构建的详细信息。此API的主要受众是IDE、CI服务器和其他UI作者；然而，API对任何需要在应用程序中嵌入Gradle的人都是开放的。</p>',11),w={href:"https://docs.gradle.org/current/userguide/test_kit.html#test_kit",target:"_blank",rel:"noopener noreferrer"},E={href:"http://projects.eclipse.org/projects/tools.buildship",target:"_blank",rel:"noopener noreferrer"},I={href:"https://www.jetbrains.com/idea/",target:"_blank",rel:"noopener noreferrer"},D=l(`<h3 id="工具api功能" tabindex="-1"><a class="header-anchor" href="#工具api功能"><span>工具API功能</span></a></h3><p>工具API的一个基本特性是它以独立于版本的方式运行。这意味着您可以使用相同的API来处理使用不同版本Gradle的构建，包括比您正在使用的工具API版本更新或更旧的版本。工具API是<code>Gradle wrapper </code>感知的，默认情况下，它使用的Gradle版本与<code>wrapper </code>驱动的构建所使用的版本相同。</p><p>工具API提供的一些功能：</p><ul><li>查询构建的详细信息，包括项目层次结构和项目依赖关系、外部依赖关系（包括源代码和Javadoc jar）、源目录和每个项目的任务。</li><li>执行构建并侦听stdout和stderr日志记录和进度消息（例如，在命令行上运行时“状态栏”中显示的消息）。</li><li>执行特定的测试类或测试方法。</li><li>在执行构建时接收有趣的事件，例如项目配置、任务执行或测试执行。</li><li>取消正在运行的生成。</li><li>将多个单独的Gradle构建合并为一个复合构建。</li><li>工具API可以下载并安装适当的Gradle版本，类似于<code>Wrapper</code>。</li><li>该实现是轻量级的，只有少量的依赖项。它也是一个性能良好的库，对类加载器结构或日志配置不做任何假设。这使得API易于嵌入到您的应用程序中。</li></ul><h3 id="工具api和gradle-build-daemon" tabindex="-1"><a class="header-anchor" href="#工具api和gradle-build-daemon"><span>工具API和Gradle Build Daemon</span></a></h3><p>工具API始终使用Gradle守护进程。这意味着对工具API的后续调用，无论是模型构建请求还是任务执行请求，都将在同一个长期进程中执行。</p><h3 id="快速启动" tabindex="-1"><a class="header-anchor" href="#快速启动"><span>快速启动</span></a></h3><p>由于工具API是开发人员的接口，Javadoc是它的主要文档。要使用工具API，请将以下存储库和依赖项声明添加到构建脚本中：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>repositories <span class="token punctuation">{</span>
    maven <span class="token punctuation">{</span> url <span class="token string">&#39;https://repo.gradle.org/gradle/libs-releases&#39;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

dependencies <span class="token punctuation">{</span>
    implementation <span class="token interpolation-string"><span class="token string">&quot;org.gradle:gradle-tooling-api:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">toolingApiVersion</span></span><span class="token string">&quot;</span></span>
    <span class="token comment">// The tooling API need an SLF4J implementation available at runtime, replace this with any other implementation</span>
    runtimeOnly <span class="token string">&#39;org.slf4j:slf4j-simple:1.7.10&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),C={href:"https://docs.gradle.org/current/javadoc/org/gradle/tooling/GradleConnector.html",target:"_blank",rel:"noopener noreferrer"},O=n("code",null,"GradleConnector.connect()",-1),J=n("code",null,"ProjectConnection",-1),U=n("code",null,"ProjectConnection",-1);function q(R,B){const s=t("ExternalLinkIcon");return p(),o("div",null,[m,n("ul",null,[k,b,n("li",null,[n("p",null,[a("application 插件用于创建可执行的JVM应用程序。它使得在开发过程中很容易在本地启动应用程序，并将应用程序打包为TAR或ZIP，包括特定于操作系统的启动脚本。其集成了java插件和"),n("a",h,[a("Distribution "),e(s)]),a("插件")])])]),f,n("ul",null,[n("li",null,[a("Initialization： "),n("ul",null,[y,n("li",null,[a("创建 "),n("a",P,[T,e(s)]),a(" 实例")]),G,n("li",null,[a("为每个项目创建一个"),n("a",A,[x,e(s)]),a("实例。")])])]),_,S]),j,n("ul",null,[n("li",null,[n("a",w,[a("Gradle TestKit"),e(s)]),a(" 使用工具API对Gradle插件进行功能测试。")]),n("li",null,[n("a",E,[a("Eclipse Buildship"),e(s)]),a("使用工具API来导入Gradle项目和运行任务。")]),n("li",null,[n("a",I,[a("IntelliJ IDEA"),e(s)]),a(" 使用工具API导入Gradle项目并运行任务。")])]),D,n("p",null,[a("工具API的主要入口点是"),n("a",C,[a("GradleConnector"),e(s)]),a("。您可以从那里导航以查找代码示例并探索可用的工具API模型。您可以使用"),O,a("创建"),J,a("。"),U,a("连接到单个Gradle项目。使用该连接，您可以执行任务、测试和检索与该项目相关的模型。")])])}const z=i(g,[["render",q],["__file","gradle.html.vue"]]),L=JSON.parse('{"path":"/Spring/gradle.html","title":"Gradle指南","lang":"zh-CN","frontmatter":{"title":"Gradle指南","date":"2023-10-08T00:00:00.000Z","categories":["java"],"tags":["Gradle"],"description":"概述 Gradle根据构建脚本中的信息自动构建、测试和部署软件。 gradle basic 1gradle basic 1 核心概念 Project Gradle project 是一个可以构建的软件，例如应用程序或库。单个项目生成包括一个称为根项目的单个项目。多项目构建包括一个根项目和任意数量的子项目。 构建脚本 构建脚本详细说明了构建项目的步骤。每...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/Spring/gradle.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"Gradle指南"}],["meta",{"property":"og:description","content":"概述 Gradle根据构建脚本中的信息自动构建、测试和部署软件。 gradle basic 1gradle basic 1 核心概念 Project Gradle project 是一个可以构建的软件，例如应用程序或库。单个项目生成包括一个称为根项目的单个项目。多项目构建包括一个根项目和任意数量的子项目。 构建脚本 构建脚本详细说明了构建项目的步骤。每..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-10T12:45:31.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"Gradle"}],["meta",{"property":"article:published_time","content":"2023-10-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-10T12:45:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Gradle指南\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-10T12:45:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"核心概念","slug":"核心概念","link":"#核心概念","children":[{"level":3,"title":"Project","slug":"project","link":"#project","children":[]},{"level":3,"title":"构建脚本","slug":"构建脚本","link":"#构建脚本","children":[]},{"level":3,"title":"依赖管理","slug":"依赖管理","link":"#依赖管理","children":[]},{"level":3,"title":"任务","slug":"任务","link":"#任务","children":[]},{"level":3,"title":"插件","slug":"插件","link":"#插件","children":[]}]},{"level":2,"title":"Gradle 项目结构","slug":"gradle-项目结构","link":"#gradle-项目结构","children":[]},{"level":2,"title":"GradleWrapper","slug":"gradlewrapper","link":"#gradlewrapper","children":[{"level":3,"title":"目录结构","slug":"目录结构","link":"#目录结构","children":[]}]},{"level":2,"title":"命令格式","slug":"命令格式","link":"#命令格式","children":[]},{"level":2,"title":"settings 文件","slug":"settings-文件","link":"#settings-文件","children":[]},{"level":2,"title":"构建脚本","slug":"构建脚本-1","link":"#构建脚本-1","children":[]},{"level":2,"title":"依赖管理","slug":"依赖管理-1","link":"#依赖管理-1","children":[{"level":3,"title":"Version catalog","slug":"version-catalog","link":"#version-catalog","children":[]}]},{"level":2,"title":"插件","slug":"插件-1","link":"#插件-1","children":[{"level":3,"title":"核心插件","slug":"核心插件","link":"#核心插件","children":[]},{"level":3,"title":"社区插件","slug":"社区插件","link":"#社区插件","children":[]},{"level":3,"title":"本地插件","slug":"本地插件","link":"#本地插件","children":[]}]},{"level":2,"title":"依赖声明","slug":"依赖声明","link":"#依赖声明","children":[]},{"level":2,"title":"JAVA相关的插件","slug":"java相关的插件","link":"#java相关的插件","children":[]},{"level":2,"title":"增量构建","slug":"增量构建","link":"#增量构建","children":[]},{"level":2,"title":"持续构建","slug":"持续构建","link":"#持续构建","children":[]},{"level":2,"title":"通过工具嵌入Gradle API","slug":"通过工具嵌入gradle-api","link":"#通过工具嵌入gradle-api","children":[{"level":3,"title":"工具API功能","slug":"工具api功能","link":"#工具api功能","children":[]},{"level":3,"title":"工具API和Gradle Build Daemon","slug":"工具api和gradle-build-daemon","link":"#工具api和gradle-build-daemon","children":[]},{"level":3,"title":"快速启动","slug":"快速启动","link":"#快速启动","children":[]}]}],"git":{"createdTime":1713946771000,"updatedTime":1718023531000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":2}]},"readingTime":{"minutes":16.98,"words":5093},"filePathRelative":"Spring/gradle.md","localizedDate":"2023年10月8日","excerpt":"\\n<p><code>Gradle</code>根据构建脚本中的信息自动构建、测试和部署软件。</p>\\n<figure><figcaption>gradle basic 1</figcaption></figure>\\n<h2>核心概念</h2>\\n<h3>Project</h3>\\n<p>Gradle <code>project </code>是一个可以构建的软件，例如应用程序或库。单个项目生成包括一个称为根项目的单个项目。多项目构建包括一个根项目和任意数量的子项目。</p>\\n<h3>构建脚本</h3>\\n<p>构建脚本详细说明了构建项目的步骤。每个项目都可以包括一个或多个构建脚本。</p>\\n<h3>依赖管理</h3>","autoDesc":true}');export{z as comp,L as data};
