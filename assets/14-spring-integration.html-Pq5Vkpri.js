import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,a as e}from"./app-Brzzz3sI.js";const t="/assets/message-BV1LajC6.jpg",i="/assets/channel-C8DktGaD.jpg",p="/assets/router-2IiRS-2V.jpg",l="/assets/handler-endpoint-DKNRP-Mo.jpg",c="/assets/source-endpoint-VjOO2u2U.jpg",o="/assets/target-endpoint-BOqv8rBK.jpg",r={},u=e('<p>Spring Integration 将spring 的编程模型扩展到消息领域。 它支持消息的路由和转换，以便可以集成不同的传输和不同的数据格式。 换句话说，框架来处理消息传递和集成问题。 业务组件与基础架构进一步隔离，开发人员可以减轻复杂的整合职责。</p><h1 id="主要组件" tabindex="-1"><a class="header-anchor" href="#主要组件"><span>主要组件</span></a></h1><p>从垂直的角度来看，分层架构有助于分离关注点，而在层之间的基于接口的合同促进了松散的耦合。 spring 和其衍生框架通常基于这种最佳实践。消息驱动的体系结构增加了水平观点， 正如“分层体系结构”是一种非常通用和抽象的范式一样，消息传递系统通常遵循类似的抽象“管道和过滤器”模型。 “过滤器”代表能够产生或消费消息的任何组件，“管道”在过滤器之间传输消息，以使组件本身保持松散耦合。 重要的是要注意，这两个高级范式不是相互排斥的。 支持“管道”的基础消息架构仍应封装在其合同被定义为接口的层中。 同样，“过滤器”应在应用程序的服务层上方的层中进行管理，并通过接口与这些服务交互方式，与Web层的方式相同。</p><h2 id="消息" tabindex="-1"><a class="header-anchor" href="#消息"><span>消息</span></a></h2><p>消息主要有payload和header组成。 payload可以是任何类型， header通常包含一些通用信息，例如时间戳，id等。</p><figure><img src="'+t+'" alt="Message" tabindex="0" loading="lazy"><figcaption>Message</figcaption></figure><h2 id="消息通道" tabindex="-1"><a class="header-anchor" href="#消息通道"><span>消息通道</span></a></h2><p>消息通道表示 管道-过滤器架构中的管道， 生产者将消息发送到管道，消费者从管道接收消息。 消息通道可以拦截消息和监听消息。</p><figure><img src="'+i+'" alt="消息通道" tabindex="0" loading="lazy"><figcaption>消息通道</figcaption></figure><p>消息通道可以遵循点对点或发布订阅语义。 使用点对点频道，不超过一个消费者可以接收到该通道的消息。 Publish-Subscribe频道尝试向频道上的所有用户广播每条消息。</p><p>还有另一个重要的考虑因素：通道是否应该缓冲消息？ 在 spring Integration 中，pollable通道能够在队列内缓冲消息。 缓冲的优点是，它允许对入站消息进行限制，从而防止消费者过载。 但是， 这也增加了一些复杂性，因为消费者只能在配置poller的情况下从该通道中接收消息。 另一方面，连接到可订阅通道的消费者仅是消息驱动的。</p><h2 id="消息端点" tabindex="-1"><a class="header-anchor" href="#消息端点"><span>消息端点</span></a></h2><p>Spring Integration的主要目标之一是通过控制反转来简化企业集成解决方案的开发。 这意味着您不必直接实现消费者和生产者，甚至不必在消息频道上构建消息并调用发送或接收操作。 相反，您应该能够通过基于普通对象的实现来专注于特定域模型。 然后，通过提供声明性配置，您可以将特定于域的代码“连接”到Spring Integration提供的消息基础结构。 负责这些连接的组件是消息端点。</p><p>这并不意味着您应该直接连接现有的应用程序代码。 任何现实世界中的企业集成解决方案都需要一定数量的代码，这些代码侧重于集成问题，例如路由和转换。 重要的是要实现集成逻辑与业务逻辑之间关注的分离。 换句话说，与用于Web应用程序的模型视图控制器（MVC）范式一样，目标应该是提供一个薄但专用的层，将入站请求转化为服务层调用，然后将服务层返回值转换为外站回复。</p><h1 id="消息端点-1" tabindex="-1"><a class="header-anchor" href="#消息端点-1"><span>消息端点</span></a></h1><p>消息端点代表管道和过滤器架构的“过滤器”。 如前所述，端点的主要角色是将应用程序代码连接到消息框架，并以非侵入性方式进行。 换句话说，理想情况下，应用程序代码应该对消息对象或消息频道没有意识。这类似于控制器在MVC范式中的作用。 就像控制器处理HTTP请求一样，消息端点也处理消息。 正如控制器映射到URL模式一样，消息端点将映射到消息频道。 在两种情况下，目标都是相同的：从基础架构中隔离应用程序代码。</p><h2 id="消息转化器" tabindex="-1"><a class="header-anchor" href="#消息转化器"><span>消息转化器</span></a></h2><p>消息转换器负责转换消息的内容或结构并返回修改后的消息。 最常见的转换器类型可能是将消息的payload从一种格式转换为另一种格式（例如从xml到java.lang.string）。 同样，转换器可以添加，删除或修改消息的header。</p><h2 id="消息过滤器" tabindex="-1"><a class="header-anchor" href="#消息过滤器"><span>消息过滤器</span></a></h2><p>消息过滤器决定是否应该将消息传递给输出通道。 这仅需要一种布尔测试方法，该方法可能会检查特定的有效负载内容类型，属性值，header或其他条件。 如果消息被接受，则将其发送到输出通道。 如果没有，它将被删除（或者，对于更严重的实现，可能会抛出一个异常）。 消息过滤器通常与Publish-Subscriber频道结合使用，在该通道中，多个消费者可能会收到相同的消息并使用过滤器来缩小要处理的消息集。</p><h2 id="消息路由器" tabindex="-1"><a class="header-anchor" href="#消息路由器"><span>消息路由器</span></a></h2><p>消息路由器负责决定下一个频道应接收消息。 通常，该决定基于可用的消息的内容或消息标题中可用的元数据。 消息路由器通常用作动态配置输出通道。</p><figure><img src="'+p+'" alt="Router" tabindex="0" loading="lazy"><figcaption>Router</figcaption></figure><h2 id="消息拆分器" tabindex="-1"><a class="header-anchor" href="#消息拆分器"><span>消息拆分器</span></a></h2><p>其责任是从其输入通道中接受消息，将该消息分为多个消息，然后将它们发送到其输出频道。</p><h2 id="消息聚合器" tabindex="-1"><a class="header-anchor" href="#消息聚合器"><span>消息聚合器</span></a></h2><p>它接收多个消息并将它们组合到单个消息中。 实际上，聚合器通常是包括分离器的管道中的下游消费者。 从技术上讲，聚合器比分离器更复杂，因为它必须维护状态（要汇总的消息），决定何时聚合，并在必要时进行超时。此外，在超时的情况下，聚合器需要知道是否发送部分结果，丢弃它们或将其发送到单独的频道。 Spring Integration提供了一个相关性策略。</p><h2 id="服务激活器" tabindex="-1"><a class="header-anchor" href="#服务激活器"><span>服务激活器</span></a></h2><p>服务激活器是将服务实例连接到消息系统的通用端点。 必须配置输入消息通道，并且，如果要调用的服务方法能够返回值，则还可以提供输出消息频道。</p><blockquote><p>输出通道是可选的，因为每条消息还可以提供自己的“返回地址”标头。 该规则适用于所有消费者端点。</p></blockquote><p>服务激活器调用某些服务对象上的操作来处理请求消息，提取请求消息的有效负载和转换。 每当服务对象的方法存在返回值时，如果有必要，该返回值同样会转换为答复消息。 该回复消息发送到输出频道。 如果未配置输出频道，则该答复将发送到消息的“返回地址”中指定的频道（如果有）。</p><p>Request-Reply服务激活器端点将目标对象的方法连接到输入和输出消息通道。</p><figure><img src="'+l+'" alt="处理程序端点" tabindex="0" loading="lazy"><figcaption>处理程序端点</figcaption></figure><p>如前所述，在消息渠道中，通道可以是可拉取的或可订阅的。 在上图中，这是由“时钟”符号和实心箭头（可拉取）和虚线箭头（订阅）描述的。</p><h2 id="通道适配器" tabindex="-1"><a class="header-anchor" href="#通道适配器"><span>通道适配器</span></a></h2><p>通道适配器是将消息通道连接到其他系统或传输的端点。 通道适配器可以是入站或出站。 通常，频道适配器在消息之间进行一些映射。 根据传输，通道适配器还可以填充或提取消息标头值。</p><figure><img src="'+c+'" alt="源端点" tabindex="0" loading="lazy"><figcaption>源端点</figcaption></figure><figure><img src="'+o+`" alt="目标端点" tabindex="0" loading="lazy"><figcaption>目标端点</figcaption></figure><h2 id="端点的bean-名称" tabindex="-1"><a class="header-anchor" href="#端点的bean-名称"><span>端点的bean 名称</span></a></h2><p>消费端点（带有输入通道的任何东西）由两个bean组成，即消费者和消息处理程序。 消费者对消息处理程序有引用，并在消息到达时调用它。 如下面的xml配置：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">int:</span>service-activator</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">&quot;</span>someService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">...</span> <span class="token punctuation">/&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>消费者: someService (the id)</li><li>消息处理器: someService.handler</li></ul><p>使用企业集成模式（EIP）注释时，名称取决于几个因素。 考虑以下注释POJO的示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeComponent</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@ServiceActivator</span><span class="token punctuation">(</span>inputChannel <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>Consumer: someComponent.someMethod.serviceActivator</p></li><li><p>Handler: someComponent.someMethod.serviceActivator.handler</p></li></ul><p>从版本5.0.4开始，您可以使用@endpointID注释修改这些名称，如下示例显示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeComponent</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@EndpointId</span><span class="token punctuation">(</span><span class="token string">&quot;someService&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ServiceActivator</span><span class="token punctuation">(</span>inputChannel <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Consumer: someService</li><li>Handler: someService.handler</li></ul><p>@EndPointID创建由ID属性指定的bean名称。 考虑以下注释bean的示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ServiceActivator</span><span class="token punctuation">(</span>inputChannel <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">MessageHandler</span> <span class="token function">someHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Consumer: someConfiguration.someHandler.serviceActivator</li><li>Handler: someHandler (the @Bean name)</li></ul><p>从版本5.0.4开始，您可以使用@endpointID注释修改这些名称，如下示例显示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;someService.handler&quot;</span><span class="token punctuation">)</span>             
    <span class="token annotation punctuation">@EndpointId</span><span class="token punctuation">(</span><span class="token string">&quot;someService&quot;</span><span class="token punctuation">)</span>               
    <span class="token annotation punctuation">@ServiceActivator</span><span class="token punctuation">(</span>inputChannel <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">MessageHandler</span> <span class="token function">someHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Handler: someService.handler (the bean name)</li><li>Consumer: someService (the endpoint ID)</li></ul><p>@EndpointId 创建bean 名称(如xml配置中id属性的值) ， 只要你遵守 在 @Bean 追加 .handler的约定</p><p>在一个特殊情况下，创建了第三个bean：出于架构原因，如果MessageHandler @BEAN没有定义AbstractractractroploducingMessageHandler，则该框架将提供的Bean包装在ReplyProducingMessageHandlerWrapper中。 该包装器支持请求处理程序建议处理，并发出正常的“未答复”调试日志消息。 它的bean名称是处理程序bean name plus .wrapper（有@EndPointID时 - 否则，它是普通生成的处理程序名称）。</p><h1 id="核心消息" tabindex="-1"><a class="header-anchor" href="#核心消息"><span>核心消息</span></a></h1><p>本节介绍Spring Integration中核心消息传递API的所有方面。它包括消息、消息通道和消息端点。它还涵盖了许多企业集成模式，如过滤器、路由器、转换器、服务激活器、拆分器和聚合器。</p><h2 id="消息通道-1" tabindex="-1"><a class="header-anchor" href="#消息通道-1"><span>消息通道</span></a></h2><p>虽然<code>Message</code>在封装数据方面发挥着关键作用，但将消息生产者与消息消费者分离开来的是<code>MessageChannel</code>。</p><h3 id="messagechannel-接口" tabindex="-1"><a class="header-anchor" href="#messagechannel-接口"><span>MessageChannel 接口</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MessageChannel</span> <span class="token punctuation">{</span>

    <span class="token keyword">boolean</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发送消息时，如果消息发送成功，则返回值为<code>true</code>。如果发送调用超时或被中断，它将返回<code>false</code>。</p><h5 id="pollablechannel" tabindex="-1"><a class="header-anchor" href="#pollablechannel"><span><code>PollableChannel</code></span></a></h5><p>由于消息通道可能会缓冲消息，下面的清单显示了<code>PollableChannel</code>接口的定义：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PollableChannel</span> <span class="token keyword">extends</span> <span class="token class-name">MessageChannel</span> <span class="token punctuation">{</span>

    <span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与<code>send</code>方法一样，当接收到消息时，在超时或中断的情况下，返回值为 null。</p><h5 id="subscribablechannel" tabindex="-1"><a class="header-anchor" href="#subscribablechannel"><span><code>SubscribableChannel</code></span></a></h5><p><code>SubscribableChannel</code>接口是通过将消息直接发送到其订阅的<code>MessageHandler</code>实例的通道来实现的。因此，它们不提供用于轮询的接收方法。相反，他们定义了管理这些订阅者的方法。下面的清单显示了<code>SubscribableChannel</code>接口的定义：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SubscribableChannel</span> <span class="token keyword">extends</span> <span class="token class-name">MessageChannel</span> <span class="token punctuation">{</span>

    <span class="token keyword">boolean</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">MessageHandler</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token class-name">MessageHandler</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="messagechannel-实现" tabindex="-1"><a class="header-anchor" href="#messagechannel-实现"><span>MessageChannel 实现</span></a></h3><p>Spring 集成提供了几种不同的消息通道实现方式</p><h3 id="channel-拦截器" tabindex="-1"><a class="header-anchor" href="#channel-拦截器"><span>Channel 拦截器</span></a></h3><h3 id="messagingtemplate" tabindex="-1"><a class="header-anchor" href="#messagingtemplate"><span>MessagingTemplate</span></a></h3><h3 id="配置消息通道" tabindex="-1"><a class="header-anchor" href="#配置消息通道"><span>配置消息通道</span></a></h3><h3 id="特殊通道" tabindex="-1"><a class="header-anchor" href="#特殊通道"><span>特殊通道</span></a></h3>`,76),d=[u];function v(h,k){return a(),s("div",null,d)}const b=n(r,[["render",v],["__file","14-spring-integration.html.vue"]]),f=JSON.parse('{"path":"/gudie/14-spring-integration.html","title":"Spring Integration 指南","lang":"zh-CN","frontmatter":{"title":"Spring Integration 指南","date":"2024-04-20T00:00:00.000Z","categories":["java","spring"],"tags":["Spring Integration"],"description":"Spring Integration 将spring 的编程模型扩展到消息领域。 它支持消息的路由和转换，以便可以集成不同的传输和不同的数据格式。 换句话说，框架来处理消息传递和集成问题。 业务组件与基础架构进一步隔离，开发人员可以减轻复杂的整合职责。 主要组件 从垂直的角度来看，分层架构有助于分离关注点，而在层之间的基于接口的合同促进了松散的耦合。 ...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/gudie/14-spring-integration.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"Spring Integration 指南"}],["meta",{"property":"og:description","content":"Spring Integration 将spring 的编程模型扩展到消息领域。 它支持消息的路由和转换，以便可以集成不同的传输和不同的数据格式。 换句话说，框架来处理消息传递和集成问题。 业务组件与基础架构进一步隔离，开发人员可以减轻复杂的整合职责。 主要组件 从垂直的角度来看，分层架构有助于分离关注点，而在层之间的基于接口的合同促进了松散的耦合。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-24T08:19:31.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"Spring Integration"}],["meta",{"property":"article:published_time","content":"2024-04-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-24T08:19:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Integration 指南\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-24T08:19:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"消息","slug":"消息","link":"#消息","children":[]},{"level":2,"title":"消息通道","slug":"消息通道","link":"#消息通道","children":[]},{"level":2,"title":"消息端点","slug":"消息端点","link":"#消息端点","children":[]},{"level":2,"title":"消息转化器","slug":"消息转化器","link":"#消息转化器","children":[]},{"level":2,"title":"消息过滤器","slug":"消息过滤器","link":"#消息过滤器","children":[]},{"level":2,"title":"消息路由器","slug":"消息路由器","link":"#消息路由器","children":[]},{"level":2,"title":"消息拆分器","slug":"消息拆分器","link":"#消息拆分器","children":[]},{"level":2,"title":"消息聚合器","slug":"消息聚合器","link":"#消息聚合器","children":[]},{"level":2,"title":"服务激活器","slug":"服务激活器","link":"#服务激活器","children":[]},{"level":2,"title":"通道适配器","slug":"通道适配器","link":"#通道适配器","children":[]},{"level":2,"title":"端点的bean 名称","slug":"端点的bean-名称","link":"#端点的bean-名称","children":[]},{"level":2,"title":"消息通道","slug":"消息通道-1","link":"#消息通道-1","children":[{"level":3,"title":"MessageChannel 接口","slug":"messagechannel-接口","link":"#messagechannel-接口","children":[]},{"level":3,"title":"MessageChannel 实现","slug":"messagechannel-实现","link":"#messagechannel-实现","children":[]},{"level":3,"title":"Channel 拦截器","slug":"channel-拦截器","link":"#channel-拦截器","children":[]},{"level":3,"title":"MessagingTemplate","slug":"messagingtemplate","link":"#messagingtemplate","children":[]},{"level":3,"title":"配置消息通道","slug":"配置消息通道","link":"#配置消息通道","children":[]},{"level":3,"title":"特殊通道","slug":"特殊通道","link":"#特殊通道","children":[]}]}],"git":{"createdTime":1713946771000,"updatedTime":1713946771000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":1}]},"readingTime":{"minutes":9.47,"words":2842},"filePathRelative":"gudie/14-spring-integration.md","localizedDate":"2024年4月20日","excerpt":"<p>Spring Integration 将spring 的编程模型扩展到消息领域。 它支持消息的路由和转换，以便可以集成不同的传输和不同的数据格式。 换句话说，框架来处理消息传递和集成问题。 业务组件与基础架构进一步隔离，开发人员可以减轻复杂的整合职责。</p>\\n<h1>主要组件</h1>\\n<p>从垂直的角度来看，分层架构有助于分离关注点，而在层之间的基于接口的合同促进了松散的耦合。 spring 和其衍生框架通常基于这种最佳实践。消息驱动的体系结构增加了水平观点， 正如“分层体系结构”是一种非常通用和抽象的范式一样，消息传递系统通常遵循类似的抽象“管道和过滤器”模型。 “过滤器”代表能够产生或消费消息的任何组件，“管道”在过滤器之间传输消息，以使组件本身保持松散耦合。 重要的是要注意，这两个高级范式不是相互排斥的。 支持“管道”的基础消息架构仍应封装在其合同被定义为接口的层中。 同样，“过滤器”应在应用程序的服务层上方的层中进行管理，并通过接口与这些服务交互方式，与Web层的方式相同。</p>","autoDesc":true}');export{b as comp,f as data};
