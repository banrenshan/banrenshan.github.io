import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-7RQdUJPT.js";const e={},l=t(`<ul><li><p>静态语言</p></li><li><p>编译成可执行文件，部署简单</p></li><li><p>语言层面的并发</p></li></ul><h2 id="环境安装" tabindex="-1"><a class="header-anchor" href="#环境安装"><span>环境安装</span></a></h2><ol><li>配置下面的环境变量：</li></ol><ul><li><p>GOROOT: 安装目录</p></li><li><p>PATH: go可执行文件目录(bin)</p></li><li><p>GOPATH: C:\\Users\\13675\\GoProjects</p></li></ul><ol start="2"><li>测试安装，执行下面的命令</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span><span class="token number">1367</span><span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span>go version
go version go1.20.1 windows/amd64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><p>安装vscode，安装go插件</p></li><li><p>配置代理：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span><span class="token number">1367</span><span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span>go <span class="token function">env</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span>on

C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span><span class="token number">1367</span><span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span>go <span class="token function">env</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.cn,direct
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><blockquote><p>Go1.12版本之后，开始使用go mod模式来管理依赖环境了, 要启用go module支持首先要设置环境变量<code>GO111MODULE</code>，它有三个可选值：off、on、auto，默认值是auto。</p><ul><li>GO111MODULE=off禁用模块支持，编译时会从GOPATH和vendor文件夹中查找包。</li><li>GO111MODULE=on启用模块支持，编译时会忽略GOPATH和vendor文件夹，只根据 go.mod下载依赖。</li><li>GO111MODULE=auto，当项目在$GOPATH/src外且项目根目录有go.mod文件时，开启模块支持。</li></ul></blockquote><ol start="3"><li><p>vscode 安装go开发工具包（vs code就会提供诸如代码提示、代码自动补全等功能），<strong>Ctrl+Shift+P</strong> 打开命令窗口，输入<code>Go:Install/Update Tools</code>，就会弹出一个列表，然后全部勾选。</p></li><li><p>编写代码 hello.go：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行 <code>go run .\\hello.go</code></p></li></ol><p>go build hello.go：编译</p><p>go run hello.go ： 执行</p><h1 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h1><p><code>package main</code>表示一个可独立执行的程序，每个 Go 应用程序都包含一个名为 main 的包。main 函数是每一个可执行程序所必须包含的，一般来说都是在启动后第一个执行的函数（如果有 init() 函数则会先执行该函数）。</p><p>单行注释以<code>//</code> 开头。多行注释也叫块注释，均已以 <code>/*</code> 开头，并以 <code>*/</code> 结尾，且不可以嵌套使用。</p><p>当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 private ）</p><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><ul><li>布尔：只可以是常量 true 或者 false</li><li>数字：整型 int 和浮点型 float</li><li>字符串</li><li>派生类型： <ul><li>指针类型（Pointer）</li><li>数组类型</li><li>结构体类型(struct)</li><li>联合体类型 (union)</li><li>函数类型</li><li>切片类型</li><li>接口类型（interface）</li><li>Map 类型</li><li>Channel 类型</li></ul></li></ul><h2 id="变量声明" tabindex="-1"><a class="header-anchor" href="#变量声明"><span>变量声明</span></a></h2><ol><li><p>指定变量类型，声明后若不赋值，使用默认值：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> v_name <span class="token builtin">int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>根据值自行判定变量类型:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> v_name <span class="token operator">=</span> value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>省略var, 注意 :=左侧的变量不应该是已经声明过的，否则会导致编译错误:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>  <span class="token comment">// 变量类型可以省略，依赖自动推断</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">10</span>
c <span class="token operator">:=</span> <span class="token number">10</span> <span class="token comment">//只能在函数体内声明</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>多变量声明</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">//类型相同多个变量, 非全局变量</span>
<span class="token keyword">var</span> vname1<span class="token punctuation">,</span> vname2<span class="token punctuation">,</span> vname3 <span class="token keyword">type</span>
vname1<span class="token punctuation">,</span> vname2<span class="token punctuation">,</span> vname3 <span class="token operator">=</span> v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> v3

<span class="token keyword">var</span> vname1<span class="token punctuation">,</span> vname2<span class="token punctuation">,</span> vname3 <span class="token operator">=</span> v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> v3 <span class="token comment">//和python很像,不需要显示声明类型，自动推断</span>

vname1<span class="token punctuation">,</span> vname2<span class="token punctuation">,</span> vname3 <span class="token operator">:=</span> v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> v3 <span class="token comment">// 短变量声明，仅适用于函数或方法内部，多个变量一起声明时，左侧至少有一个未声明过的变量，否则编译错误，已声明过的变量会退化为赋值</span>


<span class="token comment">//类型不同多个变量, 全局变量, 局部变量不能使用这种方式</span>
<span class="token keyword">var</span> <span class="token punctuation">(</span>
    vname1 <span class="token builtin">int</span>
    vname2 <span class="token builtin">string</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果你想要交换两个变量的值，则可以简单地使用 <code>a, b = b, a</code>。</p></li><li><p>空白标识符 <code>_</code> 也被用于抛弃值，如值 5 在：<code>_, b = 5, 7</code> 中被抛弃。</p></li></ol><h2 id="常量" tabindex="-1"><a class="header-anchor" href="#常量"><span>常量</span></a></h2><p>常量是一个简单值的标识符，在程序运行时，不会被修改的量。常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。</p><p>常量的定义格式：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">const</span> identifier <span class="token punctuation">[</span><span class="token keyword">type</span><span class="token punctuation">]</span> <span class="token operator">=</span> value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你可以省略类型说明符 [type]，因为编译器可以根据变量的值来推断其类型。</p><p>常量还可以用作枚举：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
    Unknown <span class="token operator">=</span> <span class="token number">0</span>
    Female <span class="token operator">=</span> <span class="token number">1</span>
    Male <span class="token operator">=</span> <span class="token number">2</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常量可以用len(), cap(), unsafe.Sizeof()常量计算表达式的值。常量表达式中，函数必须是内置函数，否则编译不通过：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;unsafe&quot;</span>
<span class="token keyword">const</span> <span class="token punctuation">(</span>
    a <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span>
    b <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    c <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上实例运行结果为：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>abc <span class="token number">3</span> <span class="token number">16</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="iota" tabindex="-1"><a class="header-anchor" href="#iota"><span>iota</span></a></h3><p>iota，特殊常量，可以认为是一个可以被编译器修改的常量。</p><p>在每一个const关键字出现时，被重置为0，然后再下一个const出现之前，每出现一次iota，其所代表的数字会自动增加1。</p><p>iota 可以被用作枚举值：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
    a <span class="token operator">=</span> <span class="token boolean">iota</span>
    b <span class="token operator">=</span> <span class="token boolean">iota</span>
    c <span class="token operator">=</span> <span class="token boolean">iota</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一个 iota 等于 0，每当 iota 在新的一行被使用时，它的值都会自动加 1；所以 a=0, b=1, c=2 可以简写为如下形式：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
    a <span class="token operator">=</span> <span class="token boolean">iota</span>
    b
    c
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">(</span>
            a <span class="token operator">=</span> <span class="token boolean">iota</span>   <span class="token comment">//0</span>
            b          <span class="token comment">//1</span>
            c          <span class="token comment">//2</span>
            d <span class="token operator">=</span> <span class="token string">&quot;ha&quot;</span>   <span class="token comment">//独立值，iota += 1</span>
            e          <span class="token comment">//&quot;ha&quot;   iota += 1</span>
            f <span class="token operator">=</span> <span class="token number">100</span>    <span class="token comment">//iota +=1</span>
            g          <span class="token comment">//100  iota +=1</span>
            h <span class="token operator">=</span> <span class="token boolean">iota</span>   <span class="token comment">//7,恢复计数</span>
            i          <span class="token comment">//8</span>
    <span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">,</span>g<span class="token punctuation">,</span>h<span class="token punctuation">,</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上实例运行结果为：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> ha ha <span class="token number">100</span> <span class="token number">100</span> <span class="token number">7</span> <span class="token number">8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h2><p>几乎和java一样。</p><h3 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符"><span>算术运算符</span></a></h3><p>下表列出了所有Go语言的算术运算符。假定 A 值为 10，B 值为 20。</p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;">+</td><td style="text-align:left;">相加</td><td style="text-align:left;">A + B 输出结果 30</td></tr><tr><td style="text-align:left;">-</td><td style="text-align:left;">相减</td><td style="text-align:left;">A - B 输出结果 -10</td></tr><tr><td style="text-align:left;">*</td><td style="text-align:left;">相乘</td><td style="text-align:left;">A * B 输出结果 200</td></tr><tr><td style="text-align:left;">/</td><td style="text-align:left;">相除</td><td style="text-align:left;">B / A 输出结果 2</td></tr><tr><td style="text-align:left;">%</td><td style="text-align:left;">求余</td><td style="text-align:left;">B % A 输出结果 0</td></tr><tr><td style="text-align:left;">++</td><td style="text-align:left;">自增</td><td style="text-align:left;">A++ 输出结果 11</td></tr><tr><td style="text-align:left;">--</td><td style="text-align:left;">自减</td><td style="text-align:left;">A-- 输出结果 9</td></tr></tbody></table><h3 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符"><span>关系运算符</span></a></h3><p>下表列出了所有Go语言的关系运算符。假定 A 值为 10，B 值为 20。</p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;">==</td><td style="text-align:left;">检查两个值是否相等，如果相等返回 True 否则返回 False。</td><td style="text-align:left;">(A == B) 为 False</td></tr><tr><td style="text-align:left;">!=</td><td style="text-align:left;">检查两个值是否不相等，如果不相等返回 True 否则返回 False。</td><td style="text-align:left;">(A != B) 为 True</td></tr><tr><td style="text-align:left;">&gt;</td><td style="text-align:left;">检查左边值是否大于右边值，如果是返回 True 否则返回 False。</td><td style="text-align:left;">(A &gt; B) 为 False</td></tr><tr><td style="text-align:left;">&lt;</td><td style="text-align:left;">检查左边值是否小于右边值，如果是返回 True 否则返回 False。</td><td style="text-align:left;">(A &lt; B) 为 True</td></tr><tr><td style="text-align:left;">&gt;=</td><td style="text-align:left;">检查左边值是否大于等于右边值，如果是返回 True 否则返回 False。</td><td style="text-align:left;">(A &gt;= B) 为 False</td></tr><tr><td style="text-align:left;">&lt;=</td><td style="text-align:left;">检查左边值是否小于等于右边值，如果是返回 True 否则返回 False。</td><td style="text-align:left;">(A &lt;= B) 为 True</td></tr></tbody></table><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h3><p>下表列出了所有Go语言的逻辑运算符。假定 A 值为 True，B 值为 False。</p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;">&amp;&amp;</td><td style="text-align:left;">逻辑 AND 运算符。 如果两边的操作数都是 True，则条件 True，否则为 False。</td><td style="text-align:left;">(A &amp;&amp; B) 为 False</td></tr><tr><td style="text-align:left;">||</td><td style="text-align:left;">逻辑 OR 运算符。 如果两边的操作数有一个 True，则条件 True，否则为 False。</td><td style="text-align:left;">(A || B) 为 True</td></tr><tr><td style="text-align:left;">!</td><td style="text-align:left;">逻辑 NOT 运算符。 如果条件为 True，则逻辑 NOT 条件 False，否则为 True。</td><td style="text-align:left;">!(A &amp;&amp; B) 为 True</td></tr></tbody></table><blockquote><p>在其他语言中（比如C语言，java语言，JavaScript语言等），条件语句会使用一个小括号将其包围起来，在go语言中不需要使用这样的小括号（类似于python），但是如果使用这样的小括号也可以正常通过运行（但这是不符合go语言风格的，某些IDE会提示冗余括号）。为了整体代码风格更偏向于go语言，本手册代码不采用小括号包围条件语句。</p></blockquote><h3 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符"><span>位运算符</span></a></h3><p>Go 语言支持的位运算符如下表所示。假定 A 为60，B 为13：</p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;">&amp;</td><td style="text-align:left;">按位与运算符&quot;&amp;&quot;是双目运算符。 其功能是参与运算的两数各对应的二进位相与。</td><td style="text-align:left;">(A &amp; B) 结果为 12, 二进制为 0000 1100</td></tr><tr><td style="text-align:left;">|</td><td style="text-align:left;">按位或运算符&quot;|&quot;是双目运算符。 其功能是参与运算的两数各对应的二进位相或</td><td style="text-align:left;">(A | B) 结果为 61, 二进制为 0011 1101</td></tr><tr><td style="text-align:left;">^</td><td style="text-align:left;">按位异或运算符&quot;^&quot;是双目运算符。 其功能是参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。</td><td style="text-align:left;">(A ^ B) 结果为 49, 二进制为 0011 0001</td></tr><tr><td style="text-align:left;">&lt;&lt;</td><td style="text-align:left;">左移运算符&quot;&lt;&lt;&quot;是双目运算符。左移n位就是乘以2的n次方。 其功能把&quot;&lt;&lt;&quot;左边的运算数的各二进位全部左移若干位，由&quot;&lt;&lt;&quot;右边的数指定移动的位数，高位丢弃，低位补0。</td><td style="text-align:left;">A &lt;&lt; 2 结果为 240 ，二进制为 1111 0000</td></tr><tr><td style="text-align:left;">&gt;&gt;</td><td style="text-align:left;">右移运算符&quot;&gt;&gt;&quot;是双目运算符。右移n位就是除以2的n次方。 其功能是把&quot;&gt;&gt;&quot;左边的运算数的各二进位全部右移若干位，&quot;&gt;&gt;&quot;右边的数指定移动的位数。</td><td style="text-align:left;">A &gt;&gt; 2 结果为 15 ，二进制为 0000 1111</td></tr></tbody></table><h3 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符"><span>赋值运算符</span></a></h3><p>下表列出了所有Go语言的赋值运算符。</p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;">=</td><td style="text-align:left;">简单的赋值运算符，将一个表达式的值赋给一个左值</td><td style="text-align:left;">C = A + B 将 A + B 表达式结果赋值给 C</td></tr><tr><td style="text-align:left;">+=</td><td style="text-align:left;">相加后再赋值</td><td style="text-align:left;">C += A 等于 C = C + A</td></tr><tr><td style="text-align:left;">-=</td><td style="text-align:left;">相减后再赋值</td><td style="text-align:left;">C -= A 等于 C = C - A</td></tr><tr><td style="text-align:left;">*=</td><td style="text-align:left;">相乘后再赋值</td><td style="text-align:left;">C *= A 等于 C = C * A</td></tr><tr><td style="text-align:left;">/=</td><td style="text-align:left;">相除后再赋值</td><td style="text-align:left;">C /= A 等于 C = C / A</td></tr><tr><td style="text-align:left;">%=</td><td style="text-align:left;">求余后再赋值</td><td style="text-align:left;">C %= A 等于 C = C % A</td></tr><tr><td style="text-align:left;">&lt;&lt;=</td><td style="text-align:left;">左移后赋值</td><td style="text-align:left;">C &lt;&lt;= 2 等于 C = C &lt;&lt; 2</td></tr><tr><td style="text-align:left;">&gt;&gt;=</td><td style="text-align:left;">右移后赋值</td><td style="text-align:left;">C &gt;&gt;= 2 等于 C = C &gt;&gt; 2</td></tr><tr><td style="text-align:left;">&amp;=</td><td style="text-align:left;">按位与后赋值</td><td style="text-align:left;">C &amp;= 2 等于 C = C &amp; 2</td></tr><tr><td style="text-align:left;">^=</td><td style="text-align:left;">按位异或后赋值</td><td style="text-align:left;">C ^= 2 等于 C = C ^ 2</td></tr><tr><td style="text-align:left;">|=</td><td style="text-align:left;">按位或后赋值</td><td style="text-align:left;"></td></tr></tbody></table><h3 id="其他运算符" tabindex="-1"><a class="header-anchor" href="#其他运算符"><span>其他运算符</span></a></h3><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;">&amp;</td><td style="text-align:left;">返回变量存储地址</td><td style="text-align:left;">&amp;a; 将给出变量的实际地址。</td></tr><tr><td style="text-align:left;">*</td><td style="text-align:left;">指针变量。</td><td style="text-align:left;">*a; 是一个指针变量</td></tr></tbody></table><h2 id="条件语句" tabindex="-1"><a class="header-anchor" href="#条件语句"><span>条件语句</span></a></h2><h3 id="if" tabindex="-1"><a class="header-anchor" href="#if"><span>if</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	a <span class="token operator">:=</span> <span class="token number">10</span>

	<span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">10</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;OK&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> a <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Error&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;UNOWN&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="switch" tabindex="-1"><a class="header-anchor" href="#switch"><span>switch</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">/* 定义局部变量 */</span>
   <span class="token keyword">var</span> grade <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;B&quot;</span>
   <span class="token keyword">var</span> marks <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">90</span>

   <span class="token keyword">switch</span> marks <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token number">90</span><span class="token punctuation">:</span> grade <span class="token operator">=</span> <span class="token string">&quot;A&quot;</span>
      <span class="token keyword">case</span> <span class="token number">80</span><span class="token punctuation">:</span> grade <span class="token operator">=</span> <span class="token string">&quot;B&quot;</span>
      <span class="token keyword">case</span> <span class="token number">50</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">70</span> <span class="token punctuation">:</span> grade <span class="token operator">=</span> <span class="token string">&quot;C&quot;</span>
      <span class="token keyword">default</span><span class="token punctuation">:</span> grade <span class="token operator">=</span> <span class="token string">&quot;D&quot;</span>  
   <span class="token punctuation">}</span>

   <span class="token keyword">switch</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> grade <span class="token operator">==</span> <span class="token string">&quot;A&quot;</span> <span class="token punctuation">:</span>
         fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;优秀!\\n&quot;</span> <span class="token punctuation">)</span>     
      <span class="token keyword">case</span> grade <span class="token operator">==</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> grade <span class="token operator">==</span> <span class="token string">&quot;C&quot;</span> <span class="token punctuation">:</span>
         fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;良好\\n&quot;</span> <span class="token punctuation">)</span>      
      <span class="token keyword">case</span> grade <span class="token operator">==</span> <span class="token string">&quot;D&quot;</span> <span class="token punctuation">:</span>
         fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;及格\\n&quot;</span> <span class="token punctuation">)</span>      
      <span class="token keyword">case</span> grade <span class="token operator">==</span> <span class="token string">&quot;F&quot;</span><span class="token punctuation">:</span>
         fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;不及格\\n&quot;</span> <span class="token punctuation">)</span>
      <span class="token keyword">default</span><span class="token punctuation">:</span>
         fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;差\\n&quot;</span> <span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
   fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;你的等级是 %s\\n&quot;</span><span class="token punctuation">,</span> grade <span class="token punctuation">)</span>     
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>switch 语句还可以被用于 type-switch 来判断某个 interface 变量中实际存储的变量类型:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">var</span> x <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
     
   <span class="token keyword">switch</span> i <span class="token operator">:=</span> x<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>	  
         fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot; x 的类型 :%T&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>                
      <span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>	  
         fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;x 是 int 型&quot;</span><span class="token punctuation">)</span>                       
      <span class="token keyword">case</span> <span class="token builtin">float64</span><span class="token punctuation">:</span>
         fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;x 是 float64 型&quot;</span><span class="token punctuation">)</span>           
      <span class="token keyword">case</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">float64</span><span class="token punctuation">:</span>
         fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;x 是 func(int) 型&quot;</span><span class="token punctuation">)</span>                      
      <span class="token keyword">case</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">:</span>
         fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;x 是 bool 或 string 型&quot;</span> <span class="token punctuation">)</span>       
      <span class="token keyword">default</span><span class="token punctuation">:</span>
         fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;未知型&quot;</span><span class="token punctuation">)</span>     
   <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="select" tabindex="-1"><a class="header-anchor" href="#select"><span>select</span></a></h3><p>select是Go中的一个控制结构，类似于用于通信的switch语句。每个case必须是一个通信操作，要么是发送要么是接收。</p><p>select随机执行一个可运行的case。如果没有case可运行，它将阻塞，直到有case可运行。一个默认的子句应该总是可运行的。</p><p>这里的通信，可以简单的理解为IO（输入输出），例如如下代码</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">select</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ch1<span class="token punctuation">:</span>
        <span class="token comment">// 如果从 ch1 信道成功接收数据，则执行该分支代码</span>
    <span class="token keyword">case</span> ch2 <span class="token operator">&lt;-</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token comment">// 如果成功向 ch2 信道成功发送数据，则执行该分支代码</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
        <span class="token comment">// 如果上面都没有成功，则进入 default 分支处理流程</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,72),i=[l];function p(o,c){return s(),a("div",null,i)}const r=n(e,[["render",p],["__file","go语言.html.vue"]]),k=JSON.parse('{"path":"/post/go%E8%AF%AD%E8%A8%80.html","title":"go基础语法","lang":"zh-CN","frontmatter":{"title":"go基础语法","tags":["go基础"],"categories":["go"],"date":"2022-12-02T16:43:59.000Z","description":"静态语言 编译成可执行文件，部署简单 语言层面的并发 环境安装 配置下面的环境变量： GOROOT: 安装目录 PATH: go可执行文件目录(bin) GOPATH: C:\\\\Users\\\\13675\\\\GoProjects 测试安装，执行下面的命令 安装vscode，安装go插件 配置代理： Go1.12版本之后，开始使用go mod模式来管理依赖环境了...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/post/go%E8%AF%AD%E8%A8%80.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"go基础语法"}],["meta",{"property":"og:description","content":"静态语言 编译成可执行文件，部署简单 语言层面的并发 环境安装 配置下面的环境变量： GOROOT: 安装目录 PATH: go可执行文件目录(bin) GOPATH: C:\\\\Users\\\\13675\\\\GoProjects 测试安装，执行下面的命令 安装vscode，安装go插件 配置代理： Go1.12版本之后，开始使用go mod模式来管理依赖环境了..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-14T10:56:09.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"go基础"}],["meta",{"property":"article:published_time","content":"2022-12-02T16:43:59.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-14T10:56:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"go基础语法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-12-02T16:43:59.000Z\\",\\"dateModified\\":\\"2024-04-14T10:56:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"环境安装","slug":"环境安装","link":"#环境安装","children":[]},{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[]},{"level":2,"title":"变量声明","slug":"变量声明","link":"#变量声明","children":[]},{"level":2,"title":"常量","slug":"常量","link":"#常量","children":[{"level":3,"title":"iota","slug":"iota","link":"#iota","children":[]}]},{"level":2,"title":"运算符","slug":"运算符","link":"#运算符","children":[{"level":3,"title":"算术运算符","slug":"算术运算符","link":"#算术运算符","children":[]},{"level":3,"title":"关系运算符","slug":"关系运算符","link":"#关系运算符","children":[]},{"level":3,"title":"逻辑运算符","slug":"逻辑运算符","link":"#逻辑运算符","children":[]},{"level":3,"title":"位运算符","slug":"位运算符","link":"#位运算符","children":[]},{"level":3,"title":"赋值运算符","slug":"赋值运算符","link":"#赋值运算符","children":[]},{"level":3,"title":"其他运算符","slug":"其他运算符","link":"#其他运算符","children":[]}]},{"level":2,"title":"条件语句","slug":"条件语句","link":"#条件语句","children":[{"level":3,"title":"if","slug":"if","link":"#if","children":[]},{"level":3,"title":"switch","slug":"switch","link":"#switch","children":[]},{"level":3,"title":"select","slug":"select","link":"#select","children":[]}]}],"git":{"createdTime":1713091835000,"updatedTime":1713092169000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":2}]},"readingTime":{"minutes":9.72,"words":2915},"filePathRelative":"post/go语言.md","localizedDate":"2022年12月2日","excerpt":"<ul>\\n<li>\\n<p>静态语言</p>\\n</li>\\n<li>\\n<p>编译成可执行文件，部署简单</p>\\n</li>\\n<li>\\n<p>语言层面的并发</p>\\n</li>\\n</ul>\\n<h2>环境安装</h2>\\n<ol>\\n<li>配置下面的环境变量：</li>\\n</ol>\\n<ul>\\n<li>\\n<p>GOROOT: 安装目录</p>\\n</li>\\n<li>\\n<p>PATH: go可执行文件目录(bin)</p>\\n</li>\\n<li>\\n<p>GOPATH: C:\\\\Users\\\\13675\\\\GoProjects</p>\\n</li>\\n</ul>\\n<ol start=\\"2\\">\\n<li>测试安装，执行下面的命令</li>\\n</ol>","autoDesc":true}');export{r as comp,k as data};
