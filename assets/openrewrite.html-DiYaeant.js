import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as i,c,b as n,d as s,e,a as t}from"./app-JRZgQj53.js";const l="/assets/image-20240610194404634-CQwKpdnF.png",u="/assets/image-DXQrm7Aw.png",r="/assets/image-171802056373418-P7CeJtmM.png",d="/assets/image-171802060988920-DmB6IcLM.png",k="/assets/image-171802066749622-B72MsdMb.png",m="/assets/image-171802070942024-CmAMDqHN.png",v="/assets/image-171802080752227-C66Q-UaC.png",b="/assets/image-171802084685829-H7ShfnDL.png",g="/assets/image-171802090847231-DlZootfE.png",h="/assets/image-171802094175033-CS4bTK8T.png",f="/assets/image-171802097963035-C90bfzDJ.png",y="/assets/image-171802107245737-D4FZQeFZ.png",w="/assets/image-171802115196439-CZRubN_2.png",x="/assets/image-171802119716041-DqC7GolE.png",q="/assets/image-171802143680643-D0rmeDYf.png",T="/assets/image-171802156519745-CveKV9XG.png",S="/assets/image-171802165895147-SHcOY1ms.png",j="/assets/image-171802184257849-Iu5tN_-G.png",C="/assets/image-171802189367851-Ksl9vHMT.png",M="/assets/image-171802194050953-FW37lDOA.png",A="/assets/image-171802199999855-Cq6FZBLa.png",D="/assets/image-171802527558057-BABschVz.png",R={},J=n("h1",{id:"概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概述"},[n("span",null,"概述")])],-1),L={href:"https://docs.openrewrite.org/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://docs.openrewrite.org/recipes/java/testing/assertj/junittoassertj",target:"_blank",rel:"noopener noreferrer"},I=n("h2",{id:"快速入门",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#快速入门"},[n("span",null,"快速入门")])],-1),O={href:"https://docs.openrewrite.org/recipes/java",target:"_blank",rel:"noopener noreferrer"},N=t(`<p>把下面代码加入<code>build.gradle</code> 文件。 执行<code>gradle rewriteRun</code></p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>
plugins <span class="token punctuation">{</span>
    <span class="token function">id</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;org.openrewrite.rewrite&quot;</span></span><span class="token punctuation">)</span> <span class="token function">version</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;6.9.0&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
 
rewrite <span class="token punctuation">{</span>
    <span class="token function">activeRecipe</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;org.openrewrite.java.spring.boot3.UpgradeSpringBoot_3_0&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
 
repositories <span class="token punctuation">{</span>
    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
 
dependencies <span class="token punctuation">{</span>
    <span class="token function">rewrite</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;org.openrewrite.recipe:rewrite-spring:5.6.0&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以在<code>init.gradle</code>配置，避免项目中引入冗余配置：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>initscript {
    repositories {
        maven { url &quot;https://plugins.gradle.org/m2&quot; }
    }
    dependencies { classpath(&quot;org.openrewrite:plugin:6.9.0&quot;) }
}
rootProject {
    plugins.apply(org.openrewrite.gradle.RewritePlugin)
    dependencies {
        rewrite(&quot;org.openrewrite.recipe:rewrite-spring:5.6.0&quot;)
    }
    rewrite {
        activeRecipe(&quot;org.openrewrite.java.spring.boot3.UpgradeSpringBoot_3_0&quot;)
    }
    afterEvaluate {
        if (repositories.isEmpty()) {
            repositories {
                mavenCentral()
            }
        }
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>rewrite DSL公开了一些配置选项：</p><ul><li><p>activeRecipe ： 按名称（specs.openrewrite.org/v1beta/recipe资源中给出的名称）明确打开配方。除非使用此设置明确启用，否则不会运行任何配方。</p></li><li><p>activeStyle ：显式地按名称打开样式（specs.openrewrite.org/v1beta/style资源中给出的名称）。除非使用此设置明确启用，否则不会应用任何样式。</p></li><li><p>configFile ：在项目目录中的某个位置（或磁盘上的任何位置）查找OpenRewrite YML配置文件的位置。此文件不需要存在。如果未另行指定，则默认值为<code>&lt;projectdirectory&gt;/rewrite.yml</code>。</p></li><li><p>failOnDryRunResults :如果检测到更改，则切换rewriteDryRun是否应引发异常和非零退出代码的布尔标志。默认值为false。</p></li><li><p>sizeThresholdMb : 在解析过程中忽略非Java源的阈值。默认阈值为10Mb。</p></li><li><p>exclusion : 一个或多个路径，相对于应用插件的项目，在解析过程中忽略非Java源。支持glob模式。</p></li><li><p>plainTextMasks :一组文件掩码，用于表示哪些文件应被解析为纯文本。计算为PathMatcher glob模式，其中“**”匹配任意数量的目录，“*”匹配单个目录或文件名。排除项优先于任何纯文本掩码。如果未明确定义此配置，则默认掩码为</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>**/META-INF/services/**
**/.gitignore
**/.gitattributes
**/.java-version
**/.sdkmanrc
**/gradlew
**/*.sh
**/*.bash
**/*.bat
**/*.ksh
**/*.txt
**/*.jsp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置示例：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>plugins <span class="token punctuation">{</span>
    <span class="token function">id</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;java&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">id</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;org.openrewrite.rewrite&quot;</span></span><span class="token punctuation">)</span> <span class="token function">version</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;6.15.1&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

repositories <span class="token punctuation">{</span>
    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

rewrite <span class="token punctuation">{</span>
    <span class="token function">activeRecipe</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;com.yourorg.ExampleRecipe&quot;</span></span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">&quot;com.yourorg.ExampleRecipe2&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">activeStyle</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;com.yourorg.ExampleStyle&quot;</span></span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">&quot;com.yourorg.ExampleStyle2&quot;</span></span><span class="token punctuation">)</span>

    <span class="token function">exclusion</span><span class="token punctuation">(</span>
            <span class="token comment">// Excludes a particular yaml file</span>
            <span class="token interpolation-string"><span class="token string">&quot;subproject-a/src/main/resources/generated.yaml&quot;</span></span><span class="token punctuation">,</span>
            <span class="token comment">// Exclude all json files</span>
            <span class="token interpolation-string"><span class="token string">&quot;**/*.json&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">plainTextMask</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;**/*.txt&quot;</span></span><span class="token punctuation">)</span>
    
    <span class="token comment">// These are default values, shown for example. It isn&#39;t necessary to supply these values manually:</span>
    configFile <span class="token operator">=</span> project<span class="token punctuation">.</span><span class="token function">getRootProject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;rewrite.yml&quot;</span></span><span class="token punctuation">)</span>
    failOnDryRunResults <span class="token operator">=</span> <span class="token boolean">false</span>
    sizeThresholdMb <span class="token operator">=</span> <span class="token number">10</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="工作机制" tabindex="-1"><a class="header-anchor" href="#工作机制"><span>工作机制</span></a></h2><p><code>OpenRewrite</code>的工作原理是对表示源代码的无损语义树（LST）进行更改，并将修改后的树打印回源代码。然后，您可以查看代码中的更改并提交结果。对LST的修改在访问者中执行，访问者被聚合到食谱中。OpenRewrite配方对源代码进行微创更改，以尊重原始格式。</p><p>例如，如果您希望在所有测试文件中一致地使用静态导入，则可以使用OpenRewrite提供的<code>UseStaticImport</code>访问者。应用于下面的文件，您可以看到它所生成的更改。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Before OpenRewrite</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span></span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// After OpenRewrite</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token static">assertTrue</span></span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token function">assertTrue</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="基于文本的配方" tabindex="-1"><a class="header-anchor" href="#基于文本的配方"><span>基于文本的配方</span></a></h2><p>文本配方是放弃无损语义树（LST）而直接与文本交互的配方。在几乎所有情况下，这都不是你想要做的。这是因为对任何可以解析为LST的文件运行文本配方都会将所述文件转换为纯文本文件，并且你将无法再对该文件运行非文本配方。</p><p>话虽如此，在某些情况下，你可能想要这样做。例如，作为运行Java升级的一部分，您可能希望自动替换<code>Dockerfiles</code>中的基本映像。由于<code>Dockerfiles</code>没有解析到LST中，因此用文本配方修改它们不会造成任何危害。</p><p>示例的<code>Dockerfile</code>如下：</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> eclipse-temurin:17-jdk-jammy</span>

<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>

<span class="token instruction"><span class="token keyword">COPY</span> .mvn/ .mvn</span>
<span class="token instruction"><span class="token keyword">COPY</span> mvnw pom.xml ./</span>
<span class="token instruction"><span class="token keyword">RUN</span> ./mvnw dependency:resolve</span>

<span class="token instruction"><span class="token keyword">COPY</span> src ./src</span>

<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;./mvnw&quot;</span>, <span class="token string">&quot;spring-boot:run&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建 <code>rewrite.yml </code>:</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">type</span><span class="token punctuation">:</span> specs.openrewrite.org/v1beta/recipe
<span class="token key atrule">name</span><span class="token punctuation">:</span> com.yourorg.FindAndReplaceJDK17
<span class="token key atrule">displayName</span><span class="token punctuation">:</span> Find and replace JDK 17 example
<span class="token key atrule">recipeList</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">org.openrewrite.text.FindAndReplace</span><span class="token punctuation">:</span>
      <span class="token key atrule">find</span><span class="token punctuation">:</span> eclipse<span class="token punctuation">-</span>temurin<span class="token punctuation">:</span>17<span class="token punctuation">-</span>jdk<span class="token punctuation">-</span>jammy
      <span class="token key atrule">replace</span><span class="token punctuation">:</span> eclipse<span class="token punctuation">-</span>temurin<span class="token punctuation">:</span>21.0.2_13<span class="token punctuation">-</span>jdk<span class="token punctuation">-</span>jammy
      <span class="token key atrule">filePattern</span><span class="token punctuation">:</span> <span class="token string">&#39;Dockerfile&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>rewrite.yml</code>文件中，我们将定义更新基本镜像的配方。在下面的示例中，您可以看到，我们正在与<code>Dockerfile</code>文件中查找完全匹配的<code>eclipse-temurin:17jdk-jammy</code>的确切文本。</p><h1 id="配方" tabindex="-1"><a class="header-anchor" href="#配方"><span>配方</span></a></h1><p>OpenRewrite支持三种不同类型的配方：</p><ul><li>声明式Yaml</li><li>refaster模板</li><li>命令式:</li></ul><h2 id="声明式" tabindex="-1"><a class="header-anchor" href="#声明式"><span>声明式</span></a></h2><p>声明式是最常使用的方式。它们完全是用YAML编写的，通常将现有的食谱组合在一起，同时添加一些简单的配置。</p><p>常见的静态分析配方就是一个很好的例子。它采用了一堆与静态分析相关的简单配方，并将它们组合成一个更大的配方，可以更容易地运行。它没有添加任何逻辑，也没有改变现有的配方。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">type</span><span class="token punctuation">:</span> specs.openrewrite.org/v1beta/recipe
<span class="token key atrule">name</span><span class="token punctuation">:</span> org.openrewrite.staticanalysis.CommonStaticAnalysis
<span class="token key atrule">displayName</span><span class="token punctuation">:</span> Common static analysis issues
<span class="token key atrule">description</span><span class="token punctuation">:</span> Resolve common static analysis issues discovered through 3rd party tools.
<span class="token key atrule">recipeList</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> org.openrewrite.staticanalysis.AtomicPrimitiveEqualsUsesGet
  <span class="token punctuation">-</span> org.openrewrite.staticanalysis.BigDecimalRoundingConstantsToEnums
  <span class="token punctuation">-</span> org.openrewrite.staticanalysis.BooleanChecksNotInverted
  <span class="token punctuation">-</span> org.openrewrite.staticanalysis.CaseInsensitiveComparisonsDoNotChangeCase
  <span class="token punctuation">-</span> org.openrewrite.staticanalysis.CatchClauseOnlyRethrows
  <span class="token punctuation">-</span> org.openrewrite.staticanalysis.ChainStringBuilderAppendCalls
  <span class="token comment"># ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个很好的例子展示了如何使用声明性配方来定义复杂的迁移配方，例如 <code>ApacheHttpClient</code>迁移配方：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">type</span><span class="token punctuation">:</span> specs.openrewrite.org/v1beta/recipe
<span class="token key atrule">name</span><span class="token punctuation">:</span> org.openrewrite.java.apache.httpclient5.UpgradeApacheHttpClient_5
<span class="token key atrule">displayName</span><span class="token punctuation">:</span> Migrate to ApacheHttpClient 5.x
<span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token punctuation">&gt;</span><span class="token scalar string">
  Migrate applications to the latest Apache HttpClient 5.x release. This recipe will modify an
  application&#39;s build files, make changes to deprecated/preferred APIs, and migrate configuration settings that have
  changes between versions.</span>
<span class="token key atrule">tags</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> apache
  <span class="token punctuation">-</span> httpclient
<span class="token key atrule">recipeList</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> org.openrewrite.java.apache.httpclient4.UpgradeApacheHttpClient_4_5
  <span class="token punctuation">-</span> <span class="token key atrule">org.openrewrite.java.dependencies.ChangeDependency</span><span class="token punctuation">:</span>
      <span class="token key atrule">oldGroupId</span><span class="token punctuation">:</span> org.apache.httpcomponents
      <span class="token key atrule">oldArtifactId</span><span class="token punctuation">:</span> httpclient
      <span class="token key atrule">newGroupId</span><span class="token punctuation">:</span> org.apache.httpcomponents.client5
      <span class="token key atrule">newArtifactId</span><span class="token punctuation">:</span> httpclient5
      <span class="token key atrule">newVersion</span><span class="token punctuation">:</span> 5.1.x
  <span class="token punctuation">-</span> <span class="token key atrule">org.openrewrite.java.dependencies.ChangeDependency</span><span class="token punctuation">:</span>
      <span class="token key atrule">oldGroupId</span><span class="token punctuation">:</span> org.apache.httpcomponents
      <span class="token key atrule">oldArtifactId</span><span class="token punctuation">:</span> httpcore
      <span class="token key atrule">newGroupId</span><span class="token punctuation">:</span> org.apache.httpcomponents.core5
      <span class="token key atrule">newArtifactId</span><span class="token punctuation">:</span> httpcore5
      <span class="token key atrule">newVersion</span><span class="token punctuation">:</span> 5.1.x
  <span class="token punctuation">-</span> org.openrewrite.java.apache.httpclient5.UpgradeApacheHttpClient_5_ClassMapping
  <span class="token punctuation">-</span> org.openrewrite.java.apache.httpclient5.UpgradeApacheHttpClient_5_DeprecatedMethods
  <span class="token punctuation">-</span> org.openrewrite.java.apache.httpclient5.UpgradeApacheHttpClient_5_TimeUnit
  <span class="token punctuation">-</span> org.openrewrite.java.apache.httpclient5.StatusLine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="yaml定制配方" tabindex="-1"><a class="header-anchor" href="#yaml定制配方"><span>YAML定制配方</span></a></h3><p>OpenRewrite允许您在YAML中创建配方和样式。尽管这样做可能降低了可定制性，它以开发速度和可移植性弥补了这一点。有两个地方可以定义OpenRewrite YAML文件：</p><ul><li>在通过<code>rewrite-gradle</code>插件或<code>rewrite-maven</code>插件应用重写配方的项目的rewrite.yml文件中</li><li>在JAR的META-INF/rewrite文件夹中</li></ul><p>如果您在rewrite.yml文件中定义配方或样式，它们将不会包含在从您的项目中发布的JAR。</p><p>如果你想分发一个配方或样式并将其应用于其他项目，你需要在JAR的META-INF/rewrite文件夹中创建它们。</p>`,33),V=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"Key"),n("th",{style:{"text-align":"left"}},"Type"),n("th",{style:{"text-align":"left"}},"Description")])],-1),F=n("tr",null,[n("td",{style:{"text-align":"left"}},"type"),n("td",{style:{"text-align":"left"}},"const"),n("td",{style:{"text-align":"left"}},[s("A constant: "),n("code",null,"specs.openrewrite.org/v1beta/recipe")])],-1),E=n("tr",null,[n("td",{style:{"text-align":"left"}},"name"),n("td",{style:{"text-align":"left"}},"string"),n("td",{style:{"text-align":"left"}},"A fully qualified, unique name for this recipe")],-1),B=n("tr",null,[n("td",{style:{"text-align":"left"}},"displayName"),n("td",{style:{"text-align":"left"}},"string"),n("td",{style:{"text-align":"left"}},"A human-readable name for this recipe (does not end with a period)")],-1),P=n("tr",null,[n("td",{style:{"text-align":"left"}},"description"),n("td",{style:{"text-align":"left"}},"string"),n("td",{style:{"text-align":"left"}},"A human-readable description for this recipe (ends with a period)")],-1),U=n("tr",null,[n("td",{style:{"text-align":"left"}},"tags"),n("td",{style:{"text-align":"left"}},"array of strings"),n("td",{style:{"text-align":"left"}},"A list of strings that help categorize this recipe")],-1),Y=n("td",{style:{"text-align":"left"}},"estimatedEffortPerOccurrence",-1),z={style:{"text-align":"left"}},H={href:"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html#parse-java.lang.CharSequence-",target:"_blank",rel:"noopener noreferrer"},Q=n("td",{style:{"text-align":"left"}},"The expected amount of time saved each time this recipe fixes something",-1),G=n("tr",null,[n("td",{style:{"text-align":"left"}},"causesAnotherCycle"),n("td",{style:{"text-align":"left"}},"boolean"),n("td",{style:{"text-align":"left"}},"Whether or not this recipe can cause another cycle (defaults to false)")],-1),K={style:{"text-align":"left"}},Z={href:"https://docs.openrewrite.org/reference/yaml-format-reference#recipe-list",target:"_blank",rel:"noopener noreferrer"},W=n("td",{style:{"text-align":"left"}},"array of recipes",-1),X=n("td",{style:{"text-align":"left"}},"The list of recipes which comprise this recipe",-1),$=t(`<h3 id="preconditions" tabindex="-1"><a class="header-anchor" href="#preconditions"><span>Preconditions</span></a></h3><p>前置条件用于限制运行配方的源文件。这通常用于针对特定文件或目录，但任何非ScanningRecipe配方都可以用作前置条件。</p><p>先决条件是按文件进行检查。如果一个文件通过了前提条件检查，则所有配方都将在该文件上运行。如果您需要检查您的存储库是否符合某些标准（例如，确保存在测试源集），则需要编写一个自定义的ScanningRecipe。</p><p>当一个配方被用作先决条件时，它要更改的任何文件都被视为满足先决条件。当使用多个配方作为先决条件时，所有配方都必须对文件进行更改，才能被视为满足先决条件。</p><p>只有当满足所有先决条件时，才会运行配方列表中的配方。将先决条件应用于ScanningRecipes时，它们会限制扫描阶段和编辑阶段。</p><p>先决条件所做的更改不包括在配方的最终结果中。先决条件所做的更改仅用于确定是否应运行配方。</p><p>要创建这些顶级先决条件，您需要将先决条件映射添加到声明性配方的YAML中。此对象是一个或多个配方的列表（格式与配方列表相同）。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">type</span><span class="token punctuation">:</span> specs.openrewrite.org/v1beta/recipe
<span class="token key atrule">name</span><span class="token punctuation">:</span> org.openrewrite.PreconditionExample
<span class="token key atrule">preconditions</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">org.openrewrite.text.Find</span><span class="token punctuation">:</span>
      <span class="token key atrule">find</span><span class="token punctuation">:</span> <span class="token number">1</span>
<span class="token key atrule">recipeList</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">org.openrewrite.text.ChangeText</span><span class="token punctuation">:</span>
     <span class="token key atrule">toText</span><span class="token punctuation">:</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ChangeText本身会将项目中所有文本文件的内容更改为2。但由于Find是一个先决条件，所以ChangeText只能在包含1的文件上运行。</p><p>常用作先决条件的配方包括：</p><ul><li>org.openrewrite.FindSourceFiles: 将配方限制为仅在路径与glob模式匹配的文件上运行</li><li>org.openrewrite.text.Find: 将配方限制为仅在包含给定字符串的文件上运行</li><li>org.openrewrite.java.search.FindTypes: 将配方限制为仅在包含给定类型的源代码上运行</li><li>org.openrewrite.java.search.HasJavaVersion: 将配方限制为仅在具有指定源代码或目标兼容版本的Java源代码上运行。允许配方仅针对Java 8、11、17等代码。</li><li>org.openrewrite.java.search.IsLikelyTest: 将配方限制为仅在可能是测试代码的源代码上运行。</li><li>org.openrewrite.java.search.IsLikelyNotTest: 将配方限制为仅在可能是生产代码的源代码上运行。</li></ul><h2 id="refaster" tabindex="-1"><a class="header-anchor" href="#refaster"><span>Refaster</span></a></h2><p>Refaster模板是基于Refaster模板创建的，它通过简单的替换（例如，将StringUtils.equals(..)替换为Objects.equals(..)）来重构代码。这些替换不仅仅是简单的字符串替换，它们还提供了编译器和类型支持。它们还可以用于构建更复杂的模板。请注意，Refaster模板对空格不敏感，这意味着您不能使用Refaster模板来添加或删除空格。</p><blockquote><p>当你定义一个<code>Refaster</code>模板时，实际上会在后台创建一个命令式模板。可以在构建完成后在构建目录中找到这些命令式模板。</p></blockquote><p>一个Java类被认为是Refaster模板，如果:</p><ul><li><p>有多个方法具有相同的返回类型</p></li><li><p>这些方法中的所有参数都是相同的，并且具有相同的名称</p></li><li><p>其中一个方法用<code>@AfterTemplate</code>进行了注解</p></li><li><p>其他方法都用<code>@BeforeTemplate</code>做了注解</p></li></ul><p>在<code>rewrite-migrate-java</code>中的<code>StringRules</code>类中可以找到各种<code>refaster</code>模板：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RecipeDescriptor</span><span class="token punctuation">(</span>
        name <span class="token operator">=</span> <span class="token string">&quot;Replace redundant \`String\` method calls with self&quot;</span><span class="token punctuation">,</span>
        description <span class="token operator">=</span> <span class="token string">&quot;Replace redundant \`substring(..)\` and \`toString()\` method calls with the \`String\` self.&quot;</span>
<span class="token punctuation">)</span>
<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;StringOperationCanBeSimplified&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">RedundantCall</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@BeforeTemplate</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@BeforeTemplate</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">startAndEnd</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@BeforeTemplate</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@AfterTemplate</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">self</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> string<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Refaster 模板配方名称是类名 +<code>Recipe</code>或<code>Recipes</code>，具体取决于类中是否有多个模板。</p></blockquote><h2 id="命令式" tabindex="-1"><a class="header-anchor" href="#命令式"><span>命令式</span></a></h2><p>命令式食谱提供了最大的自由和功能，代价是更难以创建。它们允许您编写Java代码来实现您的配方。</p><h3 id="编写配方" tabindex="-1"><a class="header-anchor" href="#编写配方"><span>编写配方</span></a></h3><p>为了帮助您开始编写食谱，本指南将引导您完成创建基本食谱所需的所有步骤。如果用户指定的类还没有hello()方法，那么这个SayHelloRecipe将向该类添加一个hello()方法。</p><p>原来的类结构如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yourorg</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">FooBar</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重构后的代码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yourorg</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">FooBar</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Hello from com.yourorg.FooBar!&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>食谱定义代码如下:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yourorg</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">JsonCreator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">JsonProperty</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">EqualsAndHashCode</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">NonNull</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span>java<span class="token punctuation">.</span></span><span class="token class-name">JavaIsoVisitor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span>java<span class="token punctuation">.</span></span><span class="token class-name">JavaTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tree<span class="token punctuation">.</span></span><span class="token class-name">J</span></span><span class="token punctuation">;</span>

<span class="token comment">// Making your recipe immutable helps make them idempotent and eliminates categories of possible bugs.</span>
<span class="token comment">// Configuring your recipe in this way also guarantees that basic validation of parameters will be done for you by rewrite.</span>
<span class="token comment">// Also note: All recipes must be serializable. This is verified by RewriteTest.rewriteRun() in your tests.</span>
<span class="token annotation punctuation">@Value</span>
<span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SayHelloRecipe</span> <span class="token keyword">extends</span> <span class="token class-name">Recipe</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Option</span><span class="token punctuation">(</span>displayName <span class="token operator">=</span> <span class="token string">&quot;Fully Qualified Class Name&quot;</span><span class="token punctuation">,</span>
            description <span class="token operator">=</span> <span class="token string">&quot;A fully qualified class name indicating which class to add a hello() method to.&quot;</span><span class="token punctuation">,</span>
            example <span class="token operator">=</span> <span class="token string">&quot;com.yourorg.FooBar&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@NonNull</span>
    <span class="token class-name">String</span> fullyQualifiedClassName<span class="token punctuation">;</span>

    <span class="token comment">// All recipes must be serializable. This is verified by RewriteTest.rewriteRun() in your tests.</span>
    <span class="token annotation punctuation">@JsonCreator</span>
    <span class="token keyword">public</span> <span class="token class-name">SayHelloRecipe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span><span class="token string">&quot;fullyQualifiedClassName&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> fullyQualifiedClassName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>fullyQualifiedClassName <span class="token operator">=</span> fullyQualifiedClassName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Say Hello&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Adds a \\&quot;hello\\&quot; method to the specified class.&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeVisitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionContext</span><span class="token punctuation">&gt;</span></span> <span class="token function">getVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// getVisitor() should always return a new instance of the visitor to avoid any state leaking between cycles</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SayHelloVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SayHelloVisitor</span> <span class="token keyword">extends</span> <span class="token class-name">JavaIsoVisitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ExecutionContext</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">JavaTemplate</span> helloTemplate <span class="token operator">=</span>
                <span class="token class-name">JavaTemplate</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span> <span class="token string">&quot;public String hello() { return \\&quot;Hello from #{}!\\&quot;; }&quot;</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">J<span class="token punctuation">.</span>ClassDeclaration</span> <span class="token function">visitClassDeclaration</span><span class="token punctuation">(</span><span class="token class-name">J<span class="token punctuation">.</span>ClassDeclaration</span> classDecl<span class="token punctuation">,</span> <span class="token class-name">ExecutionContext</span> executionContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Don&#39;t make changes to classes that don&#39;t match the fully qualified name</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>classDecl<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>classDecl<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullyQualifiedName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>fullyQualifiedClassName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> classDecl<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// Check if the class already has a method named &quot;hello&quot;.</span>
            <span class="token keyword">boolean</span> helloMethodExists <span class="token operator">=</span> classDecl<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>statement <span class="token operator">-&gt;</span> statement <span class="token keyword">instanceof</span> <span class="token class-name">J<span class="token punctuation">.</span>MethodDeclaration</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">J<span class="token punctuation">.</span>MethodDeclaration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">::</span><span class="token function">cast</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>methodDeclaration <span class="token operator">-&gt;</span> methodDeclaration<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// If the class already has a \`hello()\` method, don&#39;t make any changes to it.</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>helloMethodExists<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> classDecl<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// Interpolate the fullyQualifiedClassName into the template and use the resulting LST to update the class body</span>
            classDecl <span class="token operator">=</span> classDecl<span class="token punctuation">.</span><span class="token function">withBody</span><span class="token punctuation">(</span> helloTemplate<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cursor</span><span class="token punctuation">(</span><span class="token function">getCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> classDecl<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    classDecl<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCoordinates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    fullyQualifiedClassName <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> classDecl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>@Option</code>，定义配方的配置选项,这里是添加<code>hello()</code>方法的类的完全限定名。</li><li><code>getDisplayName()</code>方法，返回该配方的显示名称。</li><li><code>getDescription()</code>方法，返回该配方的描述。</li><li><code>getVisitor</code>定义了代码重构的核心逻辑: <ol><li>找出符合条件的需要重构的类</li><li>覆盖 <code>Recipe.getVisitor()</code> 方法</li></ol></li></ol><blockquote><p>如果我们查看一下LST Examples文档，可以看到<code>J.ClassDeclaration</code>包含我们需要的信息。它有一个完整的类型名称，我们可以使用它来确保我们只对指定的类进行更改。它还包含<code>MethodDeclarations</code>，因此我们可以检查是否存在一个名为<code>hello</code>的方法，如果它不存在，则可以潜在地添加一个。</p></blockquote><blockquote><p>为了创建复杂的LST元素(如新方法)，使用Java Template是一个好主意。在高层次上，Java Templates通过将代码片段转换为完全创建的lst来简化lst的创建。</p><p>模板是使用JavaTemplate.builder()方法创建的。在模板中，<code>#{}</code>可以用来表示稍后将在那里替换一个值。例如，在我们的配方中，在编译程序时，我们不知道完全限定类的名称是什么。相反，我们需要依赖用户在稍后提供这些信息。</p></blockquote><p>测试类如下:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yourorg</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span><span class="token class-name">RecipeSpec</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span><span class="token class-name">RewriteTest</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span>java<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token static">java</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">SayHelloRecipeTest</span> <span class="token keyword">implements</span> <span class="token class-name">RewriteTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">defaults</span><span class="token punctuation">(</span><span class="token class-name">RecipeSpec</span> spec<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        spec<span class="token punctuation">.</span><span class="token function">recipe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SayHelloRecipe</span><span class="token punctuation">(</span><span class="token string">&quot;com.yourorg.FooBar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">addsHelloToFooBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">rewriteRun</span><span class="token punctuation">(</span>
            <span class="token function">java</span><span class="token punctuation">(</span>
                <span class="token triple-quoted-string string">&quot;&quot;&quot;
                    package com.yourorg;

                    class FooBar {
                    }
                &quot;&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token triple-quoted-string string">&quot;&quot;&quot;
                    package com.yourorg;

                    class FooBar {
                        public String hello() {
                            return &quot;Hello from com.yourorg.FooBar!&quot;;
                        }
                    }
                &quot;&quot;&quot;</span>
            <span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">doesNotChangeExistingHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">rewriteRun</span><span class="token punctuation">(</span>
            <span class="token function">java</span><span class="token punctuation">(</span>
                <span class="token triple-quoted-string string">&quot;&quot;&quot;
                    package com.yourorg;
        
                    class FooBar {
                        public String hello() { return &quot;&quot;; }
                    }
                &quot;&quot;&quot;</span>
            <span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">doesNotChangeOtherClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">rewriteRun</span><span class="token punctuation">(</span>
            <span class="token function">java</span><span class="token punctuation">(</span>
                <span class="token triple-quoted-string string">&quot;&quot;&quot;
                    package com.yourorg;
        
                    class Bash {
                    }
                &quot;&quot;&quot;</span>
            <span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于我们的SayHelloRecipe，我们要确保:</p><ul><li><p>与配置的fullyQualifiedClassName匹配但没有hello()方法的类将添加一个hello()方法</p></li><li><p>已经具有hello()方法的类将保持不变</p></li><li><p>不匹配配置的fullyQualifiedClassName且没有hello()方法的类将不受影响</p></li></ul><blockquote><p>测试文件实现了<code>RewriteTest</code>接口，该接口通过<code>rewriteRun()</code>的方法变体为测试基础结构提供了一个入口点。</p><p>可以通过<code>defaults()</code>方法为所有测试设置默认值，这样您就不必在每个测试中重复相同的代码。</p><p>每个测试，至少，将定义初始源代码(之前状态)。</p><ul><li><p>如果包含第二个参数(after状态)，那么测试基础结构将断言，在配方执行之后，源文件已经转换为这个新状态。</p></li><li><p>如果没有第二个参数，那么测试基础结构将断言在配方执行后源文件没有被更改。</p></li></ul></blockquote><p>yaml声明如下:</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">type</span><span class="token punctuation">:</span> specs.openrewrite.org/v1beta/recipe
<span class="token key atrule">name</span><span class="token punctuation">:</span> com.yourorg.SayHelloToFooBar
<span class="token key atrule">recipeList</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">org.openrewrite.samples.SayHelloRecipe</span><span class="token punctuation">:</span>
      <span class="token key atrule">fullyQualifiedClassName</span><span class="token punctuation">:</span> com.yourorg.FooBar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="javatemplate" tabindex="-1"><a class="header-anchor" href="#javatemplate"><span>JavaTemplate</span></a></h3><p>前面，我们编写了一个<code>Java</code>配方，在类还没有<code>hello()</code>方法的情况下向该类添加<code>hello()</code>方法。在该指南中，我们使用<code>JavaTemplate</code>来创建一个基本方法。但是，<code>JavaTemplate</code>可以用于更复杂的更改，例如重构现有方法。让我们来探讨一下。</p><p>源代码如下:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yourorg</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> dateOfBirth<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">setCustomerInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改后的代码如下:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yourorg</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> dateOfBirth<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCustomerInfo</span><span class="token punctuation">(</span><span class="token class-name">Date</span> dateOfBirth<span class="token punctuation">,</span> <span class="token class-name">String</span> firstName<span class="token punctuation">,</span> <span class="token class-name">String</span> lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>dateOfBirth <span class="token operator">=</span> dateOfBirth<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>食谱如下:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yourorg</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span></span><span class="token class-name">ExecutionContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span></span><span class="token class-name">Recipe</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span></span><span class="token class-name">TreeVisitor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span>java<span class="token punctuation">.</span></span><span class="token class-name">JavaIsoVisitor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span>java<span class="token punctuation">.</span></span><span class="token class-name">JavaTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span>java<span class="token punctuation">.</span></span><span class="token class-name">MethodMatcher</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tree<span class="token punctuation">.</span></span><span class="token class-name">J</span><span class="token punctuation">.</span><span class="token class-name">MethodDeclaration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tree<span class="token punctuation">.</span></span><span class="token class-name">J</span><span class="token punctuation">.</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token class-name">Type</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExpandCustomerInfo</span> <span class="token keyword">extends</span> <span class="token class-name">Recipe</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Expand Customer Info&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Expand the \`CustomerInfo\` class with new fields.&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// OpenRewrite provides a managed environment in which it discovers, instantiates, and wires configuration into Recipes.</span>
    <span class="token comment">// This recipe has no configuration and delegates to its visitor when it is run.</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeVisitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionContext</span><span class="token punctuation">&gt;</span></span> <span class="token function">getVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JavaIsoVisitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ExecutionContext</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Used to identify the method declaration that will be refactored</span>
            <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MethodMatcher</span> methodMatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodMatcher</span><span class="token punctuation">(</span><span class="token string">&quot;com.yourorg.Customer setCustomerInfo(String)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Template used to insert two additional parameters into the &quot;setCustomerInfo()&quot; method declaration</span>
            <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">JavaTemplate</span> addMethodParametersTemplate <span class="token operator">=</span> <span class="token class-name">JavaTemplate</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">&quot;Date dateOfBirth, String firstName, #{}&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">imports</span><span class="token punctuation">(</span><span class="token string">&quot;java.util.Date&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">contextSensitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Template used to add a method body to the &quot;setCustomerInfo()&quot; method declaration</span>
            <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">JavaTemplate</span> addMethodBodyTemplate <span class="token operator">=</span> <span class="token class-name">JavaTemplate</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Template used to add statements to the method body of the &quot;setCustomerInfo()&quot; method</span>
            <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">JavaTemplate</span> addStatementsTemplate <span class="token operator">=</span> <span class="token class-name">JavaTemplate</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>
                    <span class="token string">&quot;this.dateOfBirth = dateOfBirth;\\n&quot;</span> <span class="token operator">+</span>
                            <span class="token string">&quot;this.firstName = firstName;\\n&quot;</span> <span class="token operator">+</span>
                            <span class="token string">&quot;this.lastName = lastName;\\n&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">contextSensitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">MethodDeclaration</span> <span class="token function">visitMethodDeclaration</span><span class="token punctuation">(</span><span class="token class-name">MethodDeclaration</span> methodDeclaration<span class="token punctuation">,</span> <span class="token class-name">ExecutionContext</span> executionContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>methodMatcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>methodDeclaration<span class="token punctuation">.</span><span class="token function">getMethodType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> methodDeclaration<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// Remove the abstract modifier from the method</span>
                methodDeclaration <span class="token operator">=</span> methodDeclaration<span class="token punctuation">.</span><span class="token function">withModifiers</span><span class="token punctuation">(</span>methodDeclaration<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>modifier <span class="token operator">-&gt;</span> modifier<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Type<span class="token punctuation">.</span>Abstract</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// Add two parameters to the method declaration by inserting them in front of the first argument</span>
                methodDeclaration <span class="token operator">=</span>
                        addMethodParametersTemplate<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token function">updateCursor</span><span class="token punctuation">(</span>methodDeclaration<span class="token punctuation">)</span><span class="token punctuation">,</span>
                        methodDeclaration<span class="token punctuation">.</span><span class="token function">getCoordinates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        methodDeclaration<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// Add a method body and format it</span>
                methodDeclaration <span class="token operator">=</span> <span class="token function">maybeAutoFormat</span><span class="token punctuation">(</span>
                        methodDeclaration<span class="token punctuation">,</span> addMethodBodyTemplate<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token function">updateCursor</span><span class="token punctuation">(</span>methodDeclaration<span class="token punctuation">)</span><span class="token punctuation">,</span> methodDeclaration<span class="token punctuation">.</span><span class="token function">getCoordinates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        executionContext
                <span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// Safe to assert since we just added a body to the method</span>
                <span class="token keyword">assert</span> methodDeclaration<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

                <span class="token comment">// Add the assignment statements to the &quot;setCustomerInfo()&quot; method body</span>
                methodDeclaration <span class="token operator">=</span> addStatementsTemplate<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token function">updateCursor</span><span class="token punctuation">(</span>methodDeclaration<span class="token punctuation">)</span><span class="token punctuation">,</span> methodDeclaration<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCoordinates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">return</span> methodDeclaration<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在项目中使用多个版本的库" tabindex="-1"><a class="header-anchor" href="#在项目中使用多个版本的库"><span>在项目中使用多个版本的库</span></a></h2><p>如果您正在制作帮助其他人迁移到最新版本的迁移食谱呢?您的项目可能需要同一库的许多不同版本。例如，一个Mockito迁移项目可能需要Mockito版本1、2、3和4。</p><p>如果您试图在gradle或maven构建中添加同一库的多个版本，您会发现，只使用最新的文件。但是，如果没有多个版本，您将无法测试您的食谱是否正确执行，因为预期的代码甚至可能无法编译。</p><p>幸运的是，OpenRewrite已经添加了一些功能来帮助解决这个困境。下面我们将介绍如何将库的多个版本添加到项目中，以及如何在不同的测试中使用这些不同的版本。</p><p>在你的项目中，你可以把同一个库的许多不同版本(jar)放在<code>src/main/resources/META-INF/rewrite/classpath</code>目录下。然后，在您的测试中，您可以通过使用<code>classpathFromResources</code>函数来指定要使用哪一个。</p><p>例如，如果你想在测试中默认使用<code>junit-4.13.2</code>和<code>mockitto -core-3.12.4</code>，你可以在测试文件中添加以下内容:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">defaults</span><span class="token punctuation">(</span><span class="token class-name">RecipeSpec</span> spec<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    spec
        <span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token class-name">JavaParser</span><span class="token punctuation">.</span><span class="token function">fromJavaVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">classpathFromResources</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InMemoryExecutionContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;junit-4.13.2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mockito-core-3.12.4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您想在另一个测试或另一个文件中使用这些库的不同版本，您所需要做的就是将相应的jar添加到<code>src/main/resources/META-INF/rewrite/classpath</code>目录中，并在<code>classpathFromResources</code>函数中指定新版本。</p><p>上面的解决方案可以工作，但是只支持Maven项目。对于Gradle项目，有一个比手动下载并复制jar到<code>src/main/resources/META-INF/rewrite</code>目录更简单的选择。您可以使用OpenRewrite<code> recipe-library</code>插件:</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>plugins <span class="token punctuation">{</span>
    <span class="token function">id</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;org.openrewrite.build.recipe-library&quot;</span></span><span class="token punctuation">)</span> version <span class="token interpolation-string"><span class="token string">&quot;latest.release&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加了<code>recipe-library</code>插件后，您就可以在构建中添加<code>recipeDependencies</code>部分。在这里，你可以添加一个<code>parserClasspath</code>来指定依赖项及其对应的版本:</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>recipeDependencies <span class="token punctuation">{</span>
    <span class="token function">parserClasspath</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;org.mockito:mockito-core:2.16.0&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">parserClasspath</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;org.mockito:mockito-core:3.12.4&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">parserClasspath</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;junit:junit:3.7&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">parserClasspath</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;junit:junit:4.13.2&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用插件之后，您可以运行<code>downloadRecipeDependencies</code>任务。这将为<code>recipeDependencies</code>中指定的每个依赖项下载相应的jar，并将它们放在<code>src/main/resources/META-INF/rewrite</code>目录中。从这里，您可以以与上面相同的方式使用<code>classpathFromResources</code>函数。</p><h2 id="在多个源文件类型上编写食谱" tabindex="-1"><a class="header-anchor" href="#在多个源文件类型上编写食谱"><span>在多个源文件类型上编写食谱</span></a></h2><p>在创建新食谱时，您可能会发现需要检查多个源文件(可能是不同类型的)，以便在访问者中做出关键决策。例如，您可能希望查找Maven POM文件中出现的特定条件，如果满足该条件，则更改YAML文件中的应用程序属性。</p><p>在这种情况下，您应该创建一个ScanningRecipe。在这里，您将创建一个累加器，访问者可以根据需要对其进行读写。</p><p>下面你可以找到一个扫描食谱的例子:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Nullable</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span>yaml<span class="token punctuation">.</span></span><span class="token class-name">YamlVisitor</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MavenYamlRecipe</span> <span class="token keyword">extends</span> <span class="token class-name">ScanningRecipe</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MavenYamlRecipe<span class="token punctuation">.</span>Accumulator</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Something with Maven and something with YAML&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Something with Maven and something with YAML.&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Accumulator</span> <span class="token function">getInitialValue</span><span class="token punctuation">(</span><span class="token class-name">ExecutionContext</span> ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Accumulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeVisitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionContext</span><span class="token punctuation">&gt;</span></span> <span class="token function">getScanner</span><span class="token punctuation">(</span><span class="token class-name">Accumulator</span> acc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeVisitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tree</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionContext</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Tree</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Tree</span> tree<span class="token punctuation">,</span> <span class="token class-name">ExecutionContext</span> executionContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>tree <span class="token keyword">instanceof</span> <span class="token class-name">SourceFile</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> tree<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token class-name">SourceFile</span> sourceFile <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SourceFile</span><span class="token punctuation">)</span> tree<span class="token punctuation">;</span>
                <span class="token class-name">String</span> sourcePath <span class="token operator">=</span> <span class="token class-name">PathUtils</span><span class="token punctuation">.</span><span class="token function">separatorsToUnix</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">.</span><span class="token function">getSourcePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>sourcePath<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;pom.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// it&#39;s a maven project</span>
                    <span class="token comment">// have a xml visitor to check whether &quot;pom.xml&quot; meet some condition, assume it&#39;s true here</span>
                    <span class="token keyword">boolean</span> isPomConditionMet <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

                    <span class="token comment">// set it in Accumulator</span>
                    acc<span class="token punctuation">.</span>pomConditionMet <span class="token operator">=</span> isPomConditionMet<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">return</span> tree<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeVisitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionContext</span><span class="token punctuation">&gt;</span></span> <span class="token function">getVisitor</span><span class="token punctuation">(</span><span class="token class-name">Accumulator</span> acc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>acc<span class="token punctuation">.</span>pomConditionMet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// if pom condition not met, do nothing</span>
            <span class="token keyword">return</span> <span class="token class-name">TreeVisitor</span><span class="token punctuation">.</span><span class="token function">noop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// whatever your YAML visitor does can now respond to pomConditionMet</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">YamlVisitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ExecutionContext</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// some logic</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// @Data</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Accumulator</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> pomConditionMet <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token comment">// something else if needed from scanner</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在一个配方中创建多个访问者" tabindex="-1"><a class="header-anchor" href="#在一个配方中创建多个访问者"><span>在一个配方中创建多个访问者</span></a></h2><p>当您开始编写越来越复杂的食谱时，您会发现通常需要一个以上的访问者。这是因为重大更改通常需要访问许多类型的无损语义树(lst)，以确定是否应该进行更改。</p><p>例如，假设您想编写一个食谱，将<code>final</code>修饰符添加到任何未重新赋值的局部变量。要做到这一点，首先需要创建一个访问器来访问所有的VariableDeclarations，并对它们进行一些检查(比如确定它们是否已经具有final修饰符)。一旦你找到了所有可能的变量，你就需要访问所有可以使用它们的地方，看看它们是否被重新分配了。如果它们被重新分配，您也需要在访问期间跟踪它们。这两个问题都可以通过添加第二个访问者来解决。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yourorg</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">EqualsAndHashCode</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span></span><span class="token class-name">Cursor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span></span><span class="token class-name">ExecutionContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span></span><span class="token class-name">Recipe</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span></span><span class="token class-name">Tree</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span>internal<span class="token punctuation">.</span></span><span class="token class-name">ListUtils</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span>java<span class="token punctuation">.</span></span><span class="token class-name">JavaIsoVisitor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span>java<span class="token punctuation">.</span></span><span class="token class-name">TreeVisitingPrinter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tree<span class="token punctuation">.</span></span><span class="token class-name">J</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tree<span class="token punctuation">.</span></span><span class="token class-name">Space</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span>marker<span class="token punctuation">.</span></span><span class="token class-name">Markers</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicBoolean</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalizeLocalVariables</span> <span class="token keyword">extends</span> <span class="token class-name">Recipe</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Finalize local variables&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Adds the \`final\` modifier keyword to local variables which are not reassigned.&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">JavaIsoVisitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ExecutionContext</span><span class="token punctuation">&gt;</span></span> <span class="token function">getVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JavaIsoVisitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ExecutionContext</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">J<span class="token punctuation">.</span>VariableDeclarations</span> <span class="token function">visitVariableDeclarations</span><span class="token punctuation">(</span><span class="token class-name">J<span class="token punctuation">.</span>VariableDeclarations</span> varDec<span class="token punctuation">,</span> <span class="token class-name">ExecutionContext</span> executionContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">J<span class="token punctuation">.</span>VariableDeclarations</span> variableDeclarations <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitVariableDeclarations</span><span class="token punctuation">(</span>varDec<span class="token punctuation">,</span> executionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// If the varDec already has a &quot;final&quot; modifier, we don&#39;t need to check anything else</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>variableDeclarations<span class="token punctuation">.</span><span class="token function">hasModifier</span><span class="token punctuation">(</span><span class="token class-name">J<span class="token punctuation">.</span>Modifier<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>Final</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> variableDeclarations<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// If any variable is uninitialized, we should make no changes</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>variableDeclarations<span class="token punctuation">.</span><span class="token function">getVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>namedVariable <span class="token operator">-&gt;</span> namedVariable<span class="token punctuation">.</span><span class="token function">getInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> variableDeclarations<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// If the varDec is in a for loop control, we should make no changes</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDeclaredInForLoopControl</span><span class="token punctuation">(</span><span class="token function">getCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> variableDeclarations<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// Fields should not be changed (aka &quot;instance variables&quot; and &quot;class variables&quot;)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>variableDeclarations<span class="token punctuation">.</span><span class="token function">getVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>namedVariable <span class="token operator">-&gt;</span> namedVariable<span class="token punctuation">.</span><span class="token function">isField</span><span class="token punctuation">(</span><span class="token function">getCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isField</span><span class="token punctuation">(</span><span class="token function">getCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> variableDeclarations<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>variableDeclarations<span class="token punctuation">.</span><span class="token function">getVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>namedVariable <span class="token operator">-&gt;</span>
                                <span class="token class-name">FindAssignmentReferencesToVariable</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">getCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                                        <span class="token punctuation">.</span><span class="token function">getParentTreeCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                                        <span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                                namedVariable<span class="token punctuation">)</span>
                                        <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    variableDeclarations <span class="token operator">=</span> <span class="token function">autoFormat</span><span class="token punctuation">(</span>
                            variableDeclarations<span class="token punctuation">.</span><span class="token function">withModifiers</span><span class="token punctuation">(</span>
                                    <span class="token class-name">ListUtils</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>variableDeclarations<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">J<span class="token punctuation">.</span>Modifier</span><span class="token punctuation">(</span><span class="token class-name">Tree</span><span class="token punctuation">.</span><span class="token function">randomId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Space</span><span class="token punctuation">.</span><span class="token constant">EMPTY</span><span class="token punctuation">,</span> <span class="token class-name">Markers</span><span class="token punctuation">.</span><span class="token constant">EMPTY</span><span class="token punctuation">,</span> <span class="token class-name">J<span class="token punctuation">.</span>Modifier<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>Final</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                            <span class="token punctuation">)</span><span class="token punctuation">,</span> executionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">return</span> variableDeclarations<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isDeclaredInForLoopControl</span><span class="token punctuation">(</span><span class="token class-name">Cursor</span> cursor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> cursor<span class="token punctuation">.</span><span class="token function">getParentTreeCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">J<span class="token punctuation">.</span>ForLoop<span class="token punctuation">.</span>Control</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isField</span><span class="token punctuation">(</span><span class="token class-name">Cursor</span> cursor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> cursor<span class="token punctuation">.</span><span class="token function">dropParentUntil</span><span class="token punctuation">(</span>parent <span class="token operator">-&gt;</span> parent <span class="token keyword">instanceof</span> <span class="token class-name">J<span class="token punctuation">.</span>ClassDeclaration</span> <span class="token operator">||</span> parent <span class="token keyword">instanceof</span> <span class="token class-name">J<span class="token punctuation">.</span>MethodDeclaration</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">J<span class="token punctuation">.</span>ClassDeclaration</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Value</span>
    <span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FindAssignmentReferencesToVariable</span> <span class="token keyword">extends</span> <span class="token class-name">JavaIsoVisitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AtomicBoolean</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

        <span class="token class-name">J<span class="token punctuation">.</span>VariableDeclarations<span class="token punctuation">.</span>NamedVariable</span> variable<span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * <span class="token keyword">@param</span> <span class="token parameter">subtree</span>   The subtree to search.
         * <span class="token keyword">@param</span> <span class="token parameter">variable</span>  A <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">J</span></span>.VariableDeclarations.NamedVariable<span class="token punctuation">}</span> to check for any reassignment calls.
         * <span class="token keyword">@return</span> An <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AtomicBoolean</span></span><span class="token punctuation">}</span> that is true if the variable has been reassigned and false otherwise.
         */</span>
        <span class="token keyword">static</span> <span class="token class-name">AtomicBoolean</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">J</span> subtree<span class="token punctuation">,</span> <span class="token class-name">J<span class="token punctuation">.</span>VariableDeclarations<span class="token punctuation">.</span>NamedVariable</span> variable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FindAssignmentReferencesToVariable</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>subtree<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AtomicBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">J<span class="token punctuation">.</span>Assignment</span> <span class="token function">visitAssignment</span><span class="token punctuation">(</span><span class="token class-name">J<span class="token punctuation">.</span>Assignment</span> a<span class="token punctuation">,</span> <span class="token class-name">AtomicBoolean</span> hasAssignment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Return quickly if the variable has been reassigned before</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>hasAssignment<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> a<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">J<span class="token punctuation">.</span>Assignment</span> assignment <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitAssignment</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> hasAssignment<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>assignment<span class="token punctuation">.</span><span class="token function">getVariable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">J<span class="token punctuation">.</span>Identifier</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">J<span class="token punctuation">.</span>Identifier</span> identifier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">J<span class="token punctuation">.</span>Identifier</span><span class="token punctuation">)</span> assignment<span class="token punctuation">.</span><span class="token function">getVariable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>identifier<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>variable<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    hasAssignment<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> assignment<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">J<span class="token punctuation">.</span>AssignmentOperation</span> <span class="token function">visitAssignmentOperation</span><span class="token punctuation">(</span><span class="token class-name">J<span class="token punctuation">.</span>AssignmentOperation</span> assignOp<span class="token punctuation">,</span> <span class="token class-name">AtomicBoolean</span> hasAssignment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>hasAssignment<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> assignOp<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">J<span class="token punctuation">.</span>AssignmentOperation</span> assignmentOperation <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitAssignmentOperation</span><span class="token punctuation">(</span>assignOp<span class="token punctuation">,</span> hasAssignment<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>assignmentOperation<span class="token punctuation">.</span><span class="token function">getVariable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">J<span class="token punctuation">.</span>Identifier</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">J<span class="token punctuation">.</span>Identifier</span> identifier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">J<span class="token punctuation">.</span>Identifier</span><span class="token punctuation">)</span> assignmentOperation<span class="token punctuation">.</span><span class="token function">getVariable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>identifier<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>variable<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    hasAssignment<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> assignmentOperation<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">J<span class="token punctuation">.</span>Unary</span> <span class="token function">visitUnary</span><span class="token punctuation">(</span><span class="token class-name">J<span class="token punctuation">.</span>Unary</span> u<span class="token punctuation">,</span> <span class="token class-name">AtomicBoolean</span> hasAssignment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>hasAssignment<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> u<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">J<span class="token punctuation">.</span>Unary</span> unary <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitUnary</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> hasAssignment<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>unary<span class="token punctuation">.</span><span class="token function">getOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isModifying</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> unary<span class="token punctuation">.</span><span class="token function">getExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">J<span class="token punctuation">.</span>Identifier</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">J<span class="token punctuation">.</span>Identifier</span> identifier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">J<span class="token punctuation">.</span>Identifier</span><span class="token punctuation">)</span> unary<span class="token punctuation">.</span><span class="token function">getExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>identifier<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>variable<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    hasAssignment<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> unary<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="语法树参考" tabindex="-1"><a class="header-anchor" href="#语法树参考"><span>语法树参考</span></a></h1><figure><img src="`+l+`" alt="image-20240610194404634" tabindex="0" loading="lazy"><figcaption>image-20240610194404634</figcaption></figure><p>无损语义树 （LST） 是代码的树表示形式。与传统的抽象语法树 （AST） 不同，OpenRewrite 的 LST 提供了一组独特的特性，可以跨存储库执行准确的转换和搜索：</p><ul><li><p>类型属性。每个 LST 都充满了类型信息。例如，在引用字段时，源代码可能只是将其称为 myField。另一方面，MyField 的 OpenRewrite LST 将包含有关 myField 类型的其他信息，即使它没有在同一个源文件甚至同一个项目中定义。</p></li><li><p>格式保留。树中保留了 LST 之前和之后的空格，因此可以打印出树以重构原始源代码，而不会破坏格式。此外，插入代码的重构操作对周围代码的本地样式敏感，并与本地样式匹配。</p></li></ul><p>类型归属对于模式的准确匹配是必要的。例如，如果我们正在寻找 SLF4J 日志语句，并且我们看到如下语句，如果没有类型归属，我们如何知道记录器是 SLF4J 还是 Logback 记录器？</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Hi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果格式在整个存储库中不是 100% 一致，则格式保留是必要的。</p><h2 id="lst-生命周期" tabindex="-1"><a class="header-anchor" href="#lst-生命周期"><span>LST 生命周期</span></a></h2><p>在本地运行 OpenRewrite 配方时：</p><ol><li><p>OpenRewrite 进程创建存储在内存中的 LST。这反映了磁盘上存储库的当前状态。</p></li><li><p>该过程通过在 LST 上进行转换来继续。如果配方是搜索配方，这可能是添加搜索标记 （~~&gt;） - 或者可能是更重要的代码更改。</p></li><li><p>配方完成运行后，LST 将转换回文本，然后用于覆盖已更改的任何现有文件。</p></li><li><p>覆盖所有文件后，该过程结束。配方运行之间不存储任何内容。</p></li><li><p>如果在第一个配方完成后运行另一个配方，届时将生成一个新的 LST。</p></li><li><p>如果先前的配方进行了更改，并且这些更改存在于本地，则新生成的 LST 将具有所有这些更改。如果之前的配方没有进行任何更改，则 LST 实际上将与之前的配方相同（但会重新生成，因为前一个配方不再存在）。</p></li></ol><h2 id="java-lst" tabindex="-1"><a class="header-anchor" href="#java-lst"><span>Java LST</span></a></h2><p>在构建配方时，了解 OpenRewrite 无损语义树 （LST） 如何与代码相对应非常重要。例如，除非您知道<code> J.Identifier</code> 是用于表示变量的类，否则您无法使用配方正确重命名变量。</p><p>为了在不冒引入语法或语义错误的风险的情况下以编程方式修改代码，必须使用能够准确、全面地表示所述代码的数据结构。OpenRewrite 使用无损语义树 （LST） 来实现此目的。与其他树数据结构一样，更复杂的 LST 由其他更简单的 LST 递归组成。</p><p>例如，ClassDeclaration 是定义类的 LST。典型的类声明将由字段、方法、构造函数和内部类等元素组成。这些元素中的每一个本身都是 LST。因此，术语“LST”可以指一个完整的 Java 文件，也可以仅指其中的一部分。</p><p>需要注意的是，可以操纵 LST 来创建无法编译的代码。虽然 OpenRewrite 提供了一些防止其类型系统中语法无效转换的保护措施（例如不允许将 import 语句替换为方法声明），但仍然可以编写.</p><p>此图演示了如何将简单的 Java 类表示为 LST。请注意 LST 由其他 LST 组成的分层结构。</p><figure><img src="`+u+`" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>下面是一个简单的 Java 类，其全部目的是演示不同类型的 LST。以下每个部分都将突出显示此代码的不同部分，以演示哪些块对应于哪个 LST。此 LST 类型列表并不详尽，但应该让您对最常见的类型有一个很好的了解。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>openrewrite</span><span class="token punctuation">;</span>
                
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@AnAnnotation</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> c<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>it <span class="token operator">-&gt;</span> it <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@interface</span> <span class="token class-name">AnAnnotation</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="binary" tabindex="-1"><a class="header-anchor" href="#binary"><span>Binary</span></a></h3><p>二进制是具有左右两侧的表达式，由运算符分隔。运算符的示例包括 +、-、||、&amp;&amp; 等。</p><figure><img src="`+r+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h3 id="block" tabindex="-1"><a class="header-anchor" href="#block"><span>Block</span></a></h3><p>块是一对大括号和其中包含的语句。块可以相互嵌套。</p><figure><img src="'+d+`" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h3 id="classdeclaration" tabindex="-1"><a class="header-anchor" href="#classdeclaration"><span>ClassDeclaration</span></a></h3><p>ClassDeclaration 包含任何 Java 类的所有代码。请注意，ClassDeclaration 可以嵌套在另一个类中，例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h3 id="compilationunit" tabindex="-1"><a class="header-anchor" href="#compilationunit"><span>CompilationUnit</span></a></h3><p>CompilationUnit 是 Java LST 的根。为了使 LST 表示有效的 Java 代码，所有其他元素都必须包含在其中。</p><figure><img src="'+m+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h3 id="expression" tabindex="-1"><a class="header-anchor" href="#expression"><span>Expression</span></a></h3><p>表达式是返回值的任何内容。MethodInvocation、Identifier 和 Binary 都是表达式的示例。请注意，某些 LST（如 MethodInvocation）既是语句又是表达式。</p><p>在下面的代码中，仅突出显示了部分表达式，因为表达式内部通常可以包含许多表达式，如果所有表达式都突出显示，则很难阅读。例如，import java.util.ArrayList 是许多表达式（java、util、ArrayList、java.util 和 java.util.ArrayList）。</p><figure><img src="'+v+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h3 id="fieldaccess" tabindex="-1"><a class="header-anchor" href="#fieldaccess"><span>FieldAccess</span></a></h3><p>FieldAccess 是任何完全限定的名称。通常，这些是 package 或 import 语句，但它们也可以在代码中显示为：this.foo。</p><figure><img src="'+b+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h3 id="identifier" tabindex="-1"><a class="header-anchor" href="#identifier"><span>Identifier</span></a></h3><p>标识符是代码中的任何名称（类名、变量名、方法名等）。</p><p>您可以使用 J.Identifier.getFieldType（） 来判断标识符是字段所在的类。如果返回 null，则表示标识符不是字段。</p><figure><img src="'+g+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h3 id="methoddeclaration" tabindex="-1"><a class="header-anchor" href="#methoddeclaration"><span>MethodDeclaration</span></a></h3><p>MethodDeclaration 是批注、修饰符、返回类型、名称、参数列表和正文，它们共同定义类上的方法。</p><figure><img src="'+h+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h3 id="methodinvocation" tabindex="-1"><a class="header-anchor" href="#methodinvocation"><span>MethodInvocation</span></a></h3><p>MethodInvocation 由 select 表达式、任何定义的类型参数、方法名称及其参数组成。方法调用有一个有点令人惊讶的结构，其中最高级别的 LST 元素由 select 表达式（最后一个点左侧的所有内容）和右侧的名称组成。让我们以下面的代码为例来进一步阐明这一点。</p><figure><img src="'+f+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><ul><li>In the above code, the &quot;highest-level&quot; <code>MethodInvocation</code> (<code>this.a.stream().map(it -&gt; it + 1).collect(Collectors.toList())</code>) would have these components: <ul><li>Select expression: <code>this.a.stream.map(it -&gt; it + 1)</code></li><li>Name: <code>collect</code></li><li>A single argument: <code>Collectors.toList()</code></li></ul></li><li>The argument passed into the above <code>MethodInvocation</code> (<code>Collectors.toList()</code>) is itself a <code>MethodInvocation</code> that would have these components: <ul><li>Select expression: <code>Collectors</code></li><li>Name: <code>toList</code></li><li>No arguments</li></ul></li><li>The select expression of the highest-level <code>MethodInvocation</code> (<code>this.a.stream().map(it -&gt; it + 1)</code>) is <em>also</em> a <code>MethodInvocation</code> and it would have these components: <ul><li>Select expression: <code>this.a.stream()</code></li><li>Name: <code>map</code></li><li>A single argument which is the lambda expression: <code>it -&gt; it + 1</code></li></ul></li><li>The select expression of the above <code>MethodInvocation</code> (<code>this.a.stream()</code>) is also a <code>MethodInvocation</code> that has these components: <ul><li>Select expression: <code>this.a</code></li><li>Name: <code>stream</code></li><li>No arguments</li></ul></li></ul><h3 id="newclass" tabindex="-1"><a class="header-anchor" href="#newclass"><span>NewClass</span></a></h3><p>NewClass 是指通过其构造函数和 new 关键字创建对象。</p><figure><img src="'+y+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h3 id="statement" tabindex="-1"><a class="header-anchor" href="#statement"><span>Statement</span></a></h3><p>语句是出现在块内其自身行上的任何内容。语句元素通常以分号结尾。if、while、try、Block、return 和 MethodInvocation 都是语句的示例。请注意，某些 LST 元素（如 MethodInvocation）既是语句又是表达式。</p><p>在下面的代码中，仅突出显示了部分语句，因为语句通常具有许多子语句，并且图表将变得难以阅读。例如，<code>List&lt;Integer&gt; a = new ArrayList&lt;&gt;()</code> 是一个语句，以及 <code>new ArrayList&lt;&gt;()</code>。</p><figure><img src="'+w+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h3 id="variabledeclarations" tabindex="-1"><a class="header-anchor" href="#variabledeclarations"><span>VariableDeclarations</span></a></h3><p>VariableDeclarations 包含一个或多个相同类型的变量的声明，每个变量都有或没有初始化的表达式。</p><figure><img src="'+x+`" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h2 id="yaml-lst" tabindex="-1"><a class="header-anchor" href="#yaml-lst"><span>YAML LST</span></a></h2><p>下面是一个简单的 YAML 文件，其全部目的是演示不同类型的 LST。以下每个部分都将突出显示此文件的不同部分，以演示哪些块对应于哪个 LST。此 LST 列表并不详尽，但它应该让您很好地了解最常见的类型。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">document</span><span class="token punctuation">:</span> this is document 1

<span class="token key atrule">jedis-list</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> Yoda
  <span class="token punctuation">-</span> Qui<span class="token punctuation">-</span>Gon Jinn
  <span class="token punctuation">-</span> Obi<span class="token punctuation">-</span>Wan Kenobi
  <span class="token punctuation">-</span> Luke Skywalker

<span class="token key atrule">jedi</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> Obi<span class="token punctuation">-</span>Wan Kenobi
  <span class="token key atrule">home-planet</span><span class="token punctuation">:</span> Stewjon
  <span class="token key atrule">height</span><span class="token punctuation">:</span> 1.82m

<span class="token key atrule">requests</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> http<span class="token punctuation">:</span>//example.com/
  <span class="token punctuation">-</span> <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//example.com/
    <span class="token key atrule">method</span><span class="token punctuation">:</span> GET
<span class="token punctuation">---</span>
<span class="token key atrule">document</span><span class="token punctuation">:</span> this is document 2

<span class="token key atrule">reporting</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token key atrule">module</span><span class="token punctuation">:</span> final<span class="token punctuation">-</span>stats
<span class="token punctuation">-</span> <span class="token key atrule">module</span><span class="token punctuation">:</span> console
<span class="token punctuation">---</span>
<span class="token punctuation">-</span> item_1
<span class="token punctuation">-</span> item_2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="documents" tabindex="-1"><a class="header-anchor" href="#documents"><span>Documents</span></a></h3><p>文档 LST 是 YAML LST 的根。为了使 LST 表示有效的 YAML，所有其他元素都必须包含在其中。它由一个或多个文档 LST 组成。</p><figure><img src="`+q+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h3 id="document" tabindex="-1"><a class="header-anchor" href="#document"><span>Document</span></a></h3><p>文档 LST 将所有 YAML 包含在单个文档中。一个 YAML 文件可以有多个文档 - 每个文档由包含三破折号分隔符的行分隔<code>---</code>.</p><figure><img src="'+T+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h3 id="mapping" tabindex="-1"><a class="header-anchor" href="#mapping"><span>Mapping</span></a></h3><p>映射由 1 个或多个映射条目（键值对）组成。大多数 YAML 文件将包含至少一个映射。</p><figure><img src="'+S+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h3 id="mapping-entry" tabindex="-1"><a class="header-anchor" href="#mapping-entry"><span>Mapping Entry</span></a></h3><p>映射条目是一个键值对。键通常是标量。另一方面，该值可以是大多数 LST，例如 Mapping、Sequence 或 Scalar。</p><p>例如，第一个文档中的第二个条目 （jedis-list） 具有标量键。该条目的值是一个序列，其中包含所有绝地武士的列表。</p><figure><img src="'+j+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h3 id="sequence" tabindex="-1"><a class="header-anchor" href="#sequence"><span>Sequence</span></a></h3><p>序列是 1 个或多个序列条目的有序列列表。</p><figure><img src="'+C+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h3 id="sequence-entry" tabindex="-1"><a class="header-anchor" href="#sequence-entry"><span>Sequence Entry</span></a></h3><p>序列条目是序列中的一个项目。您可以将每个序列条目视为键值对中的值。此值可以是大多数其他 LST，例如 Mapping 或 Scalar。与映射条目不同，序列条目没有键。</p><figure><img src="'+M+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h3 id="scalar" tabindex="-1"><a class="header-anchor" href="#scalar"><span>Scalar</span></a></h3><p>标量是一个 YAML 值，例如字符串、数字或布尔值。</p><figure><img src="'+A+`" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h2 id="treevisitingprinter" tabindex="-1"><a class="header-anchor" href="#treevisitingprinter"><span>TreeVisitingPrinter</span></a></h2><p>当您第一次开始研究无损语义树 （LST） 时，可能很难理解哪些代码对应于哪些 LST。您可以使用调试器单步执行树，但这可能需要花费大量时间，并且很容易迷失在不相关的元素中。</p><p>幸运的是，在 OpenRewrite 7.35.0 中，创建了一个新选项：TreeVisitingPrinter。利用这一点，您可以将一段代码注入到 Java 配方中（或使用调试器运行命令），并快速查看某些代码如何转换为特定的 LST。</p><p>本指南将介绍使用 TreeVisitingPrinter 获取代码的 LST 的可视化表示形式的不同方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yourorg</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span></span><span class="token class-name">ExecutionContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span></span><span class="token class-name">Recipe</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span>java<span class="token punctuation">.</span></span><span class="token class-name">JavaIsoVisitor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span>java<span class="token punctuation">.</span></span><span class="token class-name">TreeVisitingPrinter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openrewrite<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tree<span class="token punctuation">.</span></span><span class="token class-name">J</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeRecipe</span> <span class="token keyword">extends</span> <span class="token class-name">Recipe</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Some display name&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">JavaIsoVisitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ExecutionContext</span><span class="token punctuation">&gt;</span></span> <span class="token function">getVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JavaIsoVisitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ExecutionContext</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">J<span class="token punctuation">.</span>CompilationUnit</span> <span class="token function">visitCompilationUnit</span><span class="token punctuation">(</span><span class="token class-name">J<span class="token punctuation">.</span>CompilationUnit</span> compUnit<span class="token punctuation">,</span> <span class="token class-name">ExecutionContext</span> executionContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// This next line could be omitted in favor of a breakpoint</span>
                <span class="token comment">// if you&#39;d prefer to use the debugger instead.</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">TreeVisitingPrinter</span><span class="token punctuation">.</span><span class="token function">printTree</span><span class="token punctuation">(</span><span class="token function">getCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitCompilationUnit</span><span class="token punctuation">(</span>compUnit<span class="token punctuation">,</span> executionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试代码:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">someTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">rewriteRun</span><span class="token punctuation">(</span>
        <span class="token function">java</span><span class="token punctuation">(</span>
            <span class="token triple-quoted-string string">&quot;&quot;&quot;
                class A {
                    void test() {
                        int a;
                        a = 0;
                    }
                }
            &quot;&quot;&quot;</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从那里，如果您运行了该测试，您将在控制台中看到以下内容：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>----J.CompilationUnit
    <span class="token punctuation">\\</span>---J.ClassDeclaration
        <span class="token operator">|</span>---J.Identifier <span class="token operator">|</span> <span class="token string">&quot;A&quot;</span>
        <span class="token punctuation">\\</span>---J.Block
            <span class="token punctuation">\\</span>-------J.MethodDeclaration <span class="token operator">|</span> <span class="token string">&quot;MethodDeclaration{A{name=test,return=void,parameters=[]}}&quot;</span>
                    <span class="token operator">|</span>---J.Primitive <span class="token operator">|</span> <span class="token string">&quot;void&quot;</span>
                    <span class="token operator">|</span>---J.Identifier <span class="token operator">|</span> <span class="token string">&quot;test&quot;</span>
                    <span class="token operator">|</span>-----------J.Empty
                    <span class="token punctuation">\\</span>---J.Block
                        <span class="token operator">|</span>-------J.VariableDeclarations <span class="token operator">|</span> <span class="token string">&quot;int a&quot;</span>
                        <span class="token operator">|</span>       <span class="token operator">|</span>---J.Primitive <span class="token operator">|</span> <span class="token string">&quot;int&quot;</span>
                        <span class="token operator">|</span>       <span class="token punctuation">\\</span>-------J.VariableDeclarations.NamedVariable <span class="token operator">|</span> <span class="token string">&quot;a&quot;</span>
                        <span class="token operator">|</span>               <span class="token punctuation">\\</span>---J.Identifier <span class="token operator">|</span> <span class="token string">&quot;a&quot;</span>
                        <span class="token punctuation">\\</span>-------J.Assignment <span class="token operator">|</span> <span class="token string">&quot;a = 0&quot;</span>
                                <span class="token operator">|</span>---J.Identifier <span class="token operator">|</span> <span class="token string">&quot;a&quot;</span>
                                <span class="token punctuation">\\</span>-------J.Literal
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="visitors" tabindex="-1"><a class="header-anchor" href="#visitors"><span>Visitors</span></a></h1><p>在 OpenRewrite 配方中，访问者是核心逻辑所在的地方。它决定了应该更新哪些元素以及何时更新。</p><h1 id="environment" tabindex="-1"><a class="header-anchor" href="#environment"><span>Environment</span></a></h1><p>发现、配置和实例化配方以应用于一组源文件</p><p>OpenRewrite 的环境抽象为 Recipes 和 Styles 提供了发现、激活和配置工具。查看 OpenRewrite 运行的常见运行时上下文会很有帮助，以便更好地了解环境是如何建立的：</p><table><thead><tr><th style="text-align:left;">Context</th><th style="text-align:left;">Integrations</th></tr></thead><tbody><tr><td style="text-align:left;">Rewrite Maven/Gradle plugins</td><td style="text-align:left;">扫描项目的编译和提供的范围类路径，并查找任何可用的配方。扫描编译和提供的范围类路径，并查找包含配方和样式的声明性定义的“META-INF/rewrite/*.yml”。在插件的“configLocation”配置所引用的 YML 文件中添加资源。根据插件的“activeRecipes”和“activeStyles”配置激活配方和样式</td></tr><tr><td style="text-align:left;">Command line utilities</td><td style="text-align:left;">可能有一些命令行标志，指示要激活的配方和样式，以及一组预定义的访问者和配方，以添加到环境中。</td></tr><tr><td style="text-align:left;">Mass-refactoring microservice</td><td style="text-align:left;">根据服务的帖子正文输入将访客和食谱添加到环境中。如果服务在预先发布的 LST 的数据存储中运行，则不需要任何样式配置，因为样式应已存储在此服务设计用于操作的 LST 中。</td></tr></tbody></table><p>下面的代码演示了如何手动构建环境并使用各种不同的资源加载器。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">File</span> rewriteYml <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> rewriteInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>rewriteYml<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">ResourceLoader</span> rewriteYmlLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">YamlResourceLoader</span><span class="token punctuation">(</span>
    rewriteInputStream<span class="token punctuation">,</span>
    <span class="token comment">// wouldn&#39;t have to exist on disk necessarily (just used in logging)</span>
    rewriteYml<span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Path</span><span class="token punctuation">&gt;</span></span> classpath <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

  <span class="token comment">// any manually built visitors</span>
  <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">RefactorVisitor</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> visitors <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

  <span class="token class-name">Environment</span> env <span class="token operator">=</span> <span class="token class-name">Environment</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>rewriteYmlLoader<span class="token punctuation">)</span> <span class="token comment">// can be called more than once for multiple files</span>
    <span class="token punctuation">.</span><span class="token function">scanClasspath</span><span class="token punctuation">(</span>classpath<span class="token punctuation">)</span> <span class="token comment">// classpath scans for META-INF/rewrite/*.yml</span>
    <span class="token punctuation">.</span><span class="token function">scanUserHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// looks for \`~/.rewrite/rewrite.yml</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦创建了环境的实例，就可以询问它以列出所有可用的食谱和styes。还有用于检索配方描述的功能，其中提供了配方及其可用选项的描述。</p><h1 id="recipes" tabindex="-1"><a class="header-anchor" href="#recipes"><span>Recipes</span></a></h1><p>封装操作集合以完成某些更高级别的任务，如框架迁移。</p><p>配方表示一组可应用于无损语义树的搜索和重构操作。配方可以表示单个独立操作，也可以与其他配方链接在一起，以实现更大的目标，例如框架迁移。</p><p>OpenRewrite 提供了一个用于发现、实例化和配置配方的托管环境。若要实现搜索或重构操作，配方将委托给处理 LST 遍历和操作的访问者。</p><p>执行管道指示如何将配方应用于一组源文件以执行转换任务。通过调用配方的 run（） 方法并将将通过管道传递的源文件集传递给它来启动转换。执行管道维护和管理源文件的中间状态，因为它们被传递给访问者和嵌套配方。</p><p>顶级配方（启动执行管道的配方）和任何已链接在一起的后续配方都将参与执行管道。配方是可组合的，因此，嵌套步骤也可能为管道提供额外的嵌套配方。</p><p>反过来，每个配方将作为管道中的一个步骤执行，步骤执行包括以下内容：</p><ol><li><p>调用配方的 validate（） 方法以确保其配置正确。OpenRewrite 对如何处理验证错误没有意见，默认情况下，它将跳过验证失败的配方。可以通过执行上下文将错误处理程序引入管道来更改此行为。</p></li><li><p>如果配方具有关联的访问者，则配方将委托给其关联的访问者来处理已馈送到管道的所有源文件。正是在这个特定阶段，可以引入并发性来并行处理源 LST。</p></li><li><p>如果配方具有链接/链接配方，则执行管道将启动该配方的步骤执行，并重复此过程，直到不再有嵌套配方。</p></li></ol><p>以相同的“迁移 JUnit 5”配方为例，流经管道的流程如下所示：</p><figure><img src="`+D+`" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>启动执行管道需要创建执行上下文。Recipe.run（） 有重载版本，如果没有提供，它们将隐式创建执行上下文。执行上下文是一种在配方（及其基础访问者）之间共享状态的机制。ExecutionContext 提供了以线程安全方式添加和轮询消息的功能。</p><p>执行管道中的配方可能会产生更改，进而导致另一个配方执行进一步的工作。因此，管道可能会再次对管道中的所有配方执行多次传递（或循环），直到对传递不进行任何更改或达到某个最大传递数（默认为 3）。这允许配方响应其他配方所做的更改，这些配方在管道中执行它们之后。</p><p>例如，假设将两个配方添加到执行管道中。第一个配方在 LST 上执行空格格式设置，第二个配方生成添加到同一 LST 的其他代码。这两个配方是按顺序执行的，因此在第二个配方添加其生成的代码之前应用格式化配方。执行管道检测到已进行更改，并执行第二次遍历配方。在第二次传递期间，格式化配方现在将正确格式化作为结果添加的生成代码</p><p>成功完成配方的执行管道将生成 Result 实例的集合。每个结果表示对特定源文件所做的更改，并提供对以下信息的访问：</p><table><thead><tr><th style="text-align:left;">Method</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>getBefore()</code></td><td style="text-align:left;">The original <code>SourceFile</code>, or null if the change represents a new file.</td></tr><tr><td style="text-align:left;"><code>getAfter()</code></td><td style="text-align:left;">The modified <code>SourceFile</code>, or null if the change represents a file deletion.</td></tr><tr><td style="text-align:left;"><code>getRecipesThatMadeChanges()</code></td><td style="text-align:left;">The recipe names that made the changes to the source file.</td></tr><tr><td style="text-align:left;"><code>diff()</code>/<code>diff(Path)</code></td><td style="text-align:left;">A git-style diff (with an optional path to relativize file paths in the output)</td></tr></tbody></table><h1 id="markers" tabindex="-1"><a class="header-anchor" href="#markers"><span>Markers</span></a></h1><p>向 LST 添加任意元数据</p><p>标记使用元数据对 LST 元素进行注释。访问者可以读取或将实现 Marker 接口的任何类型附加到任何 LST 元素的 Marker。标记可用于识别搜索结果或在 OpenRewrite 执行期间在配方之间进行通信。当 LST 打印回源代码时，大多数标记（作为元数据）在源代码中没有文本表示形式。例外情况是 SearchResult 标记，它们打印为指示搜索结果的注释。OpenRewrite 将框架提供的标记附加到 LST。</p><p>提供标记的 LST 实现最后有两种添加标记的方法。LST 元素是不可变的，并且包括它们的元数据，因此这些方法返回具有指定标记的 LST 元素的副本。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Returns the existing Markers</span>
<span class="token class-name">Markers</span> <span class="token function">getMarkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Fully replaces any existing Markers</span>
<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">M</span> <span class="token keyword">extends</span> <span class="token class-name">Markable</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">M</span> <span class="token function">withMarkers</span><span class="token punctuation">(</span><span class="token class-name">Markers</span> markers<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reading-markers-from-an-lst-element" tabindex="-1"><a class="header-anchor" href="#reading-markers-from-an-lst-element"><span>Reading Markers from an LST Element</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Returns the first Marker of the specified type.</span>
<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">M</span> <span class="token keyword">extends</span> <span class="token class-name">Marker</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">M</span><span class="token punctuation">&gt;</span></span> <span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">M</span><span class="token punctuation">&gt;</span></span> markerType<span class="token punctuation">)</span>

<span class="token comment">// Returns all Markers of the specified type</span>
<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">M</span> <span class="token keyword">extends</span> <span class="token class-name">Marker</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">M</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">M</span><span class="token punctuation">&gt;</span></span> markerType<span class="token punctuation">)</span>

<span class="token comment">// Add a new marker or update some existing marker via the remappingFunction</span>
<span class="token comment">// The existence of &quot;identity&quot; is determined based on equality</span>
<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">M</span> <span class="token keyword">extends</span> <span class="token class-name">Marker</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Markers</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token class-name">M</span> identity<span class="token punctuation">,</span> <span class="token class-name">BinaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">M</span><span class="token punctuation">&gt;</span></span> remappingFunction<span class="token punctuation">)</span>

<span class="token comment">// Add a new marker or update some existing marker via the remappingFunction</span>
<span class="token comment">// The existence of &quot;identity&quot; is determined based on type equality</span>
<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">M</span> <span class="token keyword">extends</span> <span class="token class-name">Marker</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Markers</span> <span class="token function">computeByType</span><span class="token punctuation">(</span><span class="token class-name">M</span> identity<span class="token punctuation">,</span> <span class="token class-name">BinaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">M</span><span class="token punctuation">&gt;</span></span> remappingFunction<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">SomeVisitor</span> <span class="token keyword">implements</span> <span class="token class-name">JavaVisitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ExecutionContext</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">J<span class="token punctuation">.</span>ClassDeclaration</span> <span class="token function">visitClassDeclaration</span><span class="token punctuation">(</span><span class="token class-name">J<span class="token punctuation">.</span>ClassDeclaration</span> classDecl<span class="token punctuation">,</span> <span class="token class-name">ExecutionContext</span> ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// This snippet will retrieve the root element&#39;s markers in any language, from anywhere in a visitor</span>
        <span class="token class-name">Markers</span> m <span class="token operator">=</span> <span class="token function">getCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">firstEnclosing</span><span class="token punctuation">(</span><span class="token class-name">SourceFile</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMarkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// There is only one of each of these markers, so Markers.findFirst() is a convenient way to access them</span>
        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BuildTool</span><span class="token punctuation">&gt;</span></span> buildTool <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token class-name">BuildTool</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Some markers are language-specific</span>
        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JavaProject</span><span class="token punctuation">&gt;</span></span> javaProject <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token class-name">JavaProject</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> classDecl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在典型的配方中，标记的最常见形式是 SearchResult。将 SearchResult 标记添加到 LST 的 Recipe 被描述为搜索配方。SearchResults 可以选择包含文本说明。将 SearchResult 添加到 LST 元素时，它将作为注释打印到它所附加到的元素旁边。</p><p>在此示例中，搜索配方 FindAnnotations 添加了一个 SearchResult，指示它找到了匹配的 Annotation。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">J<span class="token punctuation">.</span>Annotation</span> <span class="token function">visitAnnotation</span><span class="token punctuation">(</span><span class="token class-name">J<span class="token punctuation">.</span>Annotation</span> annotation<span class="token punctuation">,</span> <span class="token class-name">ExecutionContext</span> ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">J<span class="token punctuation">.</span>Annotation</span> a <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitAnnotation</span><span class="token punctuation">(</span>annotation<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>annotationMatcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>annotation<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        aa <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">withMarkers</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getMarkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">searchResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">J<span class="token punctuation">.</span>Identifier</span> <span class="token function">visitIdentifier</span><span class="token punctuation">(</span><span class="token class-name">J<span class="token punctuation">.</span>Identifier</span> identifier<span class="token punctuation">,</span> <span class="token class-name">ExecutionContext</span> ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">J<span class="token punctuation">.</span>Identifier</span> ident <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitIdentifier</span><span class="token punctuation">(</span>identifier<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNullType</span><span class="token punctuation">(</span>ident<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isAllowedToHaveNullType</span><span class="token punctuation">(</span>ident<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ident <span class="token operator">=</span> ident<span class="token punctuation">.</span><span class="token function">withMarkers</span><span class="token punctuation">(</span>ident<span class="token punctuation">.</span><span class="token function">getMarkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">searchResult</span><span class="token punctuation">(</span><span class="token string">&quot;Identifier type is null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ident<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,199);function nn(sn,an){const a=o("ExternalLinkIcon");return i(),c("div",null,[J,n("p",null,[n("a",L,[s("OpenRewrite"),e(a)]),s(" 是 Java 和其他源代码的重构生态系统。有时，我们需要将依赖关系升级到最新版本、应用安全补丁、取消使用已废弃的 API、从一种技术迁移到另一种技术（例如，"),n("a",_,[s("JUnit asserts 到 AssertJ"),e(a)]),s("），等等。我们可以使用 OpenRewrite 库来应对这些挑战.。")]),I,n("p",null,[n("strong",null,[s("OpenRewrite的主要功能是将"),n("a",O,[s("配方"),e(a)]),s("应用到项目中，从而自动重构源代码")]),s("。OpenRewrite 为常见的转换提供了各种内置配方。每个配方都可以执行特定的重构任务。这些配方用 Java 代码编写，并通过 OpenRewrite Maven 或 Gradle 插件包含在构建过程中。")]),N,n("table",null,[V,n("tbody",null,[F,E,B,P,U,n("tr",null,[Y,n("td",z,[n("a",H,[s("duration"),e(a)])]),Q]),G,n("tr",null,[n("td",K,[n("a",Z,[s("recipeList"),e(a)])]),W,X])])]),$])}const pn=p(R,[["render",nn],["__file","openrewrite.html.vue"]]),on=JSON.parse('{"path":"/tool/openrewrite.html","title":"概述","lang":"zh-CN","frontmatter":{"description":"概述 OpenRewrite 是 Java 和其他源代码的重构生态系统。有时，我们需要将依赖关系升级到最新版本、应用安全补丁、取消使用已废弃的 API、从一种技术迁移到另一种技术（例如，JUnit asserts 到 AssertJ），等等。我们可以使用 OpenRewrite 库来应对这些挑战.。 快速入门 OpenRewrite的主要功能是将配方应...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/tool/openrewrite.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"概述"}],["meta",{"property":"og:description","content":"概述 OpenRewrite 是 Java 和其他源代码的重构生态系统。有时，我们需要将依赖关系升级到最新版本、应用安全补丁、取消使用已废弃的 API、从一种技术迁移到另一种技术（例如，JUnit asserts 到 AssertJ），等等。我们可以使用 OpenRewrite 库来应对这些挑战.。 快速入门 OpenRewrite的主要功能是将配方应..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-10T13:18:27.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:modified_time","content":"2024-06-10T13:18:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"概述\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-10T13:18:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"快速入门","slug":"快速入门","link":"#快速入门","children":[]},{"level":2,"title":"工作机制","slug":"工作机制","link":"#工作机制","children":[]},{"level":2,"title":"基于文本的配方","slug":"基于文本的配方","link":"#基于文本的配方","children":[]},{"level":2,"title":"声明式","slug":"声明式","link":"#声明式","children":[{"level":3,"title":"YAML定制配方","slug":"yaml定制配方","link":"#yaml定制配方","children":[]},{"level":3,"title":"Preconditions","slug":"preconditions","link":"#preconditions","children":[]}]},{"level":2,"title":"Refaster","slug":"refaster","link":"#refaster","children":[]},{"level":2,"title":"命令式","slug":"命令式","link":"#命令式","children":[{"level":3,"title":"编写配方","slug":"编写配方","link":"#编写配方","children":[]},{"level":3,"title":"JavaTemplate","slug":"javatemplate","link":"#javatemplate","children":[]}]},{"level":2,"title":"在项目中使用多个版本的库","slug":"在项目中使用多个版本的库","link":"#在项目中使用多个版本的库","children":[]},{"level":2,"title":"在多个源文件类型上编写食谱","slug":"在多个源文件类型上编写食谱","link":"#在多个源文件类型上编写食谱","children":[]},{"level":2,"title":"在一个配方中创建多个访问者","slug":"在一个配方中创建多个访问者","link":"#在一个配方中创建多个访问者","children":[]},{"level":2,"title":"LST 生命周期","slug":"lst-生命周期","link":"#lst-生命周期","children":[]},{"level":2,"title":"Java LST","slug":"java-lst","link":"#java-lst","children":[{"level":3,"title":"Binary","slug":"binary","link":"#binary","children":[]},{"level":3,"title":"Block","slug":"block","link":"#block","children":[]},{"level":3,"title":"ClassDeclaration","slug":"classdeclaration","link":"#classdeclaration","children":[]},{"level":3,"title":"CompilationUnit","slug":"compilationunit","link":"#compilationunit","children":[]},{"level":3,"title":"Expression","slug":"expression","link":"#expression","children":[]},{"level":3,"title":"FieldAccess","slug":"fieldaccess","link":"#fieldaccess","children":[]},{"level":3,"title":"Identifier","slug":"identifier","link":"#identifier","children":[]},{"level":3,"title":"MethodDeclaration","slug":"methoddeclaration","link":"#methoddeclaration","children":[]},{"level":3,"title":"MethodInvocation","slug":"methodinvocation","link":"#methodinvocation","children":[]},{"level":3,"title":"NewClass","slug":"newclass","link":"#newclass","children":[]},{"level":3,"title":"Statement","slug":"statement","link":"#statement","children":[]},{"level":3,"title":"VariableDeclarations","slug":"variabledeclarations","link":"#variabledeclarations","children":[]}]},{"level":2,"title":"YAML LST","slug":"yaml-lst","link":"#yaml-lst","children":[{"level":3,"title":"Documents","slug":"documents","link":"#documents","children":[]},{"level":3,"title":"Document","slug":"document","link":"#document","children":[]},{"level":3,"title":"Mapping","slug":"mapping","link":"#mapping","children":[]},{"level":3,"title":"Mapping Entry","slug":"mapping-entry","link":"#mapping-entry","children":[]},{"level":3,"title":"Sequence","slug":"sequence","link":"#sequence","children":[]},{"level":3,"title":"Sequence Entry","slug":"sequence-entry","link":"#sequence-entry","children":[]},{"level":3,"title":"Scalar","slug":"scalar","link":"#scalar","children":[]}]},{"level":2,"title":"TreeVisitingPrinter","slug":"treevisitingprinter","link":"#treevisitingprinter","children":[{"level":3,"title":"Reading Markers from an LST Element","slug":"reading-markers-from-an-lst-element","link":"#reading-markers-from-an-lst-element","children":[]}]}],"git":{"createdTime":1718023531000,"updatedTime":1718025507000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":2}]},"readingTime":{"minutes":34.54,"words":10362},"filePathRelative":"tool/openrewrite.md","localizedDate":"2024年6月10日","excerpt":"\\n<p><a href=\\"https://docs.openrewrite.org/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">OpenRewrite</a> 是 Java 和其他源代码的重构生态系统。有时，我们需要将依赖关系升级到最新版本、应用安全补丁、取消使用已废弃的 API、从一种技术迁移到另一种技术（例如，<a href=\\"https://docs.openrewrite.org/recipes/java/testing/assertj/junittoassertj\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JUnit asserts 到 AssertJ</a>），等等。我们可以使用 OpenRewrite 库来应对这些挑战.。</p>","autoDesc":true}');export{pn as comp,on as data};
