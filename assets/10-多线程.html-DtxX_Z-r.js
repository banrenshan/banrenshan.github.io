import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as n,a}from"./app-Brzzz3sI.js";const o={},i=a('<h2 id="并行和并发" tabindex="-1"><a class="header-anchor" href="#并行和并发"><span>并行和并发</span></a></h2><p>并发(concurrent) ：是同一时间应对(dealing with)多件事情的能力。 并行(parallel) ：是同一时间动手做(doing) 多件事情的能力。</p><h2 id="异步和同步" tabindex="-1"><a class="header-anchor" href="#异步和同步"><span>异步和同步</span></a></h2><p>从方法调用的角度来讲，如果</p><ul><li>需要等待结果返回， 才能继续运行就是同步</li><li>不需要等待结果返回，就能继续运行就是异步</li></ul><blockquote><p>注意:同步在多线程中还有另外一层意思，是让多个线程步调一致</p></blockquote><blockquote><p>基准测试工具选择，使用了比较靠谱的<code>JMH</code>， 它会执行程序预热，执行多次测试并平均</p></blockquote><ul><li>单核cpu下，多线程不能实际提高程序运行效率,只是为了能够在不同的任务之间切换,不同线程轮流使用cpu,不至于一个线程总占用cpu,别的线程没法干活</li><li>多核cpu可以并行跑多个线程，但能否提高程序运行效率还是要分情况的 <ul><li>有些任务，经过精心设计,将任务拆分，并行执行，当然可以提高程序的运行效率。但不是所有计算任务都能拆分(参考[阿姆达尔定律] )</li><li>也不是所有任务都需要拆分,任务的目的如果不同，谈拆分和效率没啥意义</li></ul></li><li>IO操作不需要cpu参与,只是我们一般拷贝文件使用的是阻塞IO，这时相当于线程虽然不用cpu,但需要一直等待IO结束，没能充分利用线程。所以才有后面的非阻塞IO和异步IO优化</li></ul>',8),l=[i];function r(c,p){return t(),n("div",null,l)}const s=e(o,[["render",r],["__file","10-多线程.html.vue"]]),u=JSON.parse('{"path":"/gudie/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B.html","title":"多线程","lang":"zh-CN","frontmatter":{"title":"多线程","date":"2024-04-24T00:00:00.000Z","tags":["多线程"],"categories":["java"],"description":"并行和并发 并发(concurrent) ：是同一时间应对(dealing with)多件事情的能力。 并行(parallel) ：是同一时间动手做(doing) 多件事情的能力。 异步和同步 从方法调用的角度来讲，如果 需要等待结果返回， 才能继续运行就是同步 不需要等待结果返回，就能继续运行就是异步 注意:同步在多线程中还有另外一层意思，是让多个线...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/gudie/10-%E5%A4%9A%E7%BA%BF%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"多线程"}],["meta",{"property":"og:description","content":"并行和并发 并发(concurrent) ：是同一时间应对(dealing with)多件事情的能力。 并行(parallel) ：是同一时间动手做(doing) 多件事情的能力。 异步和同步 从方法调用的角度来讲，如果 需要等待结果返回， 才能继续运行就是同步 不需要等待结果返回，就能继续运行就是异步 注意:同步在多线程中还有另外一层意思，是让多个线..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-24T06:29:19.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"多线程"}],["meta",{"property":"article:published_time","content":"2024-04-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-24T06:29:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"多线程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-24T06:29:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"并行和并发","slug":"并行和并发","link":"#并行和并发","children":[]},{"level":2,"title":"异步和同步","slug":"异步和同步","link":"#异步和同步","children":[]}],"git":{"createdTime":1713940159000,"updatedTime":1713940159000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":1}]},"readingTime":{"minutes":1.41,"words":422},"filePathRelative":"gudie/10-多线程.md","localizedDate":"2024年4月24日","excerpt":"<h2>并行和并发</h2>\\n<p>并发(concurrent) ：是同一时间应对(dealing with)多件事情的能力。 并行(parallel) ：是同一时间动手做(doing) 多件事情的能力。</p>\\n<h2>异步和同步</h2>\\n<p>从方法调用的角度来讲，如果</p>\\n<ul>\\n<li>需要等待结果返回， 才能继续运行就是同步</li>\\n<li>不需要等待结果返回，就能继续运行就是异步</li>\\n</ul>\\n<blockquote>\\n<p>注意:同步在多线程中还有另外一层意思，是让多个线程步调一致</p>\\n</blockquote>\\n<blockquote>\\n<p>基准测试工具选择，使用了比较靠谱的<code>JMH</code>， 它会执行程序预热，执行多次测试并平均</p>\\n</blockquote>","autoDesc":true}');export{s as comp,u as data};
