import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o,c as i,b as n,d as a,e,a as t}from"./app-DvhfW1jQ.js";const l={},u=t(`<p><code>spring Cloud</code>构建在<code>Spring Boot</code>之上，提供了两个基础库:<code>Spring Cloud Context</code>和<code>Spring Cloud Commons</code>。</p><ul><li><code>Spring Cloud Context</code>为<code>Spring Cloud</code>应用程序的<code>ApplicationContext</code>提供了实用程序和特殊服务，例如：引导上下文、加密、刷新 Scope 和 Env端点</li><li><code>Spring Cloud Commons</code>为不同的<code>Spring Cloud</code>实现提供抽象规范 ，例如<code>Spring Cloud Netflix</code>和<code>Spring Cloud Consul</code></li></ul><h2 id="spring-cloud-context" tabindex="-1"><a class="header-anchor" href="#spring-cloud-context"><span>Spring Cloud Context</span></a></h2><p><code>spring boot</code> 在spring基础上构建应用程序，例如约定俗成的文件配置规则、通用的端点管理和任务监控。<code>spring cloud</code>在此基础上新添加了一些基础组件。</p><h3 id="bootstrap-context" tabindex="-1"><a class="header-anchor" href="#bootstrap-context"><span>Bootstrap Context</span></a></h3><p>spring cloud 启动时先创建<code>bootstrap </code>上下文，然后创建 <code>application </code>上下文。<code>bootstrap</code>会加载例如git等外部数据源上的配置信息，这些配置优先级比较高，无法被<code>application</code>配置的属性覆盖，但是<code>bootstrap</code>(包括bootstrap-profile.yaml)文件中配置的属性优先级比较低，会被<code>application</code>文件中同属性覆盖。</p><blockquote><ul><li>一般情况下，我们会在bootstrap文件中配置<code>spring.application.name</code>和<code>spring.profiles.active</code></li><li>跟日志配置相关的属性，最好也放在这个文件中</li></ul></blockquote><p>下面是<strong>bootstrap.yml</strong>的示例文件：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> foo
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">uri</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>SPRING_CONFIG_URI<span class="token punctuation">:</span>http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8888</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你使用<code>SpringApplication</code> 或<code>SpringApplicationBuilder</code>构建 <code>app context</code>，<code>Bootstrap </code>会是该<code>context</code>的父级<code>context</code>。<code>子级context</code>继承<code>父级context</code>的属性。</p><p>你可以使用<code>spring.cloud.bootstrap.name</code>修改bootstrap文件的名称，使用<code>spring.cloud.bootstrap.location</code>或<code>spring.cloud.bootstrap.additional-location</code>指定bootstrap文件的位置。</p><p>禁用<code>bootstrap</code>上下文：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.bootstrap.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过bootstrap加载的远程属性默认具有高优先级，本地无法覆盖他们，设置<code>spring.cloud.config.allowOverride=true</code>可以修改此行为，注意该属性必须是远程的，本地无效。设定该属性后，还有配套的两个属性可以更精细化的控制覆盖行为：</p><ul><li><code>spring.cloud.config.overrideNone=true</code>:从任何本地属性源覆盖。</li><li><code>spring.cloud.config.overrideSystemProperties=false</code>:只有系统属性，命令行参数和环境变量才能覆盖远程设置，本地配置文件不行。</li></ul><h3 id="cachedrandompropertysource" tabindex="-1"><a class="header-anchor" href="#cachedrandompropertysource"><span>CachedRandomPropertySource</span></a></h3><p>Spring Cloud Context提供了一个<code>PropertySource</code>，用于缓存基于键的随机值。除了缓存功能之外，它的工作原理与Spring Boot的<code>RandomValuePropertySource</code>相同。如果您想要一个即使在Spring应用程序上下文重新启动后也是一致的随机值，那么这个随机值可能会很有用。属性值采用<code>cachedrandom.[yourkey].[type]</code>的形式。类型值可以是Spring Boot的RandomValuePropertySource支持的任何类型。</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">myrandom</span><span class="token punctuation">=</span><span class="token value attr-value">\${cachedrandom.appname.value}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="自定义外部属性源" tabindex="-1"><a class="header-anchor" href="#自定义外部属性源"><span>自定义外部属性源</span></a></h3><p>bootstrap默认的外部属性源是Spring Cloud Config Server，但是您可以通过将类型为<code>PropertySourceLocator</code>的bean添加到bootstrap上下文(通过<code>spring.factories</code>)来添加其他源。例如，您可以从其他服务器或数据库读取属性。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomPropertySourceLocator</span> <span class="token keyword">implements</span> <span class="token class-name">PropertySourceLocator</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">PropertySource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">locate</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MapPropertySource</span><span class="token punctuation">(</span><span class="token string">&quot;customProperty&quot;</span><span class="token punctuation">,</span>
                <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token function">singletonMap</span><span class="token punctuation">(</span><span class="token string">&quot;property.from.sample.custom.source&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;worked as intended&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>environment是将要创建的ApplicationContext的环境，可以通过他来获取bootstrap配置文件中的属性等。</p><p>此外，还需要在<code>META-INF/spring.factories</code>文件中配置如下内容：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">org.springframework.cloud.bootstrap.BootstrapConfiguration</span><span class="token punctuation">=</span><span class="token value attr-value">sample.custom.CustomPropertySourceLocator</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>添加自定义BootstrapConfiguration时，请注意您添加的类不会被@ComponentScanned错误地添加到您的“主”应用程序上下文中，因为这些类可能不需要。为引导配置类使用单独的包名称，并确保该名称尚未被@ComponentScan或@SpringBootApplication注释的配置类覆盖。</p></blockquote><p>从Spring Cloud 2022.0.3开始，Spring Cloud现在将调用PropertySourceLocators两次。第一次提取将检索不包含任何profiles文件的任何属性源。这些属性源将有机会使用<code>spring.profiles.active</code>激活配置文件。在主应用程序上下文启动后，将再次调用<code>PropertySourceLocators</code>，这一次使用任何active的profile文件，允许PropertySourceLocator定位具有profiles文件的任何其他PropertySources。</p><h3 id="刷新配置" tabindex="-1"><a class="header-anchor" href="#刷新配置"><span>刷新配置</span></a></h3><p>当远程属性源发生变化时，会发送<code>EnvironmentChangeEvent</code>事件，你可以监听这些事件来：</p><ul><li>重新绑定<code>@ConfigurationProperties</code> bean</li><li>修改<code>logger</code>级别</li></ul><p>请注意，默认情况下，Spring Cloud Config Client 不会轮询环境中的更改。 通常，我们不建议使用这种方法来检测更改（尽管您可以使用 @Scheduled 注释进行设置）。 如果您有横向扩展的客户端应用程序，最好将 <code>EnvironmentChangeEvent </code>广播到所有实例，而不是让它们轮询更改（例如，通过使用 Spring Cloud Bus）。</p><p>当配置发生变化时，标记为<code>@RefreshScope</code> 的 Spring <code>@Bean</code> 会得到刷新处理。 需要注意的是<code>@RefreshScope</code> 是懒加载的，在使用它们时（即调用方法时）进行初始化，作用域充当初始化值的缓存。要在下一个方法调用中强制bean重新初始化，必须使其缓存项无效。</p><p>RefreshScope是上下文中的一个bean，它有一个public的refreshAll方法，通过清除目标缓存来刷新作用域中的所有bean。/refresh端点公开此功能（通过HTTP或JMX）。要按名称刷新单个bean，还有一个refresh(String)方法。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> refresh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@RefreshScope（从技术上讲）适用于@Configuration类，但它可能会导致令人惊讶的行为。例如，这并不意味着该类中定义的所有@Beans本身都在@RefreshScope中。具体来说，任何依赖于这些bean的其他bean都不会被更新，除非它本身在@RefreshScope中。在这种情况下，会在刷新时重新构建它，并重新注入它的依赖项。此时，它们将从刷新的@Configuration中重新初始化）。</p><blockquote><p>对于不存在的值，没办法刷新。对于存在的值，刷新操作也不能执行删除的逻辑</p></blockquote><blockquote><p>Spring AOT转换和本机映像不支持上下文刷新。对于AOT和本机映像，spring.cloud.refresh.enabled需要设置为false。</p></blockquote><p>重新启动时无缝刷新bean对于使用JVM检查点还原运行的应用程序（如Project CRaC）尤其有用。为了实现这一功能，我们现在实例化一个<code>RefreshScopeLifecycle </code>bean，该bean在重新启动时触发上下文刷新，从而重新绑定配置属性并刷新任何用<code>@RefreshScope</code>注释的bean。您可以通过将<code>spring.cloud.refresh.on-restart.enabled</code>设置为false来禁用此行为。</p><h3 id="加密和解密" tabindex="-1"><a class="header-anchor" href="#加密和解密"><span>加密和解密</span></a></h3><p>Spring Cloud有一个环境预处理器，用于在本地解密属性值。它遵循与Spring Cloud Config Server相同的规则，并通过<code>encrypt.*</code>具有相同的外部配置。因此，您可以使用<code>{cipher}*</code>形式的加密值，只要有有效的密钥，它们就会在主应用程序上下文获得<code>Environment</code>设置之前解密。要在应用程序中使用加密功能，您需要在类路径中<code>org.springframework.security:spring-security-rsa</code>,并且您还需要JVM中的全强度JCE扩展。</p><h3 id="扩展端点" tabindex="-1"><a class="header-anchor" href="#扩展端点"><span>扩展端点</span></a></h3><ul><li>POST 到 <code>/actuator/env</code> 以更新环境并重新绑定 <code>@ConfigurationProperties</code> bean和日志级别。 要启用此端点，您必须设置 <code>management.endpoint.env.post.enabled=true</code>。</li><li><code>/actuator/refresh</code> 重新加载引导程序上下文并刷新<code>@RefreshScope</code> bean。</li><li><code>/actuator/restart </code>关闭 <code>ApplicationContext </code>并重新启动它（默认情况下禁用）。</li><li><code>/actuator/pause </code>和 <code>/actuator/resume</code> 用于调用生命周期方法（<code>ApplicationContext </code>上的 <code>stop</code> 和 <code>start</code>）。</li></ul><h2 id="spring-cloud-common" tabindex="-1"><a class="header-anchor" href="#spring-cloud-common"><span>Spring Cloud Common</span></a></h2><h3 id="服务发现" tabindex="-1"><a class="header-anchor" href="#服务发现"><span>服务发现</span></a></h3><p>Spring Cloud Commons 提供了 <code>@EnableDiscoveryClient</code> 注解。 这会在<code>META-INF/spring.factories</code>（<code>org.springframework.cloud.client.discovery.EnableDiscoveryClient=xxx</code> ）寻找 <code>DiscoveryClient</code> 或 <code>ReactiveDiscoveryClient</code> 接口的实现。 DiscoveryClient 实现的示例包括 Spring Cloud Netflix Eureka、Spring Cloud Consul Discovery 和 Spring Cloud Zookeeper Discovery。</p><p>启用的相关属性如下：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.discovery.blocking.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">false #禁用阻塞式客户端</span>
<span class="token key attr-name">spring.cloud.discovery.reactive.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">false #禁用响应式客户端</span>
<span class="token key attr-name">spring.cloud.discovery.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">false # 完全禁用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下， <code>DiscoveryClient </code>的实现会自动向远程发现服务器注册本地 Spring Boot 服务器。 可以通过在 <code>@EnableDiscoveryClient</code> 中设置 <code>autoRegister=false</code> 来禁用此行为。</p><blockquote><p><code>@EnableDiscoveryClient</code>不需要显示声明，只要类路径上存在服务发现的类库，就会自动声明。</p></blockquote><p>如果类路径中没有基于注册中心的DiscoveryClient，将使用 SimpleDiscoveryClient 实例，它使用属性来获取有关服务和实例的信息。配置信息如下：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">pring.cloud.discovery.client.simple.instances.service1[0].uri</span><span class="token punctuation">=</span><span class="token value attr-value">http://s11:8080</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Spring 提供了一个 <code>ServiceRegistry </code>接口，该接口提供<code> register(Registration)</code> 和 <code>deregister(Registration)</code> 等方法，让您可以手动注册服务。 Registration是一个标记接口：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token punctuation">(</span>autoRegister<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfiguration</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">ServiceRegistry</span> registry<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyConfiguration</span><span class="token punctuation">(</span><span class="token class-name">ServiceRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>registry <span class="token operator">=</span> registry<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// called through some external process, such as an event or a custom actuator endpoint</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Registration</span> registration <span class="token operator">=</span> <span class="token function">constructRegistration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registration<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个 ServiceRegistry 实现都有自己的 Registry 实现:</p><ul><li><code>ZookeeperRegistration</code> used with <code>ZookeeperServiceRegistry</code></li><li><code>EurekaRegistration</code> used with <code>EurekaServiceRegistry</code></li><li><code>ConsulRegistration</code> used with <code>ConsulServiceRegistry</code></li></ul><blockquote><p>服务自动注册时将触发两个事件。 第一个事件称为 InstancePreRegisteredEvent，在注册服务之前触发。 第二个事件称为 InstanceRegisteredEvent，在注册服务后触发。 您可以注册一个 ApplicationListener(s) 来监听和响应这些事件。</p><p>如果 spring.cloud.service-registry.auto-registration.enabled 属性设置为 false，则不会触发这些事件。</p></blockquote><p>actuator 端点<code>/service-registry</code> 可以查看服务注册的状态以及注册服务。</p><p>如果你的服务器存在多个ip的话，在注册服务的时候，可能想指定某些ip不能向注册中心注册：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">inetutils</span><span class="token punctuation">:</span>
      <span class="token key atrule">ignoredInterfaces</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> docker0
        <span class="token punctuation">-</span> veth.*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>偏向使用某些ip：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">inetutils</span><span class="token punctuation">:</span>
      <span class="token key atrule">preferredNetworks</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token number">192.168</span>
        <span class="token punctuation">-</span> <span class="token number">10.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用回环地址：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">inetutils</span><span class="token punctuation">:</span>
      <span class="token key atrule">useOnlySiteLocalInterfaces</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="负载平衡" tabindex="-1"><a class="header-anchor" href="#负载平衡"><span>负载平衡</span></a></h3><p>依赖：<code>org.springframework.cloud:spring-cloud-starter-loadbalancer</code></p><p>修改某个客户端的负载配置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@LoadBalancerClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;stores&quot;</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> <span class="token class-name">CustomLoadBalancerConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@LoadBalanced</span>
    <span class="token keyword">public</span> <span class="token class-name">WebClient<span class="token punctuation">.</span>Builder</span> <span class="token function">loadBalancedWebClientBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改多个客户端的负载配置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@LoadBalancerClients</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token annotation punctuation">@LoadBalancerClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;stores&quot;</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> <span class="token class-name">StoresLoadBalancerClientConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@LoadBalancerClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;customers&quot;</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> <span class="token class-name">CustomersLoadBalancerClientConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@LoadBalanced</span>
    <span class="token keyword">public</span> <span class="token class-name">WebClient<span class="token punctuation">.</span>Builder</span> <span class="token function">loadBalancedWebClientBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ReactiveLoadBalancer</code>接口定义负载均衡器，Spring实现了两种：轮询和随机。默认实现是<code>RoundRobinLoadBalancer</code>。</p><p><code>ServiceInstanceListSupplier </code>接口定义获取服务实例信息，基于服务发现的<code>DiscoveryClientServiceInstanceListSupplier</code>，下面接受的其他均衡器都是委托<code>DiscoveryClientServiceInstanceListSupplier</code>来获取服务列表，然后做进一步处理。</p><h4 id="负载算法" tabindex="-1"><a class="header-anchor" href="#负载算法"><span>负载算法</span></a></h4><h5 id="weightedserviceinstancelistsupplier" tabindex="-1"><a class="header-anchor" href="#weightedserviceinstancelistsupplier"><span>WeightedServiceInstanceListSupplier</span></a></h5><p>我们使用WeightFunction来计算每个实例的权重。默认情况下，我们尝试从元数据映射中读取和解析权重。如果元数据映射中没有指定权重，则默认情况下此实例的权重为1。</p><p>您可以通过将<code>spring.cloud.loadbalancer.configurations</code>的值设置为<code>weighted</code>或通过提供自己的<code>ServiceInstanceListSupplier </code>bean来配置它:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomLoadBalancerConfiguration</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Bean</span>
	<span class="token keyword">public</span> <span class="token class-name">ServiceInstanceListSupplier</span> <span class="token function">discoveryClientServiceInstanceListSupplier</span><span class="token punctuation">(</span>
			<span class="token class-name">ConfigurableApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token class-name">ServiceInstanceListSupplier</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">withDiscoveryClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">withWeighted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">withCaching</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您还可以通过提供WeightFunction来自定义权重计算逻辑。</p><p>您可以使用此示例配置使所有实例具有随机权重：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomLoadBalancerConfiguration</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Bean</span>
	<span class="token keyword">public</span> <span class="token class-name">ServiceInstanceListSupplier</span> <span class="token function">discoveryClientServiceInstanceListSupplier</span><span class="token punctuation">(</span>
			<span class="token class-name">ConfigurableApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token class-name">ServiceInstanceListSupplier</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">withDiscoveryClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">withWeighted</span><span class="token punctuation">(</span>instance <span class="token operator">-&gt;</span> <span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">withCaching</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="subsetserviceinstancelistsupplier" tabindex="-1"><a class="header-anchor" href="#subsetserviceinstancelistsupplier"><span>SubsetServiceInstanceListSupplier</span></a></h5><p>SubsetServiceInstanceListSupplier实现了一种确定的子集设置算法，以在ServiceInstanceListProvider委托层次结构中选择有限数量的实例:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomLoadBalancerConfiguration</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Bean</span>
	<span class="token keyword">public</span> <span class="token class-name">ServiceInstanceListSupplier</span> <span class="token function">discoveryClientServiceInstanceListSupplier</span><span class="token punctuation">(</span>
			<span class="token class-name">ConfigurableApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token class-name">ServiceInstanceListSupplier</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">withDiscoveryClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">withSubset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">withCaching</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
	    <span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="cachingserviceinstancelistsupplier" tabindex="-1"><a class="header-anchor" href="#cachingserviceinstancelistsupplier"><span>CachingServiceInstanceListSupplier</span></a></h5><p><code>CachingServiceInstanceListSupplier</code>：基于缓存的服务实例列表</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.loadbalancer.cache.ttl</span><span class="token punctuation">=</span><span class="token value attr-value">35</span>
<span class="token key attr-name">spring.cloud.loadbalancer.cache.capacity</span><span class="token punctuation">=</span><span class="token value attr-value">256</span>
<span class="token key attr-name">spring.cloud.loadbalancer.cache.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尽管基本的非缓存实现对于原型设计和测试很有用，但它的效率远低于缓存版本，因此我们建议始终在生产中使用缓存版本。 如果缓存已由 <code>DiscoveryClient </code>实现完成，例如 <code>EurekaDiscoveryClient</code>，则应禁用负载平衡器缓存以防止双重缓存。</p><h5 id="zonepreferenceserviceinstancelistsupplier" tabindex="-1"><a class="header-anchor" href="#zonepreferenceserviceinstancelistsupplier"><span>ZonePreferenceServiceInstanceListSupplier</span></a></h5><p><code>ZonePreferenceServiceInstanceListSupplier</code>:检测相同zone的服务实例列表</p><p>在应用中设置<code>eureka.instance.metadata-map.zone=xx</code>注册实例的zone信息，A调用B时，就会选择和A的zone相同的B,可以通过设置<code>spring.cloud.loadbalancer.zone</code>来调用特定zone的B。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomLoadBalancerConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ServiceInstanceListSupplier</span> <span class="token function">discoveryClientServiceInstanceListSupplier</span><span class="token punctuation">(</span>
            <span class="token class-name">ConfigurableApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ServiceInstanceListSupplier</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">withDiscoveryClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">withZonePreference</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">withCaching</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="healthcheckserviceinstancelistsupplier" tabindex="-1"><a class="header-anchor" href="#healthcheckserviceinstancelistsupplier"><span>HealthCheckServiceInstanceListSupplier</span></a></h5><p>定期检查DiscoveryClientServiceInstanceListSupplier返回的实例是否健康</p><blockquote><p>这种机制在使用 SimpleDiscoveryClient 时特别有用。 对于由实际 Service Registry 支持的客户端，没有必要使用，因为我们在查询外部 ServiceDiscovery 后已经获得了健康的实例。</p></blockquote><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.loadbalancer.health-check.initialDelay</span><span class="token punctuation">=</span>
<span class="token key attr-name">spring.cloud.loadbalancer.health-check.interval</span><span class="token punctuation">=</span>
<span class="token key attr-name">spring.cloud.loadbalancer.health-check.path.default</span><span class="token punctuation">=</span> <span class="token value attr-value">/actuator/health(默认)</span>
<span class="token key attr-name">spring.cloud.loadbalancer.health-check.path.[SERVICE_ID]</span><span class="token punctuation">=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomLoadBalancerConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ServiceInstanceListSupplier</span> <span class="token function">discoveryClientServiceInstanceListSupplier</span><span class="token punctuation">(</span>
            <span class="token class-name">ConfigurableApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ServiceInstanceListSupplier</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">withDiscoveryClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">withHealthChecks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="sameinstancepreferenceserviceinstancelistsupplier" tabindex="-1"><a class="header-anchor" href="#sameinstancepreferenceserviceinstancelistsupplier"><span>SameInstancePreferenceServiceInstanceListSupplier</span></a></h5><p>直接选择先前的实例</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomLoadBalancerConfiguration</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ServiceInstanceListSupplier</span> <span class="token function">discoveryClientServiceInstanceListSupplier</span><span class="token punctuation">(</span>
            <span class="token class-name">ConfigurableApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ServiceInstanceListSupplier</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">withDiscoveryClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">withSameInstancePreference</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="requestbasedstickysessionserviceinstancelistsupplier" tabindex="-1"><a class="header-anchor" href="#requestbasedstickysessionserviceinstancelistsupplier"><span>RequestBasedStickySessionServiceInstanceListSupplier</span></a></h5><p>基于会话粘性，在cookie中存储了实例id，选择的时候，只要匹配实例id就是先前的实例。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomLoadBalancerConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ServiceInstanceListSupplier</span> <span class="token function">discoveryClientServiceInstanceListSupplier</span><span class="token punctuation">(</span>
            <span class="token class-name">ConfigurableApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ServiceInstanceListSupplier</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                   <span class="token punctuation">.</span><span class="token function">withDiscoveryClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                   <span class="token punctuation">.</span><span class="token function">withRequestBasedStickySession</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                   <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="hintbasedserviceinstancelistsupplier" tabindex="-1"><a class="header-anchor" href="#hintbasedserviceinstancelistsupplier"><span>HintBasedServiceInstanceListSupplier</span></a></h5><p>选择命中的实例，用户可以在请求中指定选择那个实例</p><p><code>eureka.instance.metadata-map.hit=xxx</code>设置实例的hit值，然后请求头<code>X-SC-LB-Hint</code>（<code>spring.cloud.loadbalancer.hint-header-name</code>修改此值）传递hit值。HintBasedServiceInstanceListSupplier会比较这两个值，选择具体的实例</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomLoadBalancerConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ServiceInstanceListSupplier</span> <span class="token function">discoveryClientServiceInstanceListSupplier</span><span class="token punctuation">(</span>
            <span class="token class-name">ConfigurableApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ServiceInstanceListSupplier</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                   <span class="token punctuation">.</span><span class="token function">withDiscoveryClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                   <span class="token punctuation">.</span><span class="token function">withHints</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                   <span class="token punctuation">.</span><span class="token function">withCaching</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                   <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="拦截请求" tabindex="-1"><a class="header-anchor" href="#拦截请求"><span>拦截请求</span></a></h4><p>您可以使用选定的 ServiceInstance 来转换负载均衡的 HTTP 请求。</p><p>对于 RestTemplate，需要实现和定义 LoadBalancerRequestTransformer 如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">LoadBalancerRequestTransformer</span> <span class="token function">transformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoadBalancerRequestTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">HttpRequest</span> <span class="token function">transformRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServiceInstance</span> instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequestWrapper</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token class-name">HttpHeaders</span> <span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    headers<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;X-InstanceId&quot;</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span><span class="token function">getInstanceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> headers<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于WebClient，需要实现和定义LoadBalancerClientRequestTransformer如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">LoadBalancerClientRequestTransformer</span> <span class="token function">transformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoadBalancerClientRequestTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">ClientRequest</span> <span class="token function">transformRequest</span><span class="token punctuation">(</span><span class="token class-name">ClientRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServiceInstance</span> instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">ClientRequest</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;X-InstanceId&quot;</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span><span class="token function">getInstanceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果定义了多个转换器，它们将按照定义 Bean 的顺序应用。 或者，您可以使用 <code>LoadBalancerRequestTransformer.DEFAULT_ORDER</code> 或 <code>LoadBalancerClientRequestTransformer.DEFAULT_ORDER </code>来指定顺序。</p><h4 id="生命周期方法" tabindex="-1"><a class="header-anchor" href="#生命周期方法"><span>生命周期方法</span></a></h4><p><code>LoadBalancerLifecycle </code>bean 提供回调方法，名为 <code>onStart(Request request)</code>、<code>onStartRequest(Request request, Response lbResponse) </code>和 <code>onComplete(CompletionContext&lt;RES, T, RC&gt; completionContext)</code>，您应该实现这些方法 指定在负载平衡之前和之后应执行的操作。</p><p>我们提供了一个名为 <code>MicrometerStatsLoadBalancerLifecycle </code>的 <code>LoadBalancerLifecycle </code>bean，它使用 Micrometer 为负载平衡调用提供统计信息。</p><p>为了将此 bean 添加到您的应用程序上下文中，请将 <code>spring.cloud.loadbalancer.stats.micrometer.enabled </code>的值设置为 true 并使用 <code>MeterRegistry</code>（将 Spring Boot Actuator 添加到您的项目中）。<code>MicrometerStatsLoadBalancerLifecycle 在 MeterRegistry </code>中注册以下仪表：</p><ul><li><code>loadbalancer.requests.active</code>：允许您监控任何服务实例的当前活动请求数量的量表（服务实例数据可通过标签获得）；</li><li><code>loadbalancer.requests.success</code>：一个计时器，用于测量已结束将响应传递给底层客户端的任何负载平衡请求的执行时间；</li><li><code>loadbalancer.requests.failed</code>：一个计时器，用于测量任何以异常结束的负载平衡请求的执行时间；</li><li><code>loadbalancer.requests.discard</code>：一个计数器，用于测量被丢弃的负载平衡请求的数量，即负载均衡器尚未检索到运行请求的服务实例的请求。</li></ul><h4 id="客户端" tabindex="-1"><a class="header-anchor" href="#客户端"><span>客户端</span></a></h4><p>负载均衡帮助我们选定具体的实例，然后我们需要通过http的方式访问该示例，这个过程称为客户端调用。具体的客户端实现有RestTemplate，WebClient，openFeign等。</p><h4 id="resttemplate" tabindex="-1"><a class="header-anchor" href="#resttemplate"><span>RestTemplate</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@LoadBalanced</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">doOtherStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> results <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;http://stores/stores&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> results<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="webclient" tabindex="-1"><a class="header-anchor" href="#webclient"><span>WebClient</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@LoadBalanced</span>
    <span class="token keyword">public</span> <span class="token class-name">WebClient<span class="token punctuation">.</span>Builder</span> <span class="token function">loadBalancedWebClientBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">WebClient<span class="token punctuation">.</span>Builder</span> webClientBuilder<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">doOtherStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> webClientBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;http://stores/stores&quot;</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring Cloud Commons 提供了用于创建 Apache HTTP 客户端 (<code>ApacheHttpClientFactory</code>) 和 OK HTTP 客户端 (<code>OkHttpClientFactory</code>) 的 bean。 只有当 OK HTTP jar 位于类路径上时，才会创建 <code>OkHttpClientFactory </code>bean。 此外，Spring Cloud Commons 提供 bean 来创建两个客户端使用的连接管理器：</p><ul><li><code>ApacheHttpClientConnectionManagerFactory </code>用于 Apache HTTP 客户端</li><li><code>OkHttpClientConnectionPoolFactory </code>用于 OK HTTP 客户端。</li></ul><p>如果您想自定义如何在下游项目中创建 HTTP 客户端，您可以提供您自己的这些 bean 的实现。</p><p>此外，如果您提供类型为 <code>HttpClientBuilder </code>或<code>OkHttpClient.Builder</code>的 bean，则默认工厂使用这些构建器作为构建的基础。</p><p>您还可以通过将 <code>spring.cloud.httpclientfactories.apache.enabled</code> 或 <code>spring.cloud.httpclientfactories.ok.enabled</code> 设置为 false 来禁用这些 bean 的创建。</p><blockquote><p>RestTemplate和openfiegn以及其他都是使用这些http客户端发送请求的。RestTemplate和openfiegn地位相同，使用loadbancer选择服务示例，loadbancer使用DiscoveryClient获取所有的服务信息。但凡涉及http请求的，底层都使用http客户端。但是不能保证他们使用了同一个http客户端实例？？？</p></blockquote><h3 id="失败重试" tabindex="-1"><a class="header-anchor" href="#失败重试"><span>失败重试</span></a></h3><p>负载均衡的 RestTemplate 可以配置为重试失败。 默认情况下，此逻辑被禁用。 您可以通过将 Spring Retry 添加到应用程序的类路径来启用它。 对于响 WebTestClient，您需要设置 <code>spring.cloud.loadbalancer.retry.enabled=true</code>。其他相关属性：</p><ul><li><code>spring.cloud.loadbalancer.retry.maxRetriesOnSameServiceInstance</code> - 指示应在同一个 ServiceInstance 上重试请求的次数（为每个选定的实例单独计数）</li><li><code>spring.cloud.loadbalancer.retry.maxRetriesOnNextServiceInstance</code> - 指示应重试新选择的 ServiceInstance 请求的次数</li><li><code>spring.cloud.loadbalancer.retry.retryableStatusCodes </code>- 始终重试失败请求的状态代码。</li></ul><p>对于反应式实现，您还可以设置：</p><ul><li><p><code>spring.cloud.loadbalancer.retry.backoff.minBackof</code>f - 设置最小退避持续时间（默认为 5 毫秒）</p></li><li><p><code>spring.cloud.loadbalancer.retry.backoff.maxBackoff </code>- 设置 最大退避持续时间（默认情况下，最大长值毫秒）</p></li><li><p><code>spring.cloud.loadbalancer.retry.backoff.jitter</code> - 设置用于计算每次调用的实际退避持续时间的抖动（默认情况下，0.5）。</p></li></ul><h3 id="断路器" tabindex="-1"><a class="header-anchor" href="#断路器"><span>断路器</span></a></h3><p>org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j</p><p>org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j</p><p>支持的断路器实现：</p>`,137),r={href:"https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fresilience4j%2Fresilience4j",target:"_blank",rel:"noopener noreferrer"},d={href:"https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Falibaba%2FSentinel",target:"_blank",rel:"noopener noreferrer"},k={href:"https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fspring-projects%2Fspring-retry",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>要在您的代码中创建断路器，您可以使用 <code>CircuitBreakerFactory </code>API。 当您在类路径中包含 Spring Cloud Circuit Breaker starter 时，会自动为您创建一个实现此 API 的 bean。 以下示例显示了如何使用此 API 的简单示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DemoControllerService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> rest<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">CircuitBreakerFactory</span> cbFactory<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">DemoControllerService</span><span class="token punctuation">(</span><span class="token class-name">RestTemplate</span> rest<span class="token punctuation">,</span> <span class="token class-name">CircuitBreakerFactory</span> cbFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>rest <span class="token operator">=</span> rest<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cbFactory <span class="token operator">=</span> cbFactory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">slow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> cbFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;slow&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> rest<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;/slow&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> throwable <span class="token operator">-&gt;</span> <span class="token string">&quot;fallback&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DemoControllerService</span> <span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token class-name">ReactiveCircuitBreakerFactory</span> cbFactory<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">WebClient</span> webClient<span class="token punctuation">;</span>


	<span class="token keyword">public</span> <span class="token class-name">DemoControllerService</span><span class="token punctuation">(</span><span class="token class-name">WebClient</span> webClient<span class="token punctuation">,</span> <span class="token class-name">ReactiveCircuitBreakerFactory</span> cbFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>webClient <span class="token operator">=</span> webClient<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>cbFactory <span class="token operator">=</span> cbFactory<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">slow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> webClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/slow&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>
		it <span class="token operator">-&gt;</span> cbFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;slow&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> throwable <span class="token operator">-&gt;</span> <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;fallback&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以通过创建Customizer类型的bean来配置断路器。Customizer界面有一个单独的方法（称为customize），用于对对象进行自定义。</p><p>一些CircuitBreaker实现，如Resilience4JCiruitBreaker，每次调用CircuitBreaker#run时都会调用自定义方法。它可能效率低下。在这种情况下，可以使用CircuitBreaker#once方法。在多次调用customize没有意义的情况下（例如，在消耗Resilience4j的事件的情况下），它是有用的。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Customizer</span><span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span>circuitBreaker <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
  circuitBreaker<span class="token punctuation">.</span><span class="token function">getEventPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">onStateTransition</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}: {}&quot;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getCircuitBreakerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getStateTransition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token class-name">CircuitBreaker</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function m(b,g){const s=c("ExternalLinkIcon");return o(),i("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[a("Resilience4J"),e(s)])]),n("li",null,[n("a",d,[a("Sentinel"),e(s)])]),n("li",null,[n("a",k,[a("Spring Retry"),e(s)])])]),v])}const f=p(l,[["render",m],["__file","06-spring-cloud-common.html.vue"]]),C=JSON.parse('{"path":"/gudie/06-spring-cloud-common.html","title":"Spring-CLoud-Common","lang":"zh-CN","frontmatter":{"title":"Spring-CLoud-Common","date":"2024-04-20T00:00:00.000Z","categories":["java","spring"],"tags":["spring-cloud"],"description":"spring Cloud构建在Spring Boot之上，提供了两个基础库:Spring Cloud Context和Spring Cloud Commons。 Spring Cloud Context为Spring Cloud应用程序的ApplicationContext提供了实用程序和特殊服务，例如：引导上下文、加密、刷新 Scope 和 Env端...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/gudie/06-spring-cloud-common.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"Spring-CLoud-Common"}],["meta",{"property":"og:description","content":"spring Cloud构建在Spring Boot之上，提供了两个基础库:Spring Cloud Context和Spring Cloud Commons。 Spring Cloud Context为Spring Cloud应用程序的ApplicationContext提供了实用程序和特殊服务，例如：引导上下文、加密、刷新 Scope 和 Env端..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-24T05:26:49.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"spring-cloud"}],["meta",{"property":"article:published_time","content":"2024-04-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-24T05:26:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring-CLoud-Common\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-24T05:26:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"Spring Cloud Context","slug":"spring-cloud-context","link":"#spring-cloud-context","children":[{"level":3,"title":"Bootstrap Context","slug":"bootstrap-context","link":"#bootstrap-context","children":[]},{"level":3,"title":"CachedRandomPropertySource","slug":"cachedrandompropertysource","link":"#cachedrandompropertysource","children":[]},{"level":3,"title":"自定义外部属性源","slug":"自定义外部属性源","link":"#自定义外部属性源","children":[]},{"level":3,"title":"刷新配置","slug":"刷新配置","link":"#刷新配置","children":[]},{"level":3,"title":"加密和解密","slug":"加密和解密","link":"#加密和解密","children":[]},{"level":3,"title":"扩展端点","slug":"扩展端点","link":"#扩展端点","children":[]}]},{"level":2,"title":"Spring Cloud Common","slug":"spring-cloud-common","link":"#spring-cloud-common","children":[{"level":3,"title":"服务发现","slug":"服务发现","link":"#服务发现","children":[]},{"level":3,"title":"负载平衡","slug":"负载平衡","link":"#负载平衡","children":[]},{"level":3,"title":"失败重试","slug":"失败重试","link":"#失败重试","children":[]},{"level":3,"title":"断路器","slug":"断路器","link":"#断路器","children":[]}]}],"git":{"createdTime":1713936409000,"updatedTime":1713936409000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":1}]},"readingTime":{"minutes":14.92,"words":4476},"filePathRelative":"gudie/06-spring-cloud-common.md","localizedDate":"2024年4月20日","excerpt":"<p><code>spring Cloud</code>构建在<code>Spring Boot</code>之上，提供了两个基础库:<code>Spring Cloud Context</code>和<code>Spring Cloud Commons</code>。</p>\\n<ul>\\n<li><code>Spring Cloud Context</code>为<code>Spring Cloud</code>应用程序的<code>ApplicationContext</code>提供了实用程序和特殊服务，例如：引导上下文、加密、刷新 Scope 和 Env端点</li>\\n<li><code>Spring Cloud Commons</code>为不同的<code>Spring Cloud</code>实现提供抽象规范 ，例如<code>Spring Cloud Netflix</code>和<code>Spring Cloud Consul</code></li>\\n</ul>","autoDesc":true}');export{f as comp,C as data};
