import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,a as t}from"./app-CQgLfo2K.js";const e={},p=t(`<h1 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型"><span>泛型</span></a></h1><h2 id="引出泛型" tabindex="-1"><a class="header-anchor" href="#引出泛型"><span>引出泛型</span></a></h2><p>假如我们有个整数求大小的函数，如下:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> a <span class="token operator">&lt;</span> b <span class="token punctuation">{</span>
		<span class="token keyword">return</span> a
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，需求进阶了，我们不仅要求int类型的最小值，还要求float32类型的最小值。为了满足需求，我们不得不再定义一个支持float32类型的函数。</p><p>对于这类重复度非常高的函数，我们最大的期望就是能声明一个通用函数，可以满足所有类型的求最小值。泛型就是为了解决这类问题的， 下面是用泛型扩展后的实现：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> min2<span class="token punctuation">[</span>V <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">float32</span> <span class="token operator">|</span> <span class="token builtin">float64</span><span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b V<span class="token punctuation">)</span> V <span class="token punctuation">{</span>
	<span class="token keyword">if</span> a <span class="token operator">&lt;</span> b <span class="token punctuation">{</span>
		<span class="token keyword">return</span> a
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数名和小括号形参之间，多了一个方括号，用于声明类型参数。类型参数就是用于约束在实际调用这个min函数的时候，可以允许传什么类型的实参给min函数。</p><p>下面是调用示例：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>min2<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>min2<span class="token punctuation">[</span><span class="token builtin">float32</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在上面的示例中，传递了泛型的实际类型，实际上支持类型自动推断，可以写成如下形式：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">min2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">min2</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="自定义类型约束" tabindex="-1"><a class="header-anchor" href="#自定义类型约束"><span>自定义类型约束</span></a></h2><p>我在声明min泛型类型参数约束的时候，用了V int|float32|float64|int32这么一长串文本，是不是觉得太啰唆了，而且可读性也比较差。为了解决这个问题，Go语言为我们提供了自定义类型约束的能力:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Number <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">float32</span> <span class="token operator">|</span> <span class="token builtin">float64</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> min3<span class="token punctuation">[</span>V Number<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b V<span class="token punctuation">)</span> V <span class="token punctuation">{</span>
	<span class="token keyword">if</span> a <span class="token operator">&lt;</span> b <span class="token punctuation">{</span>
		<span class="token keyword">return</span> a
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了使用方便，Go语言给我们内置了一些约束类型。在上面的示例中，我们定义的Number约束类型也可以换成constraints.Ordered，效果是一样的：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;golang.org/x/exp/constraints&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> min4<span class="token punctuation">[</span>V constraints<span class="token punctuation">.</span>Ordered<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b V<span class="token punctuation">)</span> V <span class="token punctuation">{</span>
	<span class="token keyword">if</span> a <span class="token operator">&lt;</span> b <span class="token punctuation">{</span>
		<span class="token keyword">return</span> a
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="any约束" tabindex="-1"><a class="header-anchor" href="#any约束"><span>any约束</span></a></h3><p>约束其实是一个interface，interface{}可以表示任何类型，但是每次都这么写也比较烦琐，所以Go SDK内置了一个any类型别名，这样就简单多了</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> Println <span class="token punctuation">[</span>T <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> Println2 <span class="token punctuation">[</span>T any<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="反射" tabindex="-1"><a class="header-anchor" href="#反射"><span>反射</span></a></h1>`,20),o=[p];function i(c,l){return a(),s("div",null,o)}const d=n(e,[["render",i],["__file","go泛型.html.vue"]]),k=JSON.parse('{"path":"/Go/go%E6%B3%9B%E5%9E%8B.html","title":"Go泛型","lang":"zh-CN","frontmatter":{"title":"Go泛型","date":"2024-04-24T00:00:00.000Z","tags":["Go"],"categories":["Go"],"description":"泛型 引出泛型 假如我们有个整数求大小的函数，如下: 现在，需求进阶了，我们不仅要求int类型的最小值，还要求float32类型的最小值。为了满足需求，我们不得不再定义一个支持float32类型的函数。 对于这类重复度非常高的函数，我们最大的期望就是能声明一个通用函数，可以满足所有类型的求最小值。泛型就是为了解决这类问题的， 下面是用泛型扩展后的实现：...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/Go/go%E6%B3%9B%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"Go泛型"}],["meta",{"property":"og:description","content":"泛型 引出泛型 假如我们有个整数求大小的函数，如下: 现在，需求进阶了，我们不仅要求int类型的最小值，还要求float32类型的最小值。为了满足需求，我们不得不再定义一个支持float32类型的函数。 对于这类重复度非常高的函数，我们最大的期望就是能声明一个通用函数，可以满足所有类型的求最小值。泛型就是为了解决这类问题的， 下面是用泛型扩展后的实现：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-24T08:19:31.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:published_time","content":"2024-04-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-24T08:19:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go泛型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-24T08:19:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"引出泛型","slug":"引出泛型","link":"#引出泛型","children":[]},{"level":2,"title":"自定义类型约束","slug":"自定义类型约束","link":"#自定义类型约束","children":[{"level":3,"title":"any约束","slug":"any约束","link":"#any约束","children":[]}]}],"git":{"createdTime":1713946771000,"updatedTime":1713946771000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":1}]},"readingTime":{"minutes":1.85,"words":554},"filePathRelative":"Go/go泛型.md","localizedDate":"2024年4月24日","excerpt":"\\n<h2>引出泛型</h2>\\n<p>假如我们有个整数求大小的函数，如下:</p>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">func</span> <span class=\\"token function\\">min</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">,</span> b <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">int</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">if</span> a <span class=\\"token operator\\">&lt;</span> b <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> a\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">return</span> b\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
