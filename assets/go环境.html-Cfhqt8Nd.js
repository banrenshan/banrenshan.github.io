import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as t,a}from"./app-Brzzz3sI.js";const i="/assets/image-20231118190136086-DwWZ9Znt.png",s="/assets/image-20231118190144474-DPx9cvOo.png",o={},l=a('<h1 id="包" tabindex="-1"><a class="header-anchor" href="#包"><span>包</span></a></h1><p>也可以定义自己的包，通过包的方式把相同业务、相同职责的代码放在一起。比如你有一个util包，用于存放一些常用的工具函数，项目结构如下所示：</p><figure><img src="'+i+'" alt="image-20231118190136086" tabindex="0" loading="lazy"><figcaption>image-20231118190136086</figcaption></figure><p>在Go语言中，一个包对应一个文件夹，上面的项目结构示例也验证了这一点。在这个示例中，有一个util文件夹，它里面有一个string.go文件，这个Go语言文件就属于util包，它的包定义如下所示：</p><figure><img src="'+s+`" alt="image-20231118190144474" tabindex="0" loading="lazy"><figcaption>image-20231118190144474</figcaption></figure><blockquote><p>Go语言中，所有的定义，比如函数、变量、结构体等，如果首字母是大写，就可以被其他包使用。反之，如果首字母是小写的，就只能在同一个包内使用。</p></blockquote><h2 id="init-函数" tabindex="-1"><a class="header-anchor" href="#init-函数"><span>init 函数</span></a></h2><p>除了main这个特殊的函数外，Go语言还有一个特殊的函数——init，通过它可以实现包级别的一些初始化操作。init函数没有返回值，也没有参数，它先于main函数执行。</p><p>一个包中可以有多个init函数，但是它们的执行顺序并不确定，所以如果你定义了多个init函数的话，要确保它们是相互独立的，一定不要有顺序上的依赖。</p><h2 id="模块" tabindex="-1"><a class="header-anchor" href="#模块"><span>模块</span></a></h2><p>如果包是比较低级的代码组织形式的话，那么模块就是更高级别的。在Go语言中，一个模块可以包含很多个包，所以模块是相关的包的集合。</p><p>Go语言为我们提供了go mod命令来创建一个模块（项目），比如要创建一个demo模块，可以通过如下命令实现：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>go mod init demo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行这一命令后，你会看到已经创建好一个名字为demo的文件夹，里面有一个go.mod文件，它里面的内容如下所示：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>module demo
go 1.20 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>模块名最好以自己的域名开头，比如 www.bai.du/demo，这样就可以很大程度上保证模块名的唯一性，不至于与其他模块重名。</p></blockquote><h3 id="使用第三方模块" tabindex="-1"><a class="header-anchor" href="#使用第三方模块"><span>使用第三方模块</span></a></h3><p>你可以把项目中的公共代码抽取为一个模块，这样就可以供其他项目使用，而不用再重复开发。同理，在GitHub上有很多开源的Go语言项目，它们都是一个个独立的模块，也可以被我们直接使用，提高我们的开发效率，比如Web框架gin-gonic/gin。</p><p>众所周知，在使用第三方模块之前，需要先设置Go代理，也就是GOPROXY，这样我们就可以获取到第三方模块了：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>go env -w GO111MODULE=on
go env -w GOPROXY=https://goproxy.cn,direct
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在实际的项目开发中，除了第三方模块外，还有我们自己开发的模块，放在了公司的GitLab上，这时候就要把公司Git代码库的域名排除在Go代理之外，为此Go语言提供了GOPRIVATE这个环境变量帮助我们达到目的。通过如下命令即可设置GOPRIVATE：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>go env -w GOPRIVATE=*.inner.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一切都准备好就可以使用第三方的模块了，假设我们要使用Gin这个Web框架，首先需要安装它。通过如下命令即可安装Gin这个Web框架：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>go get -u github.com/gin-gonic/gin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装成功后，就可以像Go语言的标准包一样，通过import命令将其导入你的代码中，代码如下所示：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>

	<span class="token string">&quot;github.com/gin-gonic/gin&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;server start&quot;</span><span class="token punctuation">)</span>
	app <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码现在还无法编译通过，因为还没有同步Gin这个模块的依赖，也就是没有把它添加到go.mod文件中。通过如下命令可以添加缺失的模块：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">go</span> mod tidy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>运行这一命令，就可以把缺失的模块添加进来，同时也可以移除不再需要的模块。</p></blockquote>`,29),c=[l];function p(d,r){return n(),t("div",null,c)}const m=e(o,[["render",p],["__file","go环境.html.vue"]]),v=JSON.parse('{"path":"/Go/go%E7%8E%AF%E5%A2%83.html","title":"Go环境","lang":"zh-CN","frontmatter":{"title":"Go环境","date":"2024-04-24T00:00:00.000Z","tags":["Go"],"categories":["Go"],"description":"包 也可以定义自己的包，通过包的方式把相同业务、相同职责的代码放在一起。比如你有一个util包，用于存放一些常用的工具函数，项目结构如下所示： image-20231118190136086image-20231118190136086 在Go语言中，一个包对应一个文件夹，上面的项目结构示例也验证了这一点。在这个示例中，有一个util文件夹，它里面有一...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/Go/go%E7%8E%AF%E5%A2%83.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"Go环境"}],["meta",{"property":"og:description","content":"包 也可以定义自己的包，通过包的方式把相同业务、相同职责的代码放在一起。比如你有一个util包，用于存放一些常用的工具函数，项目结构如下所示： image-20231118190136086image-20231118190136086 在Go语言中，一个包对应一个文件夹，上面的项目结构示例也验证了这一点。在这个示例中，有一个util文件夹，它里面有一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-24T08:19:31.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:published_time","content":"2024-04-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-24T08:19:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go环境\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-24T08:19:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"init 函数","slug":"init-函数","link":"#init-函数","children":[]},{"level":2,"title":"模块","slug":"模块","link":"#模块","children":[{"level":3,"title":"使用第三方模块","slug":"使用第三方模块","link":"#使用第三方模块","children":[]}]}],"git":{"createdTime":1713946771000,"updatedTime":1713946771000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":1}]},"readingTime":{"minutes":3.32,"words":997},"filePathRelative":"Go/go环境.md","localizedDate":"2024年4月24日","excerpt":"\\n<p>也可以定义自己的包，通过包的方式把相同业务、相同职责的代码放在一起。比如你有一个util包，用于存放一些常用的工具函数，项目结构如下所示：</p>\\n<figure><figcaption>image-20231118190136086</figcaption></figure>\\n<p>在Go语言中，一个包对应一个文件夹，上面的项目结构示例也验证了这一点。在这个示例中，有一个util文件夹，它里面有一个string.go文件，这个Go语言文件就属于util包，它的包定义如下所示：</p>\\n<figure><figcaption>image-20231118190144474</figcaption></figure>","autoDesc":true}');export{m as comp,v as data};
