import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,a as t}from"./app-JRZgQj53.js";const e={},p=t(`<p><code>Spring </code>允许您使用<code>@HttpExchange</code>将HTTP服务定义为<code>Java</code>接口。您可以将这样的接口传递给<code>HttpServiceProxyFactory</code>，以创建一个代理，该代理通过<code>HTTP</code>客户端（如<code>RestClient</code>或<code>WebClient</code>）执行请求。您还可以将<code>@Controller</code>实现当作服务器请求处理的接口。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">RepositoryService</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@GetExchange</span><span class="token punctuation">(</span><span class="token string">&quot;/repos/{owner}/{repo}&quot;</span><span class="token punctuation">)</span>
	<span class="token class-name">Repository</span> <span class="token function">getRepository</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> owner<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> repo<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// more HTTP exchange methods...</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，您可以创建一个代理，在调用方法时执行请求:</p><p>RestClient:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RestClient</span> restClient <span class="token operator">=</span> <span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.github.com/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">RestClientAdapter</span> adapter <span class="token operator">=</span> <span class="token class-name">RestClientAdapter</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>restClient<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">HttpServiceProxyFactory</span> factory <span class="token operator">=</span> <span class="token class-name">HttpServiceProxyFactory</span><span class="token punctuation">.</span><span class="token function">builderFor</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">RepositoryService</span> service <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createClient</span><span class="token punctuation">(</span><span class="token class-name">RepositoryService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>WebClient:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">WebClient</span> webClient <span class="token operator">=</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.github.com/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">WebClientAdapter</span> adapter <span class="token operator">=</span> <span class="token class-name">WebClientAdapter</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>webClient<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">HttpServiceProxyFactory</span> factory <span class="token operator">=</span> <span class="token class-name">HttpServiceProxyFactory</span><span class="token punctuation">.</span><span class="token function">builderFor</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">RepositoryService</span> service <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createClient</span><span class="token punctuation">(</span><span class="token class-name">RepositoryService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RestTemplate:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RestTemplate</span> restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
restTemplate<span class="token punctuation">.</span><span class="token function">setUriTemplateHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultUriBuilderFactory</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.github.com/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">RestTemplateAdapter</span> adapter <span class="token operator">=</span> <span class="token class-name">RestTemplateAdapter</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>restTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">HttpServiceProxyFactory</span> factory <span class="token operator">=</span> <span class="token class-name">HttpServiceProxyFactory</span><span class="token punctuation">.</span><span class="token function">builderFor</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">RepositoryService</span> service <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createClient</span><span class="token punctuation">(</span><span class="token class-name">RepositoryService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@HttpExchange 可以标注在类型级别上：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@HttpExchange</span><span class="token punctuation">(</span>url <span class="token operator">=</span> <span class="token string">&quot;/repos/{owner}/{repo}&quot;</span><span class="token punctuation">,</span> accept <span class="token operator">=</span> <span class="token string">&quot;application/vnd.github.v3+json&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">interface</span> <span class="token class-name">RepositoryService</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@GetExchange</span>
	<span class="token class-name">Repository</span> <span class="token function">getRepository</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> owner<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> repo<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token annotation punctuation">@PatchExchange</span><span class="token punctuation">(</span>contentType <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_FORM_URLENCODED_VALUE</span><span class="token punctuation">)</span>
	<span class="token keyword">void</span> <span class="token function">updateRepository</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> owner<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> repo<span class="token punctuation">,</span>
			<span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> description<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> homepage<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="方法参数" tabindex="-1"><a class="header-anchor" href="#方法参数"><span>方法参数</span></a></h2><table><thead><tr><th style="text-align:left;">方法参数</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>URI</code></td><td style="text-align:left;">动态设置请求的URL，覆盖注解的URL属性。</td></tr><tr><td style="text-align:left;"><code>UriBuilderFactory</code></td><td style="text-align:left;">提供 <code>UriBuilderFactory</code>以展开URI模板和URI变量。实际上，将替换基础客户端的<code>UriBuilderFactory</code>（及其基本URL）。</td></tr><tr><td style="text-align:left;"><code>HttpMethod</code></td><td style="text-align:left;">动态设置请求的HTTP方法，覆盖注释的 <code>method </code>属性</td></tr><tr><td style="text-align:left;"><code>@RequestHeader</code></td><td style="text-align:left;">添加一个或多个请求标头。<code>Map&lt;String, ?&gt;</code> or <code>MultiValueMap&lt;String, ?&gt;</code>用于多个请求头； <code>Collection&lt;?&gt;</code> 用于单个请求头。非字符串值支持类型转换。</td></tr><tr><td style="text-align:left;"><code>@PathVariable</code></td><td style="text-align:left;">添加一个变量以展开请求URL中的占位符。参数可以是<code>Map&lt;String, ?&gt;</code> 具有多个变量或单个值。非字符串值支持类型转换。</td></tr><tr><td style="text-align:left;"><code>@RequestAttribute</code></td><td style="text-align:left;">提供一个<code>Object</code>作为请求属性添加。仅受<code>WebClient</code>支持。</td></tr><tr><td style="text-align:left;"><code>@RequestBody</code></td><td style="text-align:left;">将请求的主体提供为要序列化的对象，或反应流发布器，如<code>Mono</code>、<code>Flux</code>，或通过配置的<code>ReactiveAdapterRegistry</code>支持的任何其他异步类型。</td></tr><tr><td style="text-align:left;"><code>@RequestParam</code></td><td style="text-align:left;">添加一个或多个请求参数。参数可以是多个参数的<code>Map&lt;String，？&gt;</code>或<code>MultiValueMap&lt;String，？&gt;</code>或单个参数的<code>Collection&lt;？&gt;</code>。非字符串值支持类型转换。当内容类型设置为<code>application/x-www-form-urlencoded</code>时，请求参数将编码在请求正文中。否则，它们将作为URL查询参数添加。</td></tr><tr><td style="text-align:left;"><code>@RequestPart</code></td><td style="text-align:left;">添加一个请求部分，它可以是String（表单字段）、<code>Resource</code>（文件部分）、Object（要编码的实体，例如JSON）、<code>HttpEntity</code>（部分内容和标题）、Spring <code>part</code>或以上任何一种的Reactive Streams <code>Publisher</code>。</td></tr><tr><td style="text-align:left;"><code>MultipartFile</code></td><td style="text-align:left;">从MultipartFile添加一个请求部分，该部分通常用于Spring MVC控制器，表示上传的文件。</td></tr><tr><td style="text-align:left;"><code>@CookieValue</code></td><td style="text-align:left;">添加一个或多个cookie。参数可以是多个参数的<code> Map&lt;String，？&gt;</code>或<code>MultiValueMap&lt;字符串，？&gt;</code>，单个参数的\`\`Collection&lt;？&gt;\`。非字符串值支持类型转换。</td></tr></tbody></table><h2 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值"><span>返回值</span></a></h2><p>支持的返回值取决于基础客户端。适用于<code>HttpExchangeAdapter</code>的客户端，如<code>RestClient</code>和<code>RestTemplate</code>，支持同步返回值：</p><table><thead><tr><th style="text-align:left;">Method return value</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>void</code></td><td style="text-align:left;">执行给定的请求</td></tr><tr><td style="text-align:left;"><code>HttpHeaders</code></td><td style="text-align:left;">执行给定的请求并返回响应头</td></tr><tr><td style="text-align:left;"><code>&lt;T&gt;</code></td><td style="text-align:left;">执行给定的请求并返回响应体</td></tr><tr><td style="text-align:left;"><code>ResponseEntity&lt;Void&gt;</code></td><td style="text-align:left;">执行给定的请求并返回响应体<code>ResponseEntity</code></td></tr><tr><td style="text-align:left;"><code>ResponseEntity&lt;T&gt;</code></td><td style="text-align:left;">执行给定的请求并返回响应体<code>ResponseEntity</code></td></tr></tbody></table><p>适用于<code>ReactorHttpExchangeAdapter</code>的客户端，如<code>WebClient</code>，支持上述所有功能以及反应式变体。下表显示了反应器类型，但您也可以使用<code>ReactiveAdapterRegistry</code>支持的其他反应器类型：</p><table><thead><tr><th style="text-align:left;">Method return value</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Mono&lt;Void&gt;</code></td><td style="text-align:left;">执行给定的请求，并丢弃响应内容（如果有的话）。</td></tr><tr><td style="text-align:left;"><code>Mono&lt;HttpHeaders&gt;</code></td><td style="text-align:left;">执行给定的请求，丢弃响应内容（如果有的话），并返回响应头。</td></tr><tr><td style="text-align:left;"><code>Mono&lt;T&gt;</code></td><td style="text-align:left;">执行给定的请求，返回响应体</td></tr><tr><td style="text-align:left;"><code>Flux&lt;T&gt;</code></td><td style="text-align:left;">执行给定的请求，并将响应内容解码为声明的元素类型的流。</td></tr><tr><td style="text-align:left;"><code>Mono&lt;ResponseEntity&lt;Void&gt;&gt;</code></td><td style="text-align:left;">执行给定的请求，丢弃响应内容（如果有），并返回带有状态和标头的“ResponseEntity”。</td></tr><tr><td style="text-align:left;"><code>Mono&lt;ResponseEntity&lt;T&gt;&gt;</code></td><td style="text-align:left;">执行给定的请求，将响应内容解码为声明的返回类型，并返回带有状态、标头和解码正文的“ResponseEntity”。</td></tr><tr><td style="text-align:left;"><code>Mono&lt;ResponseEntity&lt;Flux&lt;T&gt;&gt;</code></td><td style="text-align:left;">执行给定的请求，将响应内容解码为声明的元素类型的流，并返回带有状态、标头和解码的响应体流的“ResponseEntity”。</td></tr></tbody></table><p>默认情况下，<code>ReactorHttpExchangeAdapter</code>同步返回值的超时取决于底层HTTP客户端的配置方式。您也可以在适配器级别设置<code>blockTimeout</code>值，但我们建议依赖底层HTTP客户端的超时设置，后者在较低级别运行，并提供更多控制。</p><h2 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h2><p>要自定义错误响应处理，您需要配置底层HTTP客户端。 对于<code>RestClient</code>：默认情况下，<code>RestClient</code>会为<code>4xx</code>和<code>5xx </code>HTTP状态代码引发<code>RestClientException</code>。要进行自定义，请注册一个响应状态处理程序，该处理程序适用于通过客户端执行的所有响应：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RestClient</span> restClient <span class="token operator">=</span> <span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">defaultStatusHandler</span><span class="token punctuation">(</span><span class="token class-name">HttpStatusCode</span><span class="token operator">::</span><span class="token function">isError</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">RestClientAdapter</span> adapter <span class="token operator">=</span> <span class="token class-name">RestClientAdapter</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>restClient<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">HttpServiceProxyFactory</span> factory <span class="token operator">=</span> <span class="token class-name">HttpServiceProxyFactory</span><span class="token punctuation">.</span><span class="token function">builderFor</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于WebClient： 默认情况下，<code>WebClient</code>会为<code>4xx</code>和<code>5xx </code>HTTP状态代码引发<code>WebClientResponseException</code>。要进行自定义，请注册一个响应状态处理程序，该处理程序适用于通过客户端执行的所有响应：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">WebClient</span> webClient <span class="token operator">=</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">defaultStatusHandler</span><span class="token punctuation">(</span><span class="token class-name">HttpStatusCode</span><span class="token operator">::</span><span class="token function">isError</span><span class="token punctuation">,</span> resp <span class="token operator">-&gt;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">WebClientAdapter</span> adapter <span class="token operator">=</span> <span class="token class-name">WebClientAdapter</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>webClient<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">HttpServiceProxyFactory</span> factory <span class="token operator">=</span> <span class="token class-name">HttpServiceProxyFactory</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于RestTemplate： 默认情况下，<code>RestTemplate</code>会为<code>4xx</code>和<code>5xx </code>HTTP状态代码引发<code>RestClientException</code>。要进行自定义，请注册一个错误处理程序，该错误处理程序适用于通过客户端执行的所有响应：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RestTemplate</span> restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
restTemplate<span class="token punctuation">.</span><span class="token function">setErrorHandler</span><span class="token punctuation">(</span>myErrorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">RestTemplateAdapter</span> adapter <span class="token operator">=</span> <span class="token class-name">RestTemplateAdapter</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>restTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">HttpServiceProxyFactory</span> factory <span class="token operator">=</span> <span class="token class-name">HttpServiceProxyFactory</span><span class="token punctuation">.</span><span class="token function">builderFor</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),o=[p];function c(l,i){return a(),s("div",null,o)}const d=n(e,[["render",c],["__file","spring-http-interface.html.vue"]]),k=JSON.parse('{"path":"/Spring/spring-http-interface.html","title":"Spring Http Interface","lang":"zh-CN","frontmatter":{"title":"Spring Http Interface","date":"2024-05-01T00:00:00.000Z","categories":["Spring"],"tags":["Spring","http"],"description":"Spring 允许您使用@HttpExchange将HTTP服务定义为Java接口。您可以将这样的接口传递给HttpServiceProxyFactory，以创建一个代理，该代理通过HTTP客户端（如RestClient或WebClient）执行请求。您还可以将@Controller实现当作服务器请求处理的接口。 现在，您可以创建一个代理，在调用方法时...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/Spring/spring-http-interface.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"Spring Http Interface"}],["meta",{"property":"og:description","content":"Spring 允许您使用@HttpExchange将HTTP服务定义为Java接口。您可以将这样的接口传递给HttpServiceProxyFactory，以创建一个代理，该代理通过HTTP客户端（如RestClient或WebClient）执行请求。您还可以将@Controller实现当作服务器请求处理的接口。 现在，您可以创建一个代理，在调用方法时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-10T12:45:31.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"http"}],["meta",{"property":"article:published_time","content":"2024-05-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-10T12:45:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Http Interface\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-10T12:45:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"方法参数","slug":"方法参数","link":"#方法参数","children":[]},{"level":2,"title":"返回值","slug":"返回值","link":"#返回值","children":[]},{"level":2,"title":"错误处理","slug":"错误处理","link":"#错误处理","children":[]}],"git":{"createdTime":1718023531000,"updatedTime":1718023531000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":1}]},"readingTime":{"minutes":4.68,"words":1403},"filePathRelative":"Spring/spring-http-interface.md","localizedDate":"2024年5月1日","excerpt":"<p><code>Spring </code>允许您使用<code>@HttpExchange</code>将HTTP服务定义为<code>Java</code>接口。您可以将这样的接口传递给<code>HttpServiceProxyFactory</code>，以创建一个代理，该代理通过<code>HTTP</code>客户端（如<code>RestClient</code>或<code>WebClient</code>）执行请求。您还可以将<code>@Controller</code>实现当作服务器请求处理的接口。</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">RepositoryService</span> <span class=\\"token punctuation\\">{</span>\\n\\n\\t<span class=\\"token annotation punctuation\\">@GetExchange</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"/repos/{owner}/{repo}\\"</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token class-name\\">Repository</span> <span class=\\"token function\\">getRepository</span><span class=\\"token punctuation\\">(</span><span class=\\"token annotation punctuation\\">@PathVariable</span> <span class=\\"token class-name\\">String</span> owner<span class=\\"token punctuation\\">,</span> <span class=\\"token annotation punctuation\\">@PathVariable</span> <span class=\\"token class-name\\">String</span> repo<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n\\t<span class=\\"token comment\\">// more HTTP exchange methods...</span>\\n\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
