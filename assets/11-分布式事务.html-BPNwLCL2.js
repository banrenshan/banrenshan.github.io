import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o,c as e,a as i}from"./app-g-OKA8ms.js";const n="/assets/image-20240424134439030-BJ2k1miG.png",r="/assets/image-20240424134530031-voQIaFdx.png",a="/assets/image-20240424134558768-DdKmkLyY.png",s={},l=i('<h1 id="两阶段提交" tabindex="-1"><a class="header-anchor" href="#两阶段提交"><span>两阶段提交</span></a></h1><p><strong>当一个事务跨越多个节点时</strong>，<strong>为了保持事务的ACID特性</strong>，需要<strong>引入协调者组件</strong>来统一掌控所有节点(称作参与者)的操作结果。二阶段提交的算法思路可以概括为：<strong>参与者将操作成败通知协调者，再由协调者根据所有参与者的反馈情报决定各参与者是要提交还是回滚。</strong></p><h2 id="准备阶段" tabindex="-1"><a class="header-anchor" href="#准备阶段"><span>准备阶段</span></a></h2><p>事务<strong>协调者</strong>给每个<strong>参与者</strong>发送<strong>Prepare消息</strong>，每个参与者<strong>要么直接返回失败</strong>，<strong>要么在本地执行事务，写本地的redo和undo日志，但不提交</strong>，到达一种“万事俱备，只欠东风”的状态。</p><p>这个过程中的细节如下：</p><ol><li><strong>协调者</strong>节点向所有参与者节点<strong>询问</strong>是否可以执行<strong>提交操作</strong>，并开始等待各参与者节点的响应。</li><li>参与者节点检查事务权限，执行询问发起为止的所有事务操作，并将Undo信息和Redo信息写入日志。</li><li>如果2执行成功，则返回同意，否则返回终止</li></ol><h2 id="提交阶段" tabindex="-1"><a class="header-anchor" href="#提交阶段"><span>提交阶段</span></a></h2><p>如果协调者收到了参与者的失败消息或者超时，直接给每个参与者发送回滚(Rollback)消息；否则，发送提交(Commit)消息；参与者根据协调者的指令执行提交或者回滚操作，释放所有事务处理过程中使用的锁资源。(注意:必须在最后阶段释放锁资源)</p><h2 id="二阶段提交的缺点" tabindex="-1"><a class="header-anchor" href="#二阶段提交的缺点"><span>二阶段提交的缺点</span></a></h2><ul><li><strong>同步阻塞问题</strong>：执行过程中，所有参与节点都是事务阻塞型的。当参与者占有资源时，其他第三方节点访问资源不得不处于阻塞状态。也就是说从准备阶段到提交阶段完成这段时间，资源是被锁住的。</li><li><strong>单点故障</strong>。由于协调者的重要性，<strong>一旦协调者发生故障。参与者会一直阻塞下去。</strong> 尤其在第二阶段，协调者发生故障，那么所有的参与者还都处于<strong>锁定事务资源的状态中</strong>，而无法继续完成事务操作。如果是协调者挂掉，可以重新选举一个协调者，但是<strong>无法解决因为协调者宕机导致的参与者处于阻塞状态的问题</strong></li><li><strong>数据不一致</strong>。<strong>阶段二中</strong>，当协调者向参与者发送commit请求之后，发生了局部网络异常或者在发送commit请求过程中协调者发生了故障，这会导致只有一部分参与者接受到了commit请求。而在这部分参与者接到commit请求之后就会执行commit操作。但是其他部分未接到commit请求的机器则无法执行事务提交。于是整个分布式系统便出现了数据不一致性的现象。</li></ul><p>由于二阶段提交存在着诸如<strong>同步阻塞、单点问题、脑裂</strong>等缺陷，所以，研究者们在二阶段提交的基础上做了改进，提出了三阶段提交。</p><h1 id="三阶段提交" tabindex="-1"><a class="header-anchor" href="#三阶段提交"><span>三阶段提交</span></a></h1><p>三阶段提交（Three-phase commit），也叫三阶段提交协议（Three-phase commit protocol），是二阶段提交（2PC）的改进版本。</p><figure><img src="'+n+'" alt="image-20240424134439030" tabindex="0" loading="lazy"><figcaption>image-20240424134439030</figcaption></figure><p>与两阶段提交不同的是，三阶段提交有两个改动点：</p><ul><li>引入<strong>超时机制</strong>。同时在协调者和参与者中都引入超时机制。</li><li>在第一阶段和第二阶段中插入一个**准备阶段，**保证了在最后提交阶段之前各参与节点状态的一致。</li></ul><p>也就是说，除了引入超时机制之外，3PC把<strong>2PC的准备阶段再次一分为二</strong>，这样三阶段提交就有<code>CanCommit</code>、<code>PreCommit</code>、<code>DoCommit</code>三个阶段。</p><blockquote><p><strong>为什么要把准备阶段一分为二？</strong></p><p><strong>假设有1个协调者，9个参与者。其中有一个参与者不具备执行该事务的能力。</strong> 协调者发出prepare消息之后，其余参与者都将资源锁住，执行事务，写入undo和redo日志。协调者收到相应之后，发现有一个参与者不能参与。所以，又出一个roolback消息。其余8个参与者，又对消息进行回滚。这样子，是不是做了很多无用功？所以**，**引入can-Commit阶段，<strong>主要是为了在预执行之前，保证所有参与者都具备可执行条件，从而减少资源浪费。</strong></p></blockquote><h2 id="cancommit阶段" tabindex="-1"><a class="header-anchor" href="#cancommit阶段"><span>CanCommit阶段</span></a></h2><p>协调者向参与者发送commit请求，参与者如果可以提交就返回Yes响应，否则返回No响应。具体：</p><ol><li><strong>事务询问</strong> 协调者向参与者发送CanCommit请求。询问是否可以执行事务提交操作。然后开始等待参与者的响应。</li><li><strong>响应反馈</strong> 参与者接到CanCommit请求之后，正常情况下，如果其自身认为可以顺利执行事务，则返回Yes响应，并进入预备状态。否则反馈No</li></ol><h2 id="precommit阶段" tabindex="-1"><a class="header-anchor" href="#precommit阶段"><span>PreCommit阶段</span></a></h2><p>本阶段协调者会根据第一阶段的询盘结果采取相应操作，询盘结果主要有两种：</p><ul><li>假如协调者从所有的参与者获得的反馈都是Yes响应，那么就会执行事务的预执行： <ol><li><strong>发送预提交请求</strong> 协调者向参与者发送PreCommit请求，并进入Prepared阶段。</li><li><strong>事务预提交</strong> 参与者接收到PreCommit请求后，会执行事务操作，并将undo和redo信息记录到事务日志中。</li><li><strong>响应反馈</strong> 如果参与者成功的执行了事务操作，则返回ACK响应，同时开始等待最终指令。</li></ol></li><li>假如有任何一个参与者向协调者发送了No响应，或者等待超时之后，协调者都没有接到参与者的响应，那么就执行事务的中断。具体步骤如下： <ol><li><strong>发送中断请求</strong> 协调者向所有参与者发送abort请求。</li><li><strong>中断事务</strong> 参与者收到来自协调者的abort请求之后（或超时之后，仍未收到协调者的请求），执行事务的中断。</li></ol></li></ul><h2 id="docommit阶段" tabindex="-1"><a class="header-anchor" href="#docommit阶段"><span>doCommit阶段</span></a></h2><p>该阶段进行真正的事务提交，也可以分为以下两种情况。</p><ul><li><strong>执行提交</strong>：协调者向各个参与者发起事务提交请求，具体步骤如下： <ol><li>协调者向所有参与者发送事务commit通知</li><li>所有参与者在收到通知之后执行commit操作，并释放占有的资源</li><li>参与者向协调者反馈事务提交结果</li></ol></li><li><strong>中断事务</strong>:协调者没有接收到参与者发送的ACK响应（可能是接受者发送的不是ACK响应，也可能响应超时），那么就会执行中断事务。具体步骤如下 <ol><li>发送中断请求 协调者向所有参与者发送事务rollback通知。</li><li>事务回滚 所有参与者在收到通知之后执行rollback操作，并释放占有的资源。</li><li>反馈结果 参与者向协调者反馈事务提交结果。</li><li>中断事务 协调者接收到参与者反馈的ACK消息之后，执行事务的中断。</li></ol></li></ul><h1 id="_2pc与3pc的区别" tabindex="-1"><a class="header-anchor" href="#_2pc与3pc的区别"><span>2PC与3PC的区别</span></a></h1><p>在doCommit阶段，如果参与者无法及时接收到来自协调者的doCommit或者rebort请求时，<strong>会在等待超时之后，会默认执行commit。</strong></p><blockquote><p>为啥超时会默认commit,而不是别的策略？</p><p>其实这个应该是基于概率来决定的，当进入第三阶段时，说明参与者在第二阶段已经收到了PreCommit请求，这意味其他节点都同意修改了。所以，当进入第三阶段时，由于网络超时等原因，虽然参与者没有收到commit或者abort响应，但是他有理由相信：执行commit的正确性更高</p></blockquote><p>但是这种机制也会导致数据一致性问题，因为，由于网络原因，协调者发送的abort响应没有及时被参与者接收到，那么参与者在等待超时之后执行了commit操作。这样就和其他接到abort命令并执行回滚的参与者之间存在数据不一致的情况。</p><p><strong>所以无论2pc还是3pc都不能保证数据的一致性。</strong></p><h1 id="xa协议" tabindex="-1"><a class="header-anchor" href="#xa协议"><span>XA协议</span></a></h1><p>最早的分布式事务模型是由 X/Open 国际联盟提出的 X/Open Distributed Transaction Processing（DTP）模型，也称为XA协议。</p><p>XA协议通过一个全局事务管理器与多个资源管理器进行交互。全局事务管理器负责管理全局事务状态和参与事务的资源，资源管理器则负责具体的资源操作，XA协议与应用程序的关系如图所示。</p><figure><img src="'+r+'" alt="image-20240424134530031" tabindex="0" loading="lazy"><figcaption>image-20240424134530031</figcaption></figure><p>XA协议使用两阶段提交来保证分布式事务的原子性，它将提交过程分为准备阶段和提交/回滚阶段。两阶段提交也是XA协议的标准实现。</p><h2 id="seata-xa-模式" tabindex="-1"><a class="header-anchor" href="#seata-xa-模式"><span>Seata XA 模式</span></a></h2><p><strong>seata 的 xa 模式对传统的三阶段提交做了优化，改成了两阶段提交:</strong></p><ol><li>第一阶段首执行 XA 开启、执行 sql、XA 结束三个步骤，之后直接执行 XA prepare</li><li>第二阶段执行 XA commit/rollback。</li></ol><p>mysql 目前是支持 seata xa 模式的两阶段优化的。</p><figure><img src="'+a+'" alt="image-20240424134558768" tabindex="0" loading="lazy"><figcaption>image-20240424134558768</figcaption></figure><ol><li>TM 开启全局事务</li><li>RM 向 TC 注册分支事务</li><li>RM 向 TC 报告分支事务状态</li><li>TC 向 RM 发送 commit/rollback 请求</li><li>TM 结束全局事务</li></ol><h2 id="搭建环境" tabindex="-1"><a class="header-anchor" href="#搭建环境"><span>搭建环境</span></a></h2>',44),c=[l];function m(p,g){return o(),e("div",null,c)}const u=t(s,[["render",m],["__file","11-分布式事务.html.vue"]]),C=JSON.parse('{"path":"/gudie/11-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.html","title":"分布式事务","lang":"zh-CN","frontmatter":{"title":"分布式事务","date":"2021-09-11T19:38:05.000Z","tags":["分布式事务"],"categories":["分布式"],"description":"两阶段提交 当一个事务跨越多个节点时，为了保持事务的ACID特性，需要引入协调者组件来统一掌控所有节点(称作参与者)的操作结果。二阶段提交的算法思路可以概括为：参与者将操作成败通知协调者，再由协调者根据所有参与者的反馈情报决定各参与者是要提交还是回滚。 准备阶段 事务协调者给每个参与者发送Prepare消息，每个参与者要么直接返回失败，要么在本地执行事...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/gudie/11-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"分布式事务"}],["meta",{"property":"og:description","content":"两阶段提交 当一个事务跨越多个节点时，为了保持事务的ACID特性，需要引入协调者组件来统一掌控所有节点(称作参与者)的操作结果。二阶段提交的算法思路可以概括为：参与者将操作成败通知协调者，再由协调者根据所有参与者的反馈情报决定各参与者是要提交还是回滚。 准备阶段 事务协调者给每个参与者发送Prepare消息，每个参与者要么直接返回失败，要么在本地执行事..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-24T06:29:19.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"分布式事务"}],["meta",{"property":"article:published_time","content":"2021-09-11T19:38:05.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-24T06:29:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式事务\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-09-11T19:38:05.000Z\\",\\"dateModified\\":\\"2024-04-24T06:29:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"准备阶段","slug":"准备阶段","link":"#准备阶段","children":[]},{"level":2,"title":"提交阶段","slug":"提交阶段","link":"#提交阶段","children":[]},{"level":2,"title":"二阶段提交的缺点","slug":"二阶段提交的缺点","link":"#二阶段提交的缺点","children":[]},{"level":2,"title":"CanCommit阶段","slug":"cancommit阶段","link":"#cancommit阶段","children":[]},{"level":2,"title":"PreCommit阶段","slug":"precommit阶段","link":"#precommit阶段","children":[]},{"level":2,"title":"doCommit阶段","slug":"docommit阶段","link":"#docommit阶段","children":[]},{"level":2,"title":"Seata XA 模式","slug":"seata-xa-模式","link":"#seata-xa-模式","children":[]},{"level":2,"title":"搭建环境","slug":"搭建环境","link":"#搭建环境","children":[]}],"git":{"createdTime":1713940159000,"updatedTime":1713940159000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":1}]},"readingTime":{"minutes":8.24,"words":2472},"filePathRelative":"gudie/11-分布式事务.md","localizedDate":"2021年9月11日","excerpt":"\\n<p><strong>当一个事务跨越多个节点时</strong>，<strong>为了保持事务的ACID特性</strong>，需要<strong>引入协调者组件</strong>来统一掌控所有节点(称作参与者)的操作结果。二阶段提交的算法思路可以概括为：<strong>参与者将操作成败通知协调者，再由协调者根据所有参与者的反馈情报决定各参与者是要提交还是回滚。</strong></p>\\n<h2>准备阶段</h2>\\n<p>事务<strong>协调者</strong>给每个<strong>参与者</strong>发送<strong>Prepare消息</strong>，每个参与者<strong>要么直接返回失败</strong>，<strong>要么在本地执行事务，写本地的redo和undo日志，但不提交</strong>，到达一种“万事俱备，只欠东风”的状态。</p>","autoDesc":true}');export{u as comp,C as data};
