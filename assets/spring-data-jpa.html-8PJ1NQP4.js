import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as c,c as o,b as s,d as n,e as l,a}from"./app-Crw0g0C7.js";const i={},u=a(`<h1 id="spring-data-repositories" tabindex="-1"><a class="header-anchor" href="#spring-data-repositories"><span>Spring Data Repositories</span></a></h1><p>Spring Data Repositories的目的就是减少数据访问层的样本代码,提高开发效率</p><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h2><p>Spring Data Repositories抽象的核心接口是Repository(此接口是一个空接口,主要用作标记)。 它将域类以及域类的ID类型作为类型参数进行管理。CrudRepository是其扩展接口,为正在管理的实体类提供复杂的CRUD功能。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Repository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">S</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">S</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">ID</span> primaryKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">long</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">T</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">boolean</span> <span class="token function">existsById</span><span class="token punctuation">(</span><span class="token class-name">ID</span> primaryKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// … more functionality omitted.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>我们还提供特定于某项持久化技术的抽象，例如JpaRepository或MongoRepository。这些接口扩展了CrudRepository的功能.</p></blockquote><p>在CrudRepository之上,我们还提供了基于分页的接口:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PagingAndSortingRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">Sort</span> sort<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如,我们要查询第二页数据,可以这样使用</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">PagingAndSortingRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> repository <span class="token operator">=</span> <span class="token comment">// … get access to a bean</span>
<span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PageRequest</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>除了这些查询之外,我们还可以使用基于删除或者统计的隐含查询,例如:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token keyword">long</span> <span class="token function">deleteByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">removeByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">long</span> <span class="token function">countByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="快速入门" tabindex="-1"><a class="header-anchor" href="#快速入门"><span>快速入门</span></a></h2><ol><li>开启JPA注解</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableJpaRepositories</span>
<span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>@EnableJpaRepositories:开启JPA支持,默认扫描标注该注解的类所在包的子包中的Repository接口,可以通过basePackage自定义扫描包</p></blockquote><ol start="2"><li>声明Repository接口</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Repository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">UserEntity</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>测试</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@Autowired</span>
	<span class="token keyword">private</span> <span class="token class-name">UserRepository</span> userRepository<span class="token punctuation">;</span>
	<span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">UserEntity</span> entity <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="定义repository接口" tabindex="-1"><a class="header-anchor" href="#定义repository接口"><span>定义Repository接口</span></a></h2><p>自定义的Repository需要扩展Repository接口或其子接口,并指定域对象和域ID.上面的快速入门,我们已经演示,我们还可以通过注解的方式来定义Repository接口,例如:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RepositoryDefinition</span><span class="token punctuation">(</span>domainClass <span class="token operator">=</span> <span class="token class-name">UserEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>idClass <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">User2Repository</span> <span class="token punctuation">{</span>
    <span class="token class-name">UserEntity</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CrudRepository接口中提供了很多操作底层数据的方法,但很多时候,我们只想暴露其中的一部分方法,我们可以定义一个 baseRepository接口,在里面声明我们想暴露的方法,例如:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@NoRepositoryBean</span>
<span class="token keyword">interface</span> <span class="token class-name">MyBaseRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Repository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">ID</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">S</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">S</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">MyBaseRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token class-name">User</span> <span class="token function">findByEmailAddress</span><span class="token punctuation">(</span><span class="token class-name">EmailAddress</span> emailAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>@NoRepositoryBean:该注解删除也不会影响使用,他的作用是在运行时不要创建该接口的代理实例.</p></blockquote><blockquote><p>😫 spring data查询返回单个实体时,返回的是Optional包装的对象,如果不使用Optional包装的话,返回null.当查询多个实体时,返回的是空的集合,而不是null.</p></blockquote><h3 id="spring的运行时非空检验" tabindex="-1"><a class="header-anchor" href="#spring的运行时非空检验"><span>spring的运行时非空检验</span></a></h3><p><code>package-info.java</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@org.springframework.lang.NonNullApi</span>
<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>acme</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>要想开启非空检验,必须在包上声明@NonNullApi</p></blockquote><p>具体类上的声明：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Repository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token class-name">User</span> <span class="token function">getByEmailAddress</span><span class="token punctuation">(</span><span class="token class-name">EmailAddress</span> emailAddress<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//查询结果为空,抛出EmptyResultDataAccessException</span>

  <span class="token annotation punctuation">@Nullable</span>
  <span class="token class-name">User</span> <span class="token function">findByEmailAddress</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">EmailAddress</span> emailAdress<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//允许查询结果为空</span>

  <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findOptionalByEmailAddress</span><span class="token punctuation">(</span><span class="token class-name">EmailAddress</span> emailAddress<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//参数为空,抛出IllegalArgumentException</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多模块repository" tabindex="-1"><a class="header-anchor" href="#多模块repository"><span>多模块Repository</span></a></h3><p>有时，应用程序需要使用多个Spring Data模块。 在这种情况下，Repository需要区分持久化技术。 当它在类路径上检测到多个Repository时，Spring Data进入严格的Repository配置模式。 严格配置使用Repository或域类的详细信息来区分：</p><ol><li>repository扩展自特定模块,例如JpaRepository</li><li>域类上面标识了特定模块的注解,例如@Entity</li></ol><p>虽然上面的两种方式可以有效帮我们区分具体的持久化技术,但是并不是万能的.为了区分不同的repository,可以使用下面的方式:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableJpaRepositories</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;com.acme.repositories.jpa&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableMongoRepositories</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;com.acme.repositories.mongo&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">interface</span> <span class="token class-name">Configuration</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="定义查询方法" tabindex="-1"><a class="header-anchor" href="#定义查询方法"><span>定义查询方法</span></a></h2><h3 id="查询策略" tabindex="-1"><a class="header-anchor" href="#查询策略"><span>查询策略</span></a></h3><p>spring data中有两种查询方式:</p><ul><li><p>通过解析方法名称构建查询语句</p></li><li><p>自定义查询语句</p></li></ul><p>而所谓的查询策略就是选择上面的哪一种.通过使用@Enable\${store}Repositories的query-lookup-strategy属性来指定查询策略,查询策略分为三种:</p><ol><li>CREATE :使用方法查询</li><li>USE_DECLARED_QUERY:使用声明的查询语句查询,找不到则抛出异常</li><li>CREATE_IF_NOT_FOUND :先找声明语句,找不到使用方法查询,系统默认.</li></ol><h3 id="方法查询" tabindex="-1"><a class="header-anchor" href="#方法查询"><span>方法查询</span></a></h3><p>通过剥离方法上的关键字来构建查询语句,例如find…By, read…By, query…By, count…By,下面是具体的列子</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByEmailAddressAndLastname</span><span class="token punctuation">(</span><span class="token class-name">EmailAddress</span> emailAddress<span class="token punctuation">,</span> <span class="token class-name">String</span> lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Enables the distinct flag for the query</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token function">findDistinctPeopleByLastnameOrFirstname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">,</span> <span class="token class-name">String</span> firstname<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token function">findPeopleDistinctByLastnameOrFirstname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">,</span> <span class="token class-name">String</span> firstname<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Enabling ignoring case for an individual property</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByLastnameIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Enabling ignoring case for all suitable properties</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByLastnameAndFirstnameAllIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">,</span> <span class="token class-name">String</span> firstname<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Enabling static ORDER BY for a query</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByLastnameOrderByFirstnameAsc</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByLastnameOrderByFirstnameDesc</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>表达式通常是属性遍历与可以连接的运算符相结合.您可以将属性表达式与AND和OR组合使用。对于属性表达式，您还可以获得诸如Between，LessThan，GreaterThan和Like之类的运算符的支持。</li><li>方法解析器支持为各个属性设置IgnoreCase标志（例如，findByLastnameIgnoreCase）或支持忽略所有属性大小写(findByLastnameAndFirstnameAllIgnoreCase（…））。</li><li>您可以通过将OrderBy子句附加到引用属性的查询方法并提供排序方向（Asc或Desc）来应用静态排序。</li></ol><p>属性表达式只能引用被管实体的直接属性，如前面的示例所示。 在创建查询时，您已确保已解析的属性是托管域类的属性。 但是，您也可以通过遍历嵌套属性来定义约束。看下面的例子:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByAddressZipCode</span><span class="token punctuation">(</span><span class="token class-name">ZipCode</span> zipCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>假如Persion包含属性Address,Address包含属性ZipCode.该方法创建属性遍历x.address.zipCode。</p><ol><li>解析算法首先将整个部分（AddressZipCode）解释为属性，并检查域类中是否具有该名称的属性（未大写）。如果算法成功，则使用该属性。</li><li>如果没有，算法使用驼峰法则从右侧分成头部和尾部，并尝试查找相应的属性 - 在我们的示例中，AddressZip和Code</li><li>如果算法找到具有该头部的属性，则它采用尾部并继续从那里构建树，以刚刚描述的方式将尾部分开</li><li>如果第一个分割不匹配，算法会将分割点移动到左侧（Address，ZipCode）并继续。</li></ol><p>虽然这应该适用于大多数情况，但算法可能会选择错误的属性。假设Person类也有一个addressZip属性。算法将在第一个拆分轮中匹配，选择错误的属性，然后失败（因为addressZip的类型可能没有code属性）。</p><p>要解决这种歧义，可以在方法名称中使用<code>_</code>来手动定义遍历点。 所以我们的方法名称如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByAddress_ZipCode</span><span class="token punctuation">(</span><span class="token class-name">ZipCode</span> zipCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为我们将下划线字符视为保留字符，所以我们强烈建议遵循标准Java命名约定（即，不在属性名称中使用下划线，而是使用camel case）。</p><p>除了在方法名称上做一些限制之外,我们还可以在方法参数上使用限制条件,例如:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Slice</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">,</span> <span class="token class-name">Sort</span> sort<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="查询结果" tabindex="-1"><a class="header-anchor" href="#查询结果"><span>查询结果</span></a></h4><p>查询方法的结果可以通过使用first或top关键字来限制，这些关键字可以互换使用。 可选的数值可以附加到top或first，以指定要返回的最大结果大小。如果省略该数字，则假定结果大小为1。 以下示例显示如何限制查询大小</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">User</span> <span class="token function">findFirstByOrderByLastnameAsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">User</span> <span class="token function">findTopByOrderByAgeDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryFirst10ByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Slice</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findTop3ByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findFirst10ByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">,</span> <span class="token class-name">Sort</span> sort<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findTop10ByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>java8 流式结果</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;select u from User u&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAllByCustomQueryAndStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">readAllByFirstnameNotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;select u from User u&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">streamAllPaged</span><span class="token punctuation">(</span><span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>异步查询结果</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Async</span>
<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByFirstname</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstname<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Async</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findOneByFirstname</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstname<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Async</span>
<span class="token class-name">ListenableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findOneByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义repository" tabindex="-1"><a class="header-anchor" href="#自定义repository"><span>自定义Repository</span></a></h2><p>有的时候,spring data 提供的Repository不能满足我们的需求,需要我们提供自定义的扩展,自定义需要下面几步</p><p>1.定义接口</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomizedUserRepository</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">someCustomMethod</span><span class="token punctuation">(</span><span class="token class-name">UserEntity</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.定义实现</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomizedUserRepositoryImpl</span> <span class="token keyword">implements</span> <span class="token class-name">CustomizedUserRepository</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">someCustomMethod</span><span class="token punctuation">(</span><span class="token class-name">UserEntity</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;自定义的实现类&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>类名必须以Impl结尾,如果想自己设定后缀，需要修改@EnableJpaRepositories的repositoryImplementationPostfix属性</p></blockquote><p>3.使用</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">User3Repository</span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">,</span> <span class="token class-name">CustomizedUserRepository</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.测试</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>user3Repository<span class="token punctuation">.</span><span class="token function">someCustomMethod</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>🥰需要注意的时,我们自定义的会与系统的方法重名,这时候优先选择自定义的</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">CustomizedSave</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">S</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">S</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">CustomizedSaveImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">CustomizedSave</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">S</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">S</span> entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Your custom implementation</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">CustomizedSave</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">PersonRepository</span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">CustomizedSave</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果自定义两个接口有相同的方法,同时继承这两个接口调用该方法的时候,按照声明的顺序优先调用.</p><p>当您要自定义基本Repository行为以便所有存储库都受到影响时,可以创建一个扩展特定于持久性技术的存储库基类的实现。 然后，此类充当存储库代理的自定义基类，如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">MyRepositoryImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token punctuation">&gt;</span></span>
  <span class="token keyword">extends</span> <span class="token class-name">SimpleJpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">EntityManager</span> entityManager<span class="token punctuation">;</span>

  <span class="token class-name">MyRepositoryImpl</span><span class="token punctuation">(</span><span class="token class-name">JpaEntityInformation</span> entityInformation<span class="token punctuation">,</span>
                          <span class="token class-name">EntityManager</span> entityManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>entityInformation<span class="token punctuation">,</span> entityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Keep the EntityManager around to used from the newly introduced methods.</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>entityManager <span class="token operator">=</span> entityManager<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Transactional</span>
  <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">S</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">S</span> entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// implementation goes here</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableJpaRepositories</span><span class="token punctuation">(</span>repositoryBaseClass <span class="token operator">=</span> <span class="token class-name">MyRepositoryImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">ApplicationConfiguration</span> <span class="token punctuation">{</span> … <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="聚合根发布事件" tabindex="-1"><a class="header-anchor" href="#聚合根发布事件"><span>聚合根发布事件</span></a></h2><p>存储库管理的实体是聚合根。 在域驱动设计应用程序中，这些聚合根通常发布域事件。 Spring Data 提供了一个名为 @DomainEvents 的注释，您可以在聚合根的方法上使用该注释，以使该发布尽可能简单，如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token string">&quot;domainEvents&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span>  <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> gender<span class="token punctuation">;</span><span class="token comment">//1:male;2:female</span>

    <span class="token annotation punctuation">@DomainEvents</span>
    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">domainEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> events<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        events<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PersonSavedEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> events<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@AfterDomainEventPublication</span>
    <span class="token keyword">void</span> <span class="token function">callbackMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenderStatProcessor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">GenderRepository</span> genderRepository<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Async</span>
    <span class="token annotation punctuation">@TransactionalEventListener</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleAfterPersonSavedComplete</span><span class="token punctuation">(</span><span class="token class-name">PersonSavedEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token class-name">GenderStat</span> genderStat <span class="token operator">=</span> genderRepository<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token number">1l</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            genderStat<span class="token punctuation">.</span><span class="token function">setMaleCount</span><span class="token punctuation">(</span>genderStat<span class="token punctuation">.</span><span class="token function">getMaleCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            genderStat<span class="token punctuation">.</span><span class="token function">setFemaleCount</span><span class="token punctuation">(</span>genderStat<span class="token punctuation">.</span><span class="token function">getFemaleCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        genderRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>genderStat<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每次调用 Spring Data 存储库 save(…)、saveAll(…)、delete(…) 或 delete All(…) 方法之一时都会调用这些方法。</p><h2 id="spring-data扩展" tabindex="-1"><a class="header-anchor" href="#spring-data扩展"><span>spring data扩展</span></a></h2><h3 id="querydsl" tabindex="-1"><a class="header-anchor" href="#querydsl"><span>Querydsl</span></a></h3><p>Querydsl是一个框架，可以通过其流畅的API构建静态类型的SQL类查询。</p><p>几个Spring Data模块通过QuerydslPredicateExecutor与Querydsl的集成，如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">QuerydslPredicateExecutor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">Predicate</span> predicate<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">Predicate</span> predicate<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">long</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token class-name">Predicate</span> predicate<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">boolean</span> <span class="token function">exists</span><span class="token punctuation">(</span><span class="token class-name">Predicate</span> predicate<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// … more functionality omitted.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要使用Querydsl支持，请在存储库接口上扩展QuerydslPredicateExecutor，如以下示例所示:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">QuerydslPredicateExecutor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用如下:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Predicate</span> predicate <span class="token operator">=</span> user<span class="token punctuation">.</span>firstname<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;dave&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>lastname<span class="token punctuation">.</span><span class="token function">startsWithIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;mathews&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>predicate<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="web支持" tabindex="-1"><a class="header-anchor" href="#web支持"><span>web支持</span></a></h3><p>开启</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableWebMvc</span>
<span class="token annotation punctuation">@EnableSpringDataWebSupport</span>
<span class="token keyword">class</span> <span class="token class-name">WebConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@EnableSpringDataWebSupport作用如下:</p><ol><li>注册DomainClassConverter,让Spring MVC从请求参数或路径变量中解析存储库管理的域类的实例。</li><li>HandlerMethodArgumentResolver实现让Spring MVC从请求参数中解析Pageable和Sort实例。</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/{id}&quot;</span><span class="token punctuation">)</span>
  <span class="token class-name">String</span> <span class="token function">showUserForm</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">User</span> user<span class="token punctuation">,</span> <span class="token class-name">Model</span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;userForm&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如您所见，该方法直接接收User实例，无需进一步查找。可以通过让SpringMVC首先将路径变量转换为域类的id类型来解析实例，并最终通过在为域类型注册的存储库实例上调用findById（…）来访问实例。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">UserRepository</span> repository<span class="token punctuation">;</span>
  <span class="token class-name">UserController</span><span class="token punctuation">(</span><span class="token class-name">UserRepository</span> repository<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>repository <span class="token operator">=</span> repository<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token annotation punctuation">@RequestMapping</span>
  <span class="token class-name">String</span> <span class="token function">showUsers</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> repository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="jpa使用" tabindex="-1"><a class="header-anchor" href="#jpa使用"><span>JPA使用</span></a></h1><h2 id="非spring-boot配置jpa" tabindex="-1"><a class="header-anchor" href="#非spring-boot配置jpa"><span>非spring boot配置JPA</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableJpaRepositories</span>
<span class="token annotation punctuation">@EnableTransactionManagement</span>
<span class="token keyword">class</span> <span class="token class-name">ApplicationConfig</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">EmbeddedDatabaseBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmbeddedDatabaseBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">EmbeddedDatabaseType</span><span class="token punctuation">.</span><span class="token constant">HSQL</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">LocalContainerEntityManagerFactoryBean</span> <span class="token function">entityManagerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">HibernateJpaVendorAdapter</span> vendorAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HibernateJpaVendorAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    vendorAdapter<span class="token punctuation">.</span><span class="token function">setGenerateDdl</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">LocalContainerEntityManagerFactoryBean</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalContainerEntityManagerFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setJpaVendorAdapter</span><span class="token punctuation">(</span>vendorAdapter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setPackagesToScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.acme.domain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置域对象</span>
    factory<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span><span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> factory<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">PlatformTransactionManager</span> <span class="token function">transactionManager</span><span class="token punctuation">(</span><span class="token class-name">EntityManagerFactory</span> entityManagerFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">JpaTransactionManager</span> txManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JpaTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    txManager<span class="token punctuation">.</span><span class="token function">setEntityManagerFactory</span><span class="token punctuation">(</span>entityManagerFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> txManager<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="启动模式" tabindex="-1"><a class="header-anchor" href="#启动模式"><span>启动模式</span></a></h3><p>默认情况下，Spring Data JPA repository 注册为Spring bean。 它们是单例并被early初始化。 在启动期间，他们已经与JPA EntityManager交互以进行验证和元数据分析。 Spring Framework支持在后台线程中初始化JPA EntityManagerFactory，因为该进程通常在Spring应用程序中占用大量的启动时间。 为了有效地利用后台初始化，我们需要确保尽可能晚地初始化JPA repository。</p><p>可以配置@EnableJpaRepositories的BootstrapMode指定加载模式: DEFAULT ,LAZY, DEFERRED :</p><p>除非使用@Lazy明确注解，否则将early实例化repository。如果没有客户端bean依赖repository实例，那么懒加载才会生效。</p><p>LAZY隐式声明所有存储库bean都是惰性的，客户端bean依赖的repository实例也是惰性的。这意味着，如果客户端bean只是将repository实例赋予字段中而不是在初始化期间使用，则不会实例化repository。初始化实例发生首次交互时。</p><p>DEFERRED基本上与LAZY具有相同的操作模式，但是在ContextRefreshedEvent事件触发repository初始化，以便在应用程序完全启动之前验证repository。 如果您异步引导JPA，不要使用default模式</p><p>如果您异步引导JPA，DEFERRED是一个合理的默认值，因为它将确保Spring Data JPA引导程序仅等待EntityManagerFactory设置，如果EntityManagerFactory本身比初始化所有其他应用程序组件花费更长时间。尽管如此，它确保在应用程序启动之前正确初始化和验证存储库。</p><p>LAZY是测试场景和本地开发的不错选择。</p><h2 id="持久化实体" tabindex="-1"><a class="header-anchor" href="#持久化实体"><span>持久化实体</span></a></h2><p>可以使用CrudRepository.save（…）方法执行保存实体。 它通过使用JPA EntityManager持久化或合并给定实体。 如果实体尚未持久化，则Spring Data JPA会通过调用entityManager.persist（…）方法来保存实体。 否则，它调用entityManager.merge（…）方法。</p><p>Spring Data JPA提供以下策略来检测实体是否是新实体： . Id-Property检查（默认）：默认情况下，Spring Data JPA检查给定实体的identifier属性。如果identifier属性为null，则假定该实体是新的。否则，它被认为不是新的。 . 实现Persistable：如果实体实现了Persistable，Spring Data JPA会将检新委托给实体的isNew（…）方法。 . 实现EntityInformation：您可以通过创建JpaRepositoryFactory的子类并相应地重写getEntityInformation（…）方法来自定义SimpleJpaRepository实现中使用的EntityInformation抽象。然后，您必须将JpaRepositoryFactory的自定义实现注册为Spring bean。请注意，通常没必要这么做。</p><h2 id="查询方法" tabindex="-1"><a class="header-anchor" href="#查询方法"><span>查询方法</span></a></h2><h3 id="查询策略-1" tabindex="-1"><a class="header-anchor" href="#查询策略-1"><span>查询策略</span></a></h3><p>查询实体有三种方式: query method ,named query和query</p><h3 id="query-method" tabindex="-1"><a class="header-anchor" href="#query-method"><span>query method</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Repository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByEmailAddressAndLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> emailAddress<span class="token punctuation">,</span> <span class="token class-name">String</span> lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用JPA标准API创建一个查询，但实质上，这转换为以下查询：<code>select u from User u where u.emailAddress = ?1 and u.lastname = ?2</code></p><table><thead><tr><th>Keyword</th><th>Sample</th><th>JPQL snippet</th></tr></thead><tbody><tr><td>And</td><td>findByLastnameAndFirstname</td><td>… where x.lastname = ?1 and x.firstname = ?2</td></tr><tr><td>Or</td><td>findByLastnameOrFirstname</td><td>… where x.lastname = ?1 or x.firstname = ?2</td></tr><tr><td>Is,Equals</td><td>findByFirstname,findByFirstnameIs,findByFirstnameEquals</td><td>… where x.firstname = ?1</td></tr><tr><td>Between</td><td>findByStartDateBetween</td><td>… where x.startDate between ?1 and ?2</td></tr><tr><td>LessThan</td><td>findByAgeLessThan</td><td>… where x.age &lt; ?1</td></tr><tr><td>LessThanEqual</td><td>findByAgeLessThanEqual</td><td>… where x.age ⇐ ?1</td></tr><tr><td>GreaterThan</td><td>findByAgeGreaterThan</td><td>… where x.age &gt; ?1</td></tr><tr><td>GreaterThanEqual</td><td>findByAgeGreaterThanEqual</td><td>… where x.age &gt;= ?1</td></tr><tr><td>After</td><td>findByStartDateAfter</td><td>… where x.startDate &gt; ?1</td></tr><tr><td>Before</td><td>findByStartDateBefore</td><td>… where x.startDate &lt; ?1</td></tr><tr><td>IsNull</td><td>findByAgeIsNull</td><td>… where x.age is null</td></tr><tr><td>IsNotNull,NotNull</td><td>findByAge(Is)NotNull</td><td>… where x.age not null</td></tr><tr><td>Like</td><td>findByFirstnameLike</td><td>… where x.firstname like ?1</td></tr><tr><td>NotLike</td><td>findByFirstnameNotLike</td><td>… where x.firstname not like ?1</td></tr><tr><td>StartingWith</td><td>findByFirstnameStartingWith</td><td>… where x.firstname like ?1 (parameter bound with appended %)</td></tr><tr><td>EndingWith</td><td>findByFirstnameEndingWith</td><td>… where x.firstname like ?1 (parameter bound with prepended %)</td></tr><tr><td>Containing</td><td>findByFirstnameContaining</td><td>… where x.firstname like ?1 (parameter bound wrapped in %)</td></tr><tr><td>OrderBy</td><td>findByAgeOrderByLastnameDesc</td><td>… where x.age = ?1 order by x.lastname desc</td></tr><tr><td>Not</td><td>findByLastnameNot</td><td>… where x.lastname &lt;&gt; ?1</td></tr><tr><td>In</td><td><code>findByAgeIn(Collection&lt;Age&gt; ages)</code></td><td>… where x.age in ?1</td></tr><tr><td>NotIn</td><td><code>findByAgeNotIn(Collection&lt;Age&gt; ages)</code></td><td>… where x.age not in ?1</td></tr><tr><td>True</td><td>findByActiveTrue()</td><td>… where x.active = true</td></tr><tr><td>False</td><td>findByActiveFalse()</td><td>… where x.active = false</td></tr><tr><td>IgnoreCase</td><td>findByFirstnameIgnoreCase</td><td>… where UPPER(x.firstame) = UPPER(?1)</td></tr></tbody></table><h4 id="name-query" tabindex="-1"><a class="header-anchor" href="#name-query"><span>name query</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@NamedQuery</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;User.findByEmailAddress&quot;</span><span class="token punctuation">,</span>
  query <span class="token operator">=</span> <span class="token string">&quot;select u from User u where u.emailAddress = ?1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">User</span> <span class="token function">findByEmailAddress</span><span class="token punctuation">(</span><span class="token class-name">String</span> emailAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>name query需要声明在实体类上,不能是其他地方.如果sql少的话,这样很方便,sql多的话就不便维护了.</p><h4 id="query" tabindex="-1"><a class="header-anchor" href="#query"><span>query</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;select u from User u where u.emailAddress = ?1&quot;</span><span class="token punctuation">)</span>
  <span class="token class-name">User</span> <span class="token function">findByEmailAddress</span><span class="token punctuation">(</span><span class="token class-name">String</span> emailAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般情况下,named query和query使用的都是JPQL,如果要使用SQL,请参考下面的示例:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;SELECT * FROM USERS WHERE EMAIL_ADDRESS = ?1&quot;</span><span class="token punctuation">,</span> nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token class-name">User</span> <span class="token function">findByEmailAddress</span><span class="token punctuation">(</span><span class="token class-name">String</span> emailAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用分页" tabindex="-1"><a class="header-anchor" href="#使用分页"><span>使用分页</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;SELECT * FROM USERS WHERE LASTNAME = ?1&quot;</span><span class="token punctuation">,</span>
    countQuery <span class="token operator">=</span> <span class="token string">&quot;SELECT count(*) FROM USERS WHERE LASTNAME = ?1&quot;</span><span class="token punctuation">,</span>
    nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="query使用排序" tabindex="-1"><a class="header-anchor" href="#query使用排序"><span>query使用排序</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;select u from User u where u.lastname like ?1%&quot;</span><span class="token punctuation">)</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByAndSort</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">,</span> <span class="token class-name">Sort</span> sort<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;select u.id, LENGTH(u.firstname) as fn_len from User u where u.lastname like ?1%&quot;</span><span class="token punctuation">)</span>
  <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token function">findByAsArrayAndSort</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">,</span> <span class="token class-name">Sort</span> sort<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

repo<span class="token punctuation">.</span><span class="token function">findByAndSort</span><span class="token punctuation">(</span><span class="token string">&quot;lannister&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Sort</span><span class="token punctuation">(</span><span class="token string">&quot;firstname&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
repo<span class="token punctuation">.</span><span class="token function">findByAndSort</span><span class="token punctuation">(</span><span class="token string">&quot;stark&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Sort</span><span class="token punctuation">(</span><span class="token string">&quot;LENGTH(firstname)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//抛出异常,默认情况下拒绝排序的时候使用函数</span>
repo<span class="token punctuation">.</span><span class="token function">findByAndSort</span><span class="token punctuation">(</span><span class="token string">&quot;targaryen&quot;</span><span class="token punctuation">,</span> <span class="token class-name">JpaSort</span><span class="token punctuation">.</span><span class="token function">unsafe</span><span class="token punctuation">(</span><span class="token string">&quot;LENGTH(firstname)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果要使用函数,需要使用JpaSort.unsafe</span>
repo<span class="token punctuation">.</span><span class="token function">findByAsArrayAndSort</span><span class="token punctuation">(</span><span class="token string">&quot;bolton&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Sort</span><span class="token punctuation">(</span><span class="token string">&quot;fn_len&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="具名参数" tabindex="-1"><a class="header-anchor" href="#具名参数"><span>具名参数</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;select u from User u where u.firstname = :firstname or u.lastname = :lastname&quot;</span><span class="token punctuation">)</span>
  <span class="token class-name">User</span> <span class="token function">findByLastnameOrFirstname</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;lastname&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> lastname<span class="token punctuation">,</span>
                                 <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;firstname&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> firstname<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="spel表达式" tabindex="-1"><a class="header-anchor" href="#spel表达式"><span>Spel表达式</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Id</span>
  <span class="token annotation punctuation">@GeneratedValue</span>
  <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

  <span class="token class-name">String</span> lastname<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;select u from #{#entityName} u where u.lastname = ?1&quot;</span><span class="token punctuation">)</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="更改或删除实体" tabindex="-1"><a class="header-anchor" href="#更改或删除实体"><span>更改或删除实体</span></a></h4><p>更改实体</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Modifying</span>
<span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;update User u set u.firstname = ?1 where u.lastname = ?2&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">int</span> <span class="token function">setFixedFirstnameFor</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstname<span class="token punctuation">,</span> <span class="token class-name">String</span> lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除实体</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Repository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token keyword">void</span> <span class="token function">deleteByRoleId</span><span class="token punctuation">(</span><span class="token keyword">long</span> roleId<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Modifying</span>
  <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;delete from User u where user.role.id = ?1&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">void</span> <span class="token function">deleteInBulkByRoleId</span><span class="token punctuation">(</span><span class="token keyword">long</span> roleId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="query-hints" tabindex="-1"><a class="header-anchor" href="#query-hints"><span>Query Hints</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Repository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@QueryHints</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@QueryHint</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
              forCounting <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="fetch-and-loadgraphs" tabindex="-1"><a class="header-anchor" href="#fetch-and-loadgraphs"><span>Fetch and LoadGraphs</span></a></h4><p>在面对一对多的映射关系的时候,JPA默认采用的是懒加载.此时如果我们要取出集合中的内容,可能会发出多条Sql语句,这样就会出现sql过多的情况,JPA提供了@NamedEntityGraph注解来解决这个问题,</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@NamedEntityGraph</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;GroupInfo.detail&quot;</span><span class="token punctuation">,</span>
  attributeNodes <span class="token operator">=</span> <span class="token annotation punctuation">@NamedAttributeNode</span><span class="token punctuation">(</span><span class="token string">&quot;members&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GroupInfo</span> <span class="token punctuation">{</span>

  <span class="token comment">// default fetch mode is lazy.</span>
  <span class="token annotation punctuation">@ManyToMany</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GroupMember</span><span class="token punctuation">&gt;</span></span> members <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GroupMember</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  …
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GroupRepository</span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GroupInfo</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@EntityGraph</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;GroupInfo.detail&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">EntityGraphType</span><span class="token punctuation">.</span><span class="token constant">LOAD</span><span class="token punctuation">)</span> 
  <span class="token class-name">GroupInfo</span> <span class="token function">getByGroupName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>引用LoadGraphs,EntityGraphType.LOAD的作用是设定该字段是eager加载,其他字段跟随默认.EntityGraphType.FETCH也是eager加载,但其他字段懒加载</p></blockquote><p>上面的配置方式比较繁琐,可以通过下面的简化:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GroupRepository</span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GroupInfo</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@EntityGraph</span><span class="token punctuation">(</span>attributePaths <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;members&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token class-name">GroupInfo</span> <span class="token function">getByGroupName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="投影" tabindex="-1"><a class="header-anchor" href="#投影"><span>投影</span></a></h4><p>Spring Data查询方法通常返回由存储库管理的聚合根的一个或多个实例。但是，有时可能需要根据这些类型的某些属性创建投影。SpringData允许建模专用返回类型，以更有选择地检索托管聚合的部分视图。</p><p>假设我们的聚合根是下面的列子:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Id</span> <span class="token class-name">UUID</span> id<span class="token punctuation">;</span>
  <span class="token class-name">String</span> firstname<span class="token punctuation">,</span> lastname<span class="token punctuation">;</span>
  <span class="token class-name">Address</span> address<span class="token punctuation">;</span>

  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> zipCode<span class="token punctuation">,</span> city<span class="token punctuation">,</span> street<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">PersonRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Repository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> UUID<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在假设我们只想检索Person的姓名属性。 Spring Data提供了什么方法来实现这一目标？ 本章的其余部分回答了这个问题。</p><h5 id="基于接口的投影" tabindex="-1"><a class="header-anchor" href="#基于接口的投影"><span>基于接口的投影</span></a></h5><p>将查询结果限制为仅名称属性的最简单方法是声明一个接口，该接口公开要读取的属性的访问器方法，如下:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>interface NamesOnly {

  String getFirstname();
  String getLastname();
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里重要的一点是，此处定义的属性与聚合根中的属性完全匹配。 这样做可以添加查询方法，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">PersonRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Repository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> UUID<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NamesOnly</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询引擎在运行时为返回的每个元素创建该接口的代理实例，并将暴露方法的调用转发给目标对象。</p><p>可以递归使用。 如果您还想包含一些地址信息，请为其创建一个投影接口，并从getAddress（）声明中返回该接口，如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">PersonSummary</span> <span class="token punctuation">{</span>

  <span class="token class-name">String</span> <span class="token function">getFirstname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">String</span> <span class="token function">getLastname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">AddressSummary</span> <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">interface</span> <span class="token class-name">AddressSummary</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="闭合投影" tabindex="-1"><a class="header-anchor" href="#闭合投影"><span>闭合投影</span></a></h6><p>其访问器方法都与目标聚合的属性匹配的投影接口被认为是闭合投影。下面是一个闭合投影的例子</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">NamesOnly</span> <span class="token punctuation">{</span>

  <span class="token class-name">String</span> <span class="token function">getFirstname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">String</span> <span class="token function">getLastname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用闭合投影，Spring Data可以优化查询执行，因为我们知道投影代理所需的所有属性。</p><h6 id="开放投影" tabindex="-1"><a class="header-anchor" href="#开放投影"><span>开放投影</span></a></h6><p>投影接口中的访问器方法也可以使用@Value注释来计算新值 ,例如:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">NamesOnly</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{target.firstname + &#39; &#39; + target.lastname}&quot;</span><span class="token punctuation">)</span> 
  <span class="token class-name">String</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  …
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，Spring Data无法应用查询执行优化，因为SpEL表达式可以使用聚合根的任何属性。</p><p>@Value中使用的表达式不应该太复杂 - 应该避免使用el表达式。 对于非常简单的表达式，一个选项可能是采用默认方法（在Java 8中引入），如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">NamesOnly</span> <span class="token punctuation">{</span>

  <span class="token class-name">String</span> <span class="token function">getFirstname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">String</span> <span class="token function">getLastname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">default</span> <span class="token class-name">String</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">getFirstname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">getLastname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方法要求您能够纯粹基于投影接口上公开的其他访问器方法实现逻辑。第二个更灵活的选项是在Spring bean中实现自定义逻辑，然后从SpEL表达式调用它，如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token punctuation">{</span>

  <span class="token class-name">String</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    …
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">NamesOnly</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{@myBean.getFullName(target)}&quot;</span><span class="token punctuation">)</span>
  <span class="token class-name">String</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  …
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意SpEL表达式如何引用myBean并调用getFullName（…）方法并将投影目标转发为方法参数。</p><p>由SpEL表达式支持的方法也可以使用方法参数，然后可以从表达式引用它们。 方法参数可通过名为args的Object数组获得。 以下示例显示如何从args数组获取方法参数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">NamesOnly</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{args[0] + &#39; &#39; + target.firstname + &#39;!&#39;}&quot;</span><span class="token punctuation">)</span>
  <span class="token class-name">String</span> <span class="token function">getSalutation</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次强调，对于更复杂的表达式，您应该使用Spring bean并让表达式调用方法</p><h5 id="基于类的投影-dto" tabindex="-1"><a class="header-anchor" href="#基于类的投影-dto"><span>基于类的投影(DTO)</span></a></h5><p>定义投影的另一种方法是使用值类型DTO（数据传输对象），它包含应该检索的字段的属性。这些DTO类型使用方式和接口几乎相同，除了不发生代理并且不能应用嵌套投影。</p><p>如果要通过限定字段来优化查询效率,被查询的字段通过构造函数的参数被暴露,例如:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">NamesOnly</span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> firstname<span class="token punctuation">,</span> lastname<span class="token punctuation">;</span>

  <span class="token class-name">NamesOnly</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstname<span class="token punctuation">,</span> <span class="token class-name">String</span> lastname<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>firstname <span class="token operator">=</span> firstname<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>lastname <span class="token operator">=</span> lastname<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">String</span> <span class="token function">getFirstname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstname<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">String</span> <span class="token function">getLastname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastname<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// equals(…) and hashCode() implementations</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="动态投影" tabindex="-1"><a class="header-anchor" href="#动态投影"><span>动态投影</span></a></h5><p>到目前为止，我们已经使用投影类型作为集合的返回类型或元素类型。 但是，您可能希望选择要在调用时使用的类型（动态类型）。 要应用动态投影，请使用查询方法，如以下示例中所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">PersonRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Repository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> UUID<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token class-name">PersonRepository</span> people<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> aggregates <span class="token operator">=</span>
    people<span class="token punctuation">.</span><span class="token function">findByLastname</span><span class="token punctuation">(</span><span class="token string">&quot;Matthews&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NamesOnly</span><span class="token punctuation">&gt;</span></span> aggregates <span class="token operator">=</span>
    people<span class="token punctuation">.</span><span class="token function">findByLastname</span><span class="token punctuation">(</span><span class="token string">&quot;Matthews&quot;</span><span class="token punctuation">,</span> <span class="token class-name">NamesOnly</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="存储过程" tabindex="-1"><a class="header-anchor" href="#存储过程"><span>存储过程</span></a></h2><p>JPA 2.1规范增加了使用JPA条件查询API调用存储过程的功能。 我们引入了@Procedure注释，用于在repository方法上声明存储过程元数据。</p><p>下面是我们声明的存储过程:</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token operator">/</span><span class="token punctuation">;</span>
<span class="token keyword">DROP</span> <span class="token keyword">procedure</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> plus1inout
<span class="token operator">/</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">procedure</span> plus1inout <span class="token punctuation">(</span><span class="token operator">IN</span> arg <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">OUT</span> res <span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span> ATOMIC
 <span class="token keyword">set</span> res <span class="token operator">=</span> arg <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">END</span>
<span class="token operator">/</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实体类上声明存储过程</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@NamedStoredProcedureQuery</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;User.plus1&quot;</span><span class="token punctuation">,</span> procedureName <span class="token operator">=</span> <span class="token string">&quot;plus1inout&quot;</span><span class="token punctuation">,</span> parameters <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@StoredProcedureParameter</span><span class="token punctuation">(</span>mode <span class="token operator">=</span> <span class="token class-name">ParameterMode</span><span class="token punctuation">.</span><span class="token constant">IN</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">&quot;arg&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token annotation punctuation">@StoredProcedureParameter</span><span class="token punctuation">(</span>mode <span class="token operator">=</span> <span class="token class-name">ParameterMode</span><span class="token punctuation">.</span><span class="token constant">OUT</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">&quot;res&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在存储库方法上调用存储过程,有多种方式,例如:</p><p>value形式</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Procedure</span><span class="token punctuation">(</span><span class="token string">&quot;plus1inout&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">Integer</span> <span class="token function">explicitlyNamedPlus1inout</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>procedureName形式</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Procedure</span><span class="token punctuation">(</span>procedureName <span class="token operator">=</span> <span class="token string">&quot;plus1inout&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">Integer</span> <span class="token function">plus1inout</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>name形式</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Procedure</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;User.plus1IO&quot;</span><span class="token punctuation">)</span> <span class="token comment">//需要测试一下,IO代表什么,或许是文档错误</span>
<span class="token class-name">Integer</span> <span class="token function">entityAnnotatedCustomNamedProcedurePlus1IO</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;arg&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>隐式形式</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Procedure</span>
<span class="token class-name">Integer</span> <span class="token function">plus1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;arg&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="specifications" tabindex="-1"><a class="header-anchor" href="#specifications"><span>Specifications</span></a></h2><p>JPA2引入了一个标准API，您可以使用它以编程方式构建查询。通过编写criteria，可以为域类定义查询的where子句。再退一步，可以将这些标准视为JPA标准API约束描述的实体的谓词(predicate)。</p><p>Spring Data JPA采用Eric Evans的书“Domain Driven Design”中的Specifications概念。要支持此功能，可以让你的存储库接口继承JpaSpecificationExecutor接口，如下所示:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomerRepository</span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">JpaSpecificationExecutor</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JpaSpecificationExecutor接口</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">JpaSpecificationExecutor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findOne</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> spec<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> spec<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> spec<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> spec<span class="token punctuation">,</span> <span class="token class-name">Sort</span> sort<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">long</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> spec<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Specification接口</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token class-name">Predicate</span> <span class="token function">toPredicate</span><span class="token punctuation">(</span><span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">,</span> <span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> query<span class="token punctuation">,</span>
            <span class="token class-name">CriteriaBuilder</span> builder<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以轻松地使用Specification在实体之上构建可扩展的predicates ，然后可以将其与JpaRepository结合使用，而无需为每个所需组合声明查询（方法），如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerSpecs</span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span> <span class="token function">isLongTermCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">public</span> <span class="token class-name">Predicate</span> <span class="token function">toPredicate</span><span class="token punctuation">(</span><span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">,</span> <span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> query<span class="token punctuation">,</span>
            <span class="token class-name">CriteriaBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>

         <span class="token class-name">LocalDate</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minusYears</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">lessThan</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>_Customer<span class="token punctuation">.</span>createdAt<span class="token punctuation">)</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span> <span class="token function">hasSalesOfMoreThan</span><span class="token punctuation">(</span><span class="token class-name">MontaryAmount</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">public</span> <span class="token class-name">Predicate</span> <span class="token function">toPredicate</span><span class="token punctuation">(</span><span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">,</span> <span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> query<span class="token punctuation">,</span>
            <span class="token class-name">CriteriaBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>

         <span class="token comment">// build query here</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span> customers <span class="token operator">=</span> customerRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token function">isLongTermCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>_Customer类型是使用JPA Metamodel生成器生成的元模型类型（有关示例，<a href="JPA-Metamodel-Generator.adoc">Metamodel</a>）。因此，表达式_Customer.createdAt假定Customer具有Date类型的createdAt属性。</p></blockquote><p>Specification 可以组合使用,例如:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">MonetaryAmount</span> amount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MonetaryAmount</span><span class="token punctuation">(</span><span class="token number">200.0</span><span class="token punctuation">,</span> <span class="token class-name">Currencies</span><span class="token punctuation">.</span><span class="token constant">DOLLAR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span> customers <span class="token operator">=</span> customerRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>
  <span class="token function">isLongTermCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token function">hasSalesOfMoreThan</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用example查询" tabindex="-1"><a class="header-anchor" href="#使用example查询"><span>使用Example查询</span></a></h2><p>Example查询（QBE）是一种用户友好的查询技术，具有简单的接口。 它允许动态创建查询，并且不需要您编写包含字段名称的查询。 实际上，Query by Example不要求您使用特定于存储的查询语言来编写查询。</p><p>Example API包括三部分:</p><ol><li>Probe(探测):域对象的实际实例</li><li>ExampleMatcher:ExampleMatcher包含有关如何匹配特定字段的详细信息。 它可以在多个示例中重用。</li><li>Example:Example包含Probe和ExampleMatcher。 它用于创建查询</li></ol><p>Example 适用于一下场景: . 使用一组静态或动态约束查询数据存储 . 频繁重构域对象，而不必担心破坏现有查询。 . 独立于底层数据存储API工作。</p><p>Example有如下限制:</p><ol><li>不支持嵌套或分组的属性约束,例如: <code>firstname = ?0 or (firstname = ?1 and lastname = ?2)</code></li><li>仅支持字符串的开始/包含/结束/正则表达式匹配,以及其他属性类型的精确匹配</li></ol><p>假如有如下实体:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Id</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> firstname<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> lastname<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>

  <span class="token comment">// … getters and setters omitted</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，将忽略具有空值的字段，并使用特定于存储的默认值匹配字符串。 可以使用工厂方法或使用ExampleMatcher构建Example.Example是不可变的。 以下清单显示了一个简单的示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span><span class="token function">setFirstname</span><span class="token punctuation">(</span><span class="token string">&quot;Dave&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Example</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> example <span class="token operator">=</span> <span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用Example,需要你自己的存储库继承QueryByExampleExecutor 接口</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">QueryByExampleExecutor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">S</span> <span class="token function">findOne</span><span class="token punctuation">(</span><span class="token class-name">Example</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> example<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">Example</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> example<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// … more functionality omitted.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Example不限于默认设置。 您可以使用ExampleMatcher为字符串匹配，空值处理和属性特定设置指定自己的默认值，如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span><span class="token function">setFirstname</span><span class="token punctuation">(</span><span class="token string">&quot;Dave&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">ExampleMatcher</span> matcher <span class="token operator">=</span> <span class="token class-name">ExampleMatcher</span><span class="token punctuation">.</span><span class="token function">matching</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">withIgnorePaths</span><span class="token punctuation">(</span><span class="token string">&quot;lastname&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">withIncludeNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">withStringMatcherEnding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Example</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> example <span class="token operator">=</span> <span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，ExampleMatcher期望上设置的Probe所有值都匹配。 如果要获得与隐式定义的任意一个predicate匹配的结果，请使用ExampleMatcher.matchingAny（）。</p><p>您可以为单个属性指定行为（例如“firstname”和“lastname”，或者对于嵌套属性，“address.city”）。 您可以使用匹配选项和区分大小写来调整它，如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ExampleMatcher</span> matcher <span class="token operator">=</span> <span class="token class-name">ExampleMatcher</span><span class="token punctuation">.</span><span class="token function">matching</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">withMatcher</span><span class="token punctuation">(</span><span class="token string">&quot;firstname&quot;</span><span class="token punctuation">,</span> <span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">withMatcher</span><span class="token punctuation">(</span><span class="token string">&quot;lastname&quot;</span><span class="token punctuation">,</span> <span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ignoreCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用lamada表达式</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ExampleMatcher</span> matcher <span class="token operator">=</span> <span class="token class-name">ExampleMatcher</span><span class="token punctuation">.</span><span class="token function">matching</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">withMatcher</span><span class="token punctuation">(</span><span class="token string">&quot;firstname&quot;</span><span class="token punctuation">,</span> match <span class="token operator">-&gt;</span> match<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">withMatcher</span><span class="token punctuation">(</span><span class="token string">&quot;firstname&quot;</span><span class="token punctuation">,</span> match <span class="token operator">-&gt;</span> match<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用Example</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PersonRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> … <span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonService</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Autowired</span> <span class="token class-name">PersonRepository</span> personRepository<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token function">findPeople</span><span class="token punctuation">(</span><span class="token class-name">Person</span> probe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> personRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>probe<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务"><span>事务</span></a></h2>`,242),r={href:"https://docs.spring.io/spring-data/data-jpa/docs/current/api/index.html?org/springframework/data/jpa/repository/support/SimpleJpaRepository.html",target:"_blank",rel:"noopener noreferrer"},d=a(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>timeout <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Further query method declarations</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更改事务行为的另一种方法是使用（通常）覆盖多个存储库的服务实现。 其目的是为非CRUD操作定义事务边界</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">class</span> <span class="token class-name">UserManagementImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserManagement</span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">UserRepository</span> userRepository<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RoleRepository</span> roleRepository<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Autowired</span>
  <span class="token keyword">public</span> <span class="token class-name">UserManagementImpl</span><span class="token punctuation">(</span><span class="token class-name">UserRepository</span> userRepository<span class="token punctuation">,</span>
    <span class="token class-name">RoleRepository</span> roleRepository<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>userRepository <span class="token operator">=</span> userRepository<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>roleRepository <span class="token operator">=</span> roleRepository<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Transactional</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addRoleToAllUsers</span><span class="token punctuation">(</span><span class="token class-name">String</span> roleName<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">Role</span> role <span class="token operator">=</span> roleRepository<span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span>roleName<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">User</span> user <span class="token operator">:</span> userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      user<span class="token punctuation">.</span><span class="token function">addRole</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">;</span>
      userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中,addRoleToAllUsers（）在事务内部运行（使用已有事务或创建新事务（如果没有已运行））。存储库中的事务配置会被忽略，因为外部事务配置确定所使用的实际配置.请注意，您必须激活&lt;tx：annotation-driven /&gt;或显式使用@EnableTransactionManagement以使基于注释的配置起作用。</p><h2 id="锁" tabindex="-1"><a class="header-anchor" href="#锁"><span>锁</span></a></h2><p>关于锁的介绍,请参考 <a href="JPA%E9%94%81.adoc">JPA锁</a></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Repository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token comment">// Plain query method</span>
  <span class="token annotation punctuation">@Lock</span><span class="token punctuation">(</span><span class="token class-name">LockModeType</span><span class="token punctuation">.</span><span class="token constant">READ</span><span class="token punctuation">)</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="auditing" tabindex="-1"><a class="header-anchor" href="#auditing"><span>Auditing</span></a></h2><p>Spring Data支持透明地跟踪创建或更改实体的人员以及更改发生的时间.要从该功能中受益，您必须为实体类配备审计元数据，该元数据可以使用注释或通过实现接口来定义。</p><p>我们提供@CreatedBy和@LastModifiedBy来捕获创建或修改实体的用户以及@CreatedDate和@LastModifiedDate以捕获更改发生的时间。例如:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@CreatedBy</span>
  <span class="token keyword">private</span> <span class="token class-name">User</span> user<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@CreatedDate</span>
  <span class="token keyword">private</span> <span class="token class-name">DateTime</span> createdDate<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您使用@CreatedBy或@LastModifiedBy，架构需要以某种方式了解当前主体。 为此，我们提供了一个<code>AuditorAware&lt;T&gt;</code>SPI接口，您必须实现该接口，以告知基础架构当前用户。 泛型类型T定义了使用@CreatedBy或@LastModifiedBy注释的属性的类型。</p><p>以下示例显示了使用Spring Security的<code>Authentication</code>s对象的接口的实现:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">SpringSecurityAuditorAware</span> <span class="token keyword">implements</span> <span class="token class-name">AuditorAware</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCurrentAuditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">SecurityContext</span><span class="token operator">::</span><span class="token function">getAuthentication</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span><span class="token operator">::</span><span class="token function">isAuthenticated</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span><span class="token operator">::</span><span class="token function">getPrincipal</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">::</span><span class="token function">cast</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring Data JPA附带了一个实体监听器，可用于触发审计信息的捕获。 首先，您必须注册AuditingEntityListener以用于orm.xml文件中持久性上下文中的所有实体，如以下示例所示：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>persistence-unit-metadata</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>persistence-unit-defaults</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entity-listeners</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entity-listener</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>….data.jpa.domain.support.AuditingEntityListener<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entity-listeners</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>persistence-unit-defaults</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>persistence-unit-metadata</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您还可以使用@EntityListeners批注在每个实体上启用AuditingEntityListener，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@EntityListeners</span><span class="token punctuation">(</span><span class="token class-name">AuditingEntityListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyEntity</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从Spring Data JPA 1.5开始，您可以通过使用@EnableJpaAuditing批注对配置类进行批注来启用审计。 您仍然必须修改orm.xml文件并在类路径上使用spring-aspects.jar。 以下示例显示如何使用@EnableJpaAuditing批注：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableJpaAuditing</span>
<span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">AuditorAware</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AuditableUser</span><span class="token punctuation">&gt;</span></span> <span class="token function">auditorProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AuditorAwareImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他注意事项" tabindex="-1"><a class="header-anchor" href="#其他注意事项"><span>其他注意事项</span></a></h2><h3 id="在自定义实现中使用jpacontext" tabindex="-1"><a class="header-anchor" href="#在自定义实现中使用jpacontext"><span>在自定义实现中使用<code>JpaContext</code></span></a></h3><p>当使用多个 EntityManager 实例和自定义存储库实现时，您需要将正确的 EntityManager 连接到存储库实现类中。 您可以通过在 @PersistenceContext 注释中显式命名 EntityManager 来实现，或者EntityManager 使用 @Qualifier 代替@Autowired。</p><p>从 Spring Data JPA 1.9 开始，Spring Data JPA 包含一个名为 JpaContext 的类，它允许您通过托管域类获取 EntityManager，假设应用程序中仅由一个 EntityManager 实例管理。 以下示例显示了如何在自定义存储库中使用 JpaContext：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">UserRepositoryImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserRepositoryCustom</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">EntityManager</span> em<span class="token punctuation">;</span>
  <span class="token annotation punctuation">@Autowired</span>
  <span class="token keyword">public</span> <span class="token class-name">UserRepositoryImpl</span><span class="token punctuation">(</span><span class="token class-name">JpaContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>em <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getEntityManagerByManagedType</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  …
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方法的优点是，如果域类型被分配给不同的持久性单元，则不必修改存储库来更改对持久性单元的引用。</p><h3 id="合并-persistence-units" tabindex="-1"><a class="header-anchor" href="#合并-persistence-units"><span>合并 persistence units</span></a></h3><p>Spring 支持拥有多个持久化单元。 然而，有时您可能希望对应用程序进行模块化，但仍要确保所有这些模块都在单个持久性单元中运行。 为了实现这种行为，Spring Data JPA 提供了 PersistenceUnitManager 实现，它根据名称自动合并持久性单元.</p><h1 id="附录" tabindex="-1"><a class="header-anchor" href="#附录"><span>附录</span></a></h1><ul><li>测试一对多查询</li><li>测试fetch查询的特点</li><li>测试级联保存</li><li>getOne的场景测试</li></ul>`,30);function k(m,v){const t=p("ExternalLinkIcon");return c(),o("div",null,[u,s("p",null,[n("默认情况下，存储库实例上的CRUD方法是事务性的。对于读取操作，事务配置readOnly标志设置为true。所有其他配置都使用普通的@Transactional，以便应用默认事务配置。 有关详细信息，请参阅 "),s("a",r,[n("SimpleJpaRepository的JavaDoc"),l(t)]),n(".如果需要调整存储库中声明的某个方法的事务配置，请重新声明存储库接口中的方法，如下所示:")]),d])}const y=e(i,[["render",k],["__file","spring-data-jpa.html.vue"]]),f=JSON.parse('{"path":"/Spring/spring-data-jpa.html","title":"Spring Data Repositories","lang":"zh-CN","frontmatter":{"description":"Spring Data Repositories Spring Data Repositories的目的就是减少数据访问层的样本代码,提高开发效率 核心概念 Spring Data Repositories抽象的核心接口是Repository(此接口是一个空接口,主要用作标记)。 它将域类以及域类的ID类型作为类型参数进行管理。CrudReposito...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/Spring/spring-data-jpa.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"Spring Data Repositories"}],["meta",{"property":"og:description","content":"Spring Data Repositories Spring Data Repositories的目的就是减少数据访问层的样本代码,提高开发效率 核心概念 Spring Data Repositories抽象的核心接口是Repository(此接口是一个空接口,主要用作标记)。 它将域类以及域类的ID类型作为类型参数进行管理。CrudReposito..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-12T07:52:04.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:modified_time","content":"2024-06-12T07:52:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Data Repositories\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-12T07:52:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"核心概念","slug":"核心概念","link":"#核心概念","children":[]},{"level":2,"title":"快速入门","slug":"快速入门","link":"#快速入门","children":[]},{"level":2,"title":"定义Repository接口","slug":"定义repository接口","link":"#定义repository接口","children":[{"level":3,"title":"spring的运行时非空检验","slug":"spring的运行时非空检验","link":"#spring的运行时非空检验","children":[]},{"level":3,"title":"多模块Repository","slug":"多模块repository","link":"#多模块repository","children":[]}]},{"level":2,"title":"定义查询方法","slug":"定义查询方法","link":"#定义查询方法","children":[{"level":3,"title":"查询策略","slug":"查询策略","link":"#查询策略","children":[]},{"level":3,"title":"方法查询","slug":"方法查询","link":"#方法查询","children":[]}]},{"level":2,"title":"自定义Repository","slug":"自定义repository","link":"#自定义repository","children":[]},{"level":2,"title":"聚合根发布事件","slug":"聚合根发布事件","link":"#聚合根发布事件","children":[]},{"level":2,"title":"spring data扩展","slug":"spring-data扩展","link":"#spring-data扩展","children":[{"level":3,"title":"Querydsl","slug":"querydsl","link":"#querydsl","children":[]},{"level":3,"title":"web支持","slug":"web支持","link":"#web支持","children":[]}]},{"level":2,"title":"非spring boot配置JPA","slug":"非spring-boot配置jpa","link":"#非spring-boot配置jpa","children":[{"level":3,"title":"启动模式","slug":"启动模式","link":"#启动模式","children":[]}]},{"level":2,"title":"持久化实体","slug":"持久化实体","link":"#持久化实体","children":[]},{"level":2,"title":"查询方法","slug":"查询方法","link":"#查询方法","children":[{"level":3,"title":"查询策略","slug":"查询策略-1","link":"#查询策略-1","children":[]},{"level":3,"title":"query method","slug":"query-method","link":"#query-method","children":[]}]},{"level":2,"title":"存储过程","slug":"存储过程","link":"#存储过程","children":[]},{"level":2,"title":"Specifications","slug":"specifications","link":"#specifications","children":[]},{"level":2,"title":"使用Example查询","slug":"使用example查询","link":"#使用example查询","children":[]},{"level":2,"title":"事务","slug":"事务","link":"#事务","children":[]},{"level":2,"title":"锁","slug":"锁","link":"#锁","children":[]},{"level":2,"title":"Auditing","slug":"auditing","link":"#auditing","children":[]},{"level":2,"title":"其他注意事项","slug":"其他注意事项","link":"#其他注意事项","children":[{"level":3,"title":"在自定义实现中使用JpaContext","slug":"在自定义实现中使用jpacontext","link":"#在自定义实现中使用jpacontext","children":[]},{"level":3,"title":"合并 persistence units","slug":"合并-persistence-units","link":"#合并-persistence-units","children":[]}]}],"git":{"createdTime":1713272527000,"updatedTime":1718178724000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":1}]},"readingTime":{"minutes":26.48,"words":7943},"filePathRelative":"Spring/spring-data-jpa.md","localizedDate":"2024年4月16日","excerpt":"\\n<p>Spring Data Repositories的目的就是减少数据访问层的样本代码,提高开发效率</p>\\n<h2>核心概念</h2>\\n<p>Spring Data Repositories抽象的核心接口是Repository(此接口是一个空接口,主要用作标记)。 它将域类以及域类的ID类型作为类型参数进行管理。CrudRepository是其扩展接口,为正在管理的实体类提供复杂的CRUD功能。</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">CrudRepository</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">,</span> ID <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">Serializable</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">Repository</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">,</span> ID<span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">S</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token class-name\\">S</span> <span class=\\"token function\\">save</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">S</span> entity<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token class-name\\">Optional</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">findById</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ID</span> primaryKey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token class-name\\">Iterable</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">findAll</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">long</span> <span class=\\"token function\\">count</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">delete</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">T</span> entity<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">existsById</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ID</span> primaryKey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// … more functionality omitted.</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{y as comp,f as data};
