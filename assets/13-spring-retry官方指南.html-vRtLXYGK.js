import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-7RQdUJPT.js";const e={},p=t(`<h1 id="快速入门" tabindex="-1"><a class="header-anchor" href="#快速入门"><span>快速入门</span></a></h1><p>spring retry有两种使用方式: 声明式和非声明式.</p><h2 id="声明式" tabindex="-1"><a class="header-anchor" href="#声明式"><span>声明式</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@Configuration</span>
	<span class="token annotation punctuation">@EnableRetry</span>
	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>

	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Service</span>
	<span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
	    <span class="token annotation punctuation">@Retryable</span><span class="token punctuation">(</span><span class="token class-name">RemoteAccessException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
	    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	        <span class="token comment">// ... do something</span>
	    <span class="token punctuation">}</span>
	    <span class="token annotation punctuation">@Recover</span>
	    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token class-name">RemoteAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	       <span class="token comment">// ... panic</span>
	    <span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>当调用service方法发生<code>RemoteAccessException</code>错误的时候,会发生重试(默认重试三次), 如果仍然处于失败状态, 则调用<code>recover</code>方法.</p></blockquote><p>@Retryable属性中有很多选项，例如: 包括和排除异常类型，重试次数、回退策略。</p><blockquote><p>使用前面显示的 @Retryable注释应用重试处理, 需要引入<code>spring-aop</code>包</p></blockquote><h2 id="非声明式" tabindex="-1"><a class="header-anchor" href="#非声明式"><span>非声明式</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
	<span class="token class-name">RetryTemplate</span> template <span class="token operator">=</span> <span class="token class-name">RetryTemplate</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">maxAttempts</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">fixedBackoff</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">retryOn</span><span class="token punctuation">(</span><span class="token class-name">RemoteAccessException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	template<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>ctx <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
	    <span class="token comment">// ... do something</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="特性和api" tabindex="-1"><a class="header-anchor" href="#特性和api"><span>特性和API</span></a></h1><h2 id="使用retrytemplate" tabindex="-1"><a class="header-anchor" href="#使用retrytemplate"><span>使用RetryTemplate</span></a></h2><p>RetryOperations 接口如下:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RetryOperations</span> <span class="token punctuation">{</span>
    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">RetryCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> retryCallback<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">RetryCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> retryCallback<span class="token punctuation">,</span> <span class="token class-name">RecoveryCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> recoveryCallback<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">RetryCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> retryCallback<span class="token punctuation">,</span> <span class="token class-name">RetryState</span> retryState<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">,</span> <span class="token class-name">ExhaustedRetryException</span><span class="token punctuation">;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">RetryCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> retryCallback<span class="token punctuation">,</span> <span class="token class-name">RecoveryCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> recoveryCallback<span class="token punctuation">,</span>
        <span class="token class-name">RetryState</span> retryState<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RetryCallback 一个简单的接口，可让您插入一些可能需要重试的业务逻辑：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RetryCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">T</span> <span class="token function">doWithRetry</span><span class="token punctuation">(</span><span class="token class-name">RetryContext</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RetryTemplate 是 RetryOperations 的实现, 下面展示了如何使用:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token class-name">RetryTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RetryTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">TimeoutRetryPolicy</span> policy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimeoutRetryPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
policy<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token number">30000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

template<span class="token punctuation">.</span><span class="token function">setRetryPolicy</span><span class="token punctuation">(</span>policy<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Foo</span> result <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RetryCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">Foo</span> <span class="token function">doWithRetry</span><span class="token punctuation">(</span><span class="token class-name">RetryContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Do stuff that might fail, e.g. webservice operation</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在前面的示例中，我们执行Web服务调用并将结果返回给用户。 如果该呼叫失败，则将重新进行直至到达超时。</p><p>我们也可以使用 Builder API构建代码:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token class-name">RetryTemplate</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">maxAttempts</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">exponentialBackoff</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">retryOn</span><span class="token punctuation">(</span><span class="token class-name">IOException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">traversingCauses</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">RetryTemplate</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">fixedBackoff</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">withinMillis</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">RetryTemplate</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">infiniteRetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">retryOn</span><span class="token punctuation">(</span><span class="token class-name">IOException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">uniformRandomBackoff</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-retrycontext" tabindex="-1"><a class="header-anchor" href="#使用-retrycontext"><span>使用 RetryContext</span></a></h2><p>重试的方法参数是RetryContext。 许多回调忽略了上下文。 但是，如有必要，您可以将其用作属性袋，以存储迭代期间的数据。</p><p>如果在同一线程中有嵌套的重试，则RetryContext具有父上下文。 父上下文有时对于存储需要在执行呼叫之间共享的数据很有用。</p><h2 id="使用-recoverycallback" tabindex="-1"><a class="header-anchor" href="#使用-recoverycallback"><span>使用 RecoveryCallback</span></a></h2><p>当重试耗尽时，重试可以将控件传递给其他回调：recoveryCallback。 要使用此功能，客户端可以将回调传递给相同的方法，如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Foo</span> foo <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RetryCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Foo</span> <span class="token function">doWithRetry</span><span class="token punctuation">(</span><span class="token class-name">RetryContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// business logic here</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">new</span> <span class="token class-name">RecoveryCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Foo</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token class-name">RetryContext</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
          <span class="token comment">// recover logic here</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果业务逻辑在模板决定中止之前没有成功，则会有机会通过恢复回调进行一些替代处理。</p><h1 id="无状态重试" tabindex="-1"><a class="header-anchor" href="#无状态重试"><span>无状态重试</span></a></h1><p>在最简单的情况下，重试只是一个段循环：RetryTemplate 可以继续尝试，直到成功或失败为止。RetryContext 包含一些状态，以确定是重试还是流产。 但是，这种状态在堆栈上，并且无需在全局任何地方存储它。 因此，我们称之为“无状态重试”。 RetryPolicy 包含无状态和状态重试之间的区别（重试将两者都可以处理）。 <strong>在无状态重试时，回调始终与重试失败时相同的线程执行</strong>。</p><h1 id="有状态重试" tabindex="-1"><a class="header-anchor" href="#有状态重试"><span>有状态重试</span></a></h1><p>如果失败导致事务性资源变得无效,则需要一些特殊的考量. 因为这做了数据库更新,尤其在使用Hibernate时.在这种情况下, 重新抛出异常使事务失效回滚,然后开启新的.</p><p>在这些情况下，无状态重试还不够好，因为re-throw和回滚必定会离开重试（Execute）方法，并可能失去堆栈上的上下文。为了避免失去上下文，我们必须引入一种存储策略，以将其从堆栈中提取，并将其（至少）放入堆存储中。 为此，Spring Retry提供了一种称为<code>RetryContextCache</code>的存储策略，您可以将其注入<code>RetryTemplate</code>。</p><p><code>RetryContextCache</code>的默认用Map实现。 它具有严格执行的最大容量，以避免内存泄漏，但没有任何高级缓存功能（例如Live的时间）。 您应该考虑注入具有这些功能的Map，如果需要这些功能。 对于在集群环境中具有多个进程的高级用法，您还可以考虑使用某种类型的集群缓存实现<code>RenryContextCache</code>。</p><p>重试的部分责任是确认失败的操作在新执行中（通常包裹在新的事务中）时。 为了促进这一点，Spring Retry 提供了<code>RetryState </code>抽象。</p><p>通过在重试的多个调用中识别状态来确定失败的操作。 为了识别状态，您可以提供一个负责返回标识该项目的唯一密钥的重试对象。 标识符用作<code>RetryContextCache</code>中的键。</p><h1 id="重试策略" tabindex="-1"><a class="header-anchor" href="#重试策略"><span>重试策略</span></a></h1><p><code>RetryTemplate </code>中,决定重试还是失败是由<code>RetryPolicy </code>决定的, 这也是<code>RetryContext</code>的工厂. <code>RetryTemplate</code>使用当前策略创建<code>RetryContext</code>并将其传入到<code>RetryCallback </code>方法上. 回调失败后, <code>RetryTemplate </code>必须要求 <code>RetryPolicy </code>更新状态(存储在<code>RetryContext</code>中).然后，它询问该策略是否可以进行另一次尝试。如果无法进行另一次尝试（例如，由于已经达到了限制或已检测到超时），则该策略还负责确定耗尽的状态 - 但不能用于处理异常。 在没有 <code>recover</code>方法的情况下, <code>retrytemplate</code>抛出原始异常。 在这种情况下，它会引发<code>RenryexhaustedException</code>。 您还可以在<code>RetryTemplate</code>中设置标志，以使其无条件地从回调中抛出原始异常。</p><p>Spring Renry提供了一些简单的通用实现，对无状态重试Policy（例如Simpleretrypolicy）和前面示例中使用的<code>TimeOutreTryPoLicy</code>。</p><p><code>SimplereTryPolicy</code>允许在任何命名的异常类型列表中固定次数的重试。 以下示例显示了如何使用它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Set the max attempts including the initial attempt before retrying</span>
<span class="token comment">// and retry on all exceptions (this is the default):</span>
<span class="token class-name">SimpleRetryPolicy</span> policy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleRetryPolicy</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Use the policy...</span>
<span class="token class-name">RetryTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RetryTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
template<span class="token punctuation">.</span><span class="token function">setRetryPolicy</span><span class="token punctuation">(</span>policy<span class="token punctuation">)</span><span class="token punctuation">;</span>
template<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RetryCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Foo</span> <span class="token function">doWithRetry</span><span class="token punctuation">(</span><span class="token class-name">RetryContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// business logic here</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一个更灵活的实现，称为exceptClassifierRetryPolicy。 它使您可以通过异常classifier抽象, 为不同的异常类型配置不同的重试行为。 该策略是通过调用分类器将异常转换为委托的Retrypolicy。</p><h1 id="回退策略" tabindex="-1"><a class="header-anchor" href="#回退策略"><span>回退策略</span></a></h1><p>在失败后重试时，通常会先等待一会儿，然后再尝试。 如果重试再次失败，则可以再延长点时间重试。 以下列表显示了<code>BackoffPolicy</code>接口的定义：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BackoffPolicy</span> <span class="token punctuation">{</span>

    <span class="token class-name">BackOffContext</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">RetryContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">backOff</span><span class="token punctuation">(</span><span class="token class-name">BackOffContext</span> backOffContext<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">BackOffInterruptedException</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>BackoffPolicy</code>可以用任何方式实现,spring retry 使用<code>Object.wait()</code> 实现. 一个常见的用例是逐步增加等待期，以避免两次重试抢锁和两者都失败. 对此,spring 提供了 <code>ExponentialBackoffPolicy </code>. spring 还提供了延时策略的随机版本.</p><h1 id="监听器" tabindex="-1"><a class="header-anchor" href="#监听器"><span>监听器</span></a></h1><p>RetryTemplate 可以注册 RetryListener 实列, RetryListener接口如下:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RetryListener</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token class-name">RetryContext</span> context<span class="token punctuation">,</span> <span class="token class-name">RetryCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token class-name">RetryContext</span> context<span class="token punctuation">,</span> <span class="token class-name">T</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">RetryContext</span> context<span class="token punctuation">,</span> <span class="token class-name">RetryCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> callback<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token class-name">RetryContext</span> context<span class="token punctuation">,</span> <span class="token class-name">RetryCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> callback<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
template<span class="token punctuation">.</span><span class="token function">registerListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodInvocationRetryListenerSupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token annotation punctuation">@Override</span>
      <span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">doClose</span><span class="token punctuation">(</span><span class="token class-name">RetryContext</span> context<span class="token punctuation">,</span>
          <span class="token class-name">MethodInvocationRetryCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> callback<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        monitoringTags<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>labelTagName<span class="token punctuation">,</span> callback<span class="token punctuation">.</span><span class="token function">getLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Method</span> method <span class="token operator">=</span> callback<span class="token punctuation">.</span><span class="token function">getInvocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        monitoringTags<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>classTagName<span class="token punctuation">,</span>
            method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        monitoringTags<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>methodTagName<span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// register a monitoring counter with appropriate tags</span>
        <span class="token comment">// ...</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">doOnSuccess</span><span class="token punctuation">(</span><span class="token class-name">RetryContext</span> context<span class="token punctuation">,</span>
                <span class="token class-name">MethodInvocationRetryCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> callback<span class="token punctuation">,</span> <span class="token class-name">T</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arguments <span class="token operator">=</span> callback<span class="token punctuation">.</span><span class="token function">getInvocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// decide whether the result for the given arguments should be accepted</span>
            <span class="token comment">// or retried according to the retry policy</span>
        <span class="token punctuation">}</span>

      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="声明式retry" tabindex="-1"><a class="header-anchor" href="#声明式retry"><span>声明式Retry</span></a></h1><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableRetry</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Service</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span> <span class="token keyword">public</span> <span class="token class-name">RetryListener</span> <span class="token function">retryListener1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RetryListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span> <span class="token keyword">public</span> <span class="token class-name">RetryListener</span> <span class="token function">retryListener2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RetryListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Service</span>
<span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Retryable</span><span class="token punctuation">(</span><span class="token class-name">RemoteAccessException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ... do something</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@Retryable 中的属性可以控制 RetryPolicy 和 BackoffPolicy</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Retryable</span><span class="token punctuation">(</span>maxAttempts<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span> backoff<span class="token operator">=</span><span class="token annotation punctuation">@Backoff</span><span class="token punctuation">(</span>delay<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> maxDelay<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ... do something</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面的示例会在100到500毫秒之间创建一个随机的backoff，最多12次尝试。 还有一个stateful属性（默认值：false）可以控制重试是否是有状态的。 要使用状态重试，拦截的方法必须具有参数，因为它们用于构建状态的缓存key。</p><p><code>@EnableRetry</code>注释还寻找<code>Sleeper </code>bean , RetryTemplate 和 拦截器中使用的其他策略，以控制运行时重试的行为。</p><p><code>@EnableRetry</code>注释为 <code>@Retryable</code> Bean创建代理，并且代理（即应用程序中的Bean实例）具有Retryable的接口。 这纯粹是标记接口，但对于其他希望应用重试建议的工具可能很有用（如果Bean已经可以重试，通常不应该打扰）。</p><p>如果您想在重试耗尽时提供恢复方法。 方法应与 <code>@Retryable</code>实例同一类声明，并标记为<code>@recover</code>。 返回类型必须匹配 <code>@Retryable</code>方法。 恢复方法的参数可以选择抛出的异常，（可选）传递给原始可重试方法的参数（或其中的部分列表）。 以下示例显示了如何做到的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Retryable</span><span class="token punctuation">(</span><span class="token class-name">RemoteAccessException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">String</span> str1<span class="token punctuation">,</span> <span class="token class-name">String</span> str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ... do something</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Recover</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token class-name">RemoteAccessException</span> e<span class="token punctuation">,</span> <span class="token class-name">String</span> str1<span class="token punctuation">,</span> <span class="token class-name">String</span> str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// ... error handling making use of original args if required</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>存在多个recover方法时，您可以明确指定恢复方法名称。 以下示例显示了如何做到的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Retryable</span><span class="token punctuation">(</span>recover <span class="token operator">=</span> <span class="token string">&quot;service1Recover&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token class-name">RemoteAccessException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service1</span><span class="token punctuation">(</span><span class="token class-name">String</span> str1<span class="token punctuation">,</span> <span class="token class-name">String</span> str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ... do something</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Retryable</span><span class="token punctuation">(</span>recover <span class="token operator">=</span> <span class="token string">&quot;service2Recover&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token class-name">RemoteAccessException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service2</span><span class="token punctuation">(</span><span class="token class-name">String</span> str1<span class="token punctuation">,</span> <span class="token class-name">String</span> str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ... do something</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Recover</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service1Recover</span><span class="token punctuation">(</span><span class="token class-name">RemoteAccessException</span> e<span class="token punctuation">,</span> <span class="token class-name">String</span> str1<span class="token punctuation">,</span> <span class="token class-name">String</span> str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ... error handling making use of original args if required</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Recover</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service2Recover</span><span class="token punctuation">(</span><span class="token class-name">RemoteAccessException</span> e<span class="token punctuation">,</span> <span class="token class-name">String</span> str1<span class="token punctuation">,</span> <span class="token class-name">String</span> str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ... error handling making use of original args if required</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.3.2 ,支持方法返回值上的泛型:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Retryable</span><span class="token punctuation">(</span><span class="token class-name">RemoteAccessException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thing1</span><span class="token punctuation">&gt;</span></span> <span class="token function">service1</span><span class="token punctuation">(</span><span class="token class-name">String</span> str1<span class="token punctuation">,</span> <span class="token class-name">String</span> str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ... do something</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Retryable</span><span class="token punctuation">(</span><span class="token class-name">RemoteAccessException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thing2</span><span class="token punctuation">&gt;</span></span> <span class="token function">service2</span><span class="token punctuation">(</span><span class="token class-name">String</span> str1<span class="token punctuation">,</span> <span class="token class-name">String</span> str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ... do something</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Recover</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thing1</span><span class="token punctuation">&gt;</span></span> <span class="token function">recover1</span><span class="token punctuation">(</span><span class="token class-name">RemoteAccessException</span> e<span class="token punctuation">,</span> <span class="token class-name">String</span> str1<span class="token punctuation">,</span> <span class="token class-name">String</span> str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// ... error handling for service1</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Recover</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thing2</span><span class="token punctuation">&gt;</span></span> <span class="token function">recover2</span><span class="token punctuation">(</span><span class="token class-name">RemoteAccessException</span> e<span class="token punctuation">,</span> <span class="token class-name">String</span> str1<span class="token punctuation">,</span> <span class="token class-name">String</span> str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// ... error handling for service2</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>版本1.2引入了对某些属性使用表达式的能力。 以下示例显示了如何使用表达式的方式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Retryable</span><span class="token punctuation">(</span>exceptionExpression<span class="token operator">=</span><span class="token string">&quot;message.contains(&#39;this can be retried&#39;)&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Retryable</span><span class="token punctuation">(</span>exceptionExpression<span class="token operator">=</span><span class="token string">&quot;message.contains(&#39;this can be retried&#39;)&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Retryable</span><span class="token punctuation">(</span>exceptionExpression<span class="token operator">=</span><span class="token string">&quot;@exceptionChecker.shouldRetry(#root)&quot;</span><span class="token punctuation">,</span>
    maxAttemptsExpression <span class="token operator">=</span> <span class="token string">&quot;#{@integerFiveBean}&quot;</span><span class="token punctuation">,</span>
  backoff <span class="token operator">=</span> <span class="token annotation punctuation">@Backoff</span><span class="token punctuation">(</span>delayExpression <span class="token operator">=</span> <span class="token string">&quot;#{1}&quot;</span><span class="token punctuation">,</span> maxDelayExpression <span class="token operator">=</span> <span class="token string">&quot;#{5}&quot;</span><span class="token punctuation">,</span> multiplierExpression <span class="token operator">=</span> <span class="token string">&quot;#{1.1}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表达式可以包含属性占位符, 例如 <code>#{\${max.delay}} 或 #{@exceptionChecker.\${retry.method}(#root)}</code>, 下面的规则被应用:</p><ul><li><code>exceptionExpression </code>将抛出的异常作为 #root对象</li><li><code>maxAttemptsExpression</code>和<code>@BackOff</code> 中的属性表达式再初始化时被评估一次, 他们没有根对象,根据引用的bean决定.</li></ul><h1 id="xml-配置" tabindex="-1"><a class="header-anchor" href="#xml-配置"><span>XML 配置</span></a></h1><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>transactional<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>execution(* com..*Service.remoteCall(..))<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>transactional<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>retryAdvice<span class="token punctuation">&quot;</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>-1<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>retryAdvice<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.retry.interceptor.RetryOperationsInterceptor<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,68),c=[p];function o(l,i){return s(),a("div",null,c)}const k=n(e,[["render",o],["__file","13-spring-retry官方指南.html.vue"]]),d=JSON.parse('{"path":"/gudie/13-spring-retry%E5%AE%98%E6%96%B9%E6%8C%87%E5%8D%97.html","title":"Spring Retry 指南","lang":"zh-CN","frontmatter":{"title":"Spring Retry 指南","date":"2024-04-20T00:00:00.000Z","categories":["java","spring"],"tags":["spring-retry"],"description":"快速入门 spring retry有两种使用方式: 声明式和非声明式. 声明式 当调用service方法发生RemoteAccessException错误的时候,会发生重试(默认重试三次), 如果仍然处于失败状态, 则调用recover方法. @Retryable属性中有很多选项，例如: 包括和排除异常类型，重试次数、回退策略。 使用前面显示的 @Re...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/gudie/13-spring-retry%E5%AE%98%E6%96%B9%E6%8C%87%E5%8D%97.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"Spring Retry 指南"}],["meta",{"property":"og:description","content":"快速入门 spring retry有两种使用方式: 声明式和非声明式. 声明式 当调用service方法发生RemoteAccessException错误的时候,会发生重试(默认重试三次), 如果仍然处于失败状态, 则调用recover方法. @Retryable属性中有很多选项，例如: 包括和排除异常类型，重试次数、回退策略。 使用前面显示的 @Re..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-24T08:19:31.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"spring-retry"}],["meta",{"property":"article:published_time","content":"2024-04-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-24T08:19:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Retry 指南\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-24T08:19:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"声明式","slug":"声明式","link":"#声明式","children":[]},{"level":2,"title":"非声明式","slug":"非声明式","link":"#非声明式","children":[]},{"level":2,"title":"使用RetryTemplate","slug":"使用retrytemplate","link":"#使用retrytemplate","children":[]},{"level":2,"title":"使用 RetryContext","slug":"使用-retrycontext","link":"#使用-retrycontext","children":[]},{"level":2,"title":"使用 RecoveryCallback","slug":"使用-recoverycallback","link":"#使用-recoverycallback","children":[]}],"git":{"createdTime":1713946771000,"updatedTime":1713946771000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":1}]},"readingTime":{"minutes":8.68,"words":2604},"filePathRelative":"gudie/13-spring-retry官方指南.md","localizedDate":"2024年4月20日","excerpt":"\\n<p>spring retry有两种使用方式: 声明式和非声明式.</p>\\n<h2>声明式</h2>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code>\\t<span class=\\"token annotation punctuation\\">@Configuration</span>\\n\\t<span class=\\"token annotation punctuation\\">@EnableRetry</span>\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Application</span> <span class=\\"token punctuation\\">{</span>\\n\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token annotation punctuation\\">@Service</span>\\n\\t<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Service</span> <span class=\\"token punctuation\\">{</span>\\n\\t    <span class=\\"token annotation punctuation\\">@Retryable</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">RemoteAccessException</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">)</span>\\n\\t    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">service</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t        <span class=\\"token comment\\">// ... do something</span>\\n\\t    <span class=\\"token punctuation\\">}</span>\\n\\t    <span class=\\"token annotation punctuation\\">@Recover</span>\\n\\t    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">recover</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">RemoteAccessException</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t       <span class=\\"token comment\\">// ... panic</span>\\n\\t    <span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
