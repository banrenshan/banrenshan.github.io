import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,a as t}from"./app-Brzzz3sI.js";const e={},p=t(`<h2 id="重复注解" tabindex="-1"><a class="header-anchor" href="#重复注解"><span>重复注解</span></a></h2><p>在 8 以前，同一个程序元素前最多只能有一个相同类型的注解；如果需要在同一个元素前使用多个相同类型的注解，则必须使用注解容器</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Authority</span> <span class="token punctuation">{</span>
     <span class="token class-name">String</span> <span class="token function">role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Authorities</span> <span class="token punctuation">{</span>     <span class="token comment">//@Authorities注解作为可以存储多个@Authority注解的容器</span>

    <span class="token class-name">Authority</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RepeatAnnotationUseOldVersion</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Authorities</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token annotation punctuation">@Authority</span><span class="token punctuation">(</span>role<span class="token operator">=</span><span class="token string">&quot;Admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token annotation punctuation">@Authority</span><span class="token punctuation">(</span>role<span class="token operator">=</span><span class="token string">&quot;Manager&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token function">publicvoiddoSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>java8 新增了重复注解，其使用方式为：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">Authorities</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Authority</span> <span class="token punctuation">{</span>
     <span class="token class-name">String</span> <span class="token function">role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Authorities</span> <span class="token punctuation">{</span>
    <span class="token class-name">Authority</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RepeatAnnotationUseNewVersion</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Authority</span><span class="token punctuation">(</span>role<span class="token operator">=</span><span class="token string">&quot;Admin&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Authority</span><span class="token punctuation">(</span>role<span class="token operator">=</span><span class="token string">&quot;Manager&quot;</span><span class="token punctuation">)</span>
    <span class="token function">publicvoiddoSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不同的地方是，创建重复注解<code>Authority</code>时，加上<code>@Repeatable</code>,指向存储注解<code>Authorities</code>，在使用时候，直接可以重复使用<code>Authority</code>注解。从上面例子看出，java 8里面做法更适合常规的思维，可读性强一点。但是，仍然需要定义容器注解。</p><p>两种方法获得的效果相同。重复注解知识一种简化写法，这种简化写法是一种假象：多个重复注解其实会被作为“容器”注解的value成员 的数组元素处理。</p><h2 id="类型注解" tabindex="-1"><a class="header-anchor" href="#类型注解"><span>类型注解</span></a></h2><p>Java8为<code>ElementType</code>枚举增加了<code>TYPE_PARAMETER</code>、<code>TYPE_USE</code>两个枚举值，从而可以使用<code>@Target(ElementType_TYPE_USE)</code>修饰注解定义，这种注解被称为类型注解，可以用在任何使用到类型的地方。</p><p>在java8以前，注解只能用在各种程序元素（定义类、定义接口、定义方法、定义成员变量…）上。从java8开始，类型注解可以用在任何使用到类型的地方。</p><ol><li><code>TYPE_PARAMETER</code>：表示该注解能写在类型参数的声明语句中。 类型参数声明如： <code>&lt;T&gt;</code>、<code>&lt;T extends Person&gt;</code></li><li><code>TYPE_USE</code>:表示注解可以在任何用到类型的地方使用，比如允许在如下位置使用： <ol><li>创建对象（用new关键字创建）</li><li>类型转换</li><li>使用implements实现接口 .使用throws声明抛出异常</li></ol></li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE_USE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@interface</span> <span class="token class-name">NotNull</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token comment">//定义类时使用</span>
<span class="token annotation punctuation">@NotNull</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TypeAnnotationTest</span>  <span class="token keyword">implements</span> <span class="token class-name">Serializable</span>    <span class="token comment">//在implements时使用</span>
<span class="token punctuation">{</span>
    <span class="token comment">//在方法形参中使用</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> <span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token keyword">throws</span> <span class="token annotation punctuation">@NotNull</span>  <span class="token class-name">FileNotFoundException</span> <span class="token comment">//在throws时使用</span>
 <span class="token punctuation">{</span>
       <span class="token class-name">Object</span>  obj<span class="token operator">=</span><span class="token string">&quot;fkjava.org&quot;</span><span class="token punctuation">;</span>
       <span class="token comment">//使用强制类型转换时使用</span>
       <span class="token class-name">String</span> str<span class="token operator">=</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> <span class="token class-name">String</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
       <span class="token comment">//创建对象时使用</span>
       <span class="token class-name">Object</span> win<span class="token operator">=</span><span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span><span class="token punctuation">)</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">&quot;疯狂软件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
  <span class="token comment">//泛型中使用</span>
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token annotation punctuation">@NotNull</span> <span class="token class-name">String</span><span class="token operator">&gt;</span> info<span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),o=[p];function c(i,l){return a(),s("div",null,o)}const k=n(e,[["render",c],["__file","java注解.html.vue"]]),d=JSON.parse('{"path":"/post/java%E6%B3%A8%E8%A7%A3.html","title":"Java 注解","lang":"zh-CN","frontmatter":{"title":"Java 注解","date":"2024-04-24T00:00:00.000Z","categories":["java"],"tags":["java","注解"],"description":"重复注解 在 8 以前，同一个程序元素前最多只能有一个相同类型的注解；如果需要在同一个元素前使用多个相同类型的注解，则必须使用注解容器 java8 新增了重复注解，其使用方式为： 不同的地方是，创建重复注解Authority时，加上@Repeatable,指向存储注解Authorities，在使用时候，直接可以重复使用Authority注解。从上面例子...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/post/java%E6%B3%A8%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"Java 注解"}],["meta",{"property":"og:description","content":"重复注解 在 8 以前，同一个程序元素前最多只能有一个相同类型的注解；如果需要在同一个元素前使用多个相同类型的注解，则必须使用注解容器 java8 新增了重复注解，其使用方式为： 不同的地方是，创建重复注解Authority时，加上@Repeatable,指向存储注解Authorities，在使用时候，直接可以重复使用Authority注解。从上面例子..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-24T12:16:57.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"注解"}],["meta",{"property":"article:published_time","content":"2024-04-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-24T12:16:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 注解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-24T12:16:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"重复注解","slug":"重复注解","link":"#重复注解","children":[]},{"level":2,"title":"类型注解","slug":"类型注解","link":"#类型注解","children":[]}],"git":{"createdTime":1713961017000,"updatedTime":1713961017000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":1}]},"readingTime":{"minutes":2,"words":601},"filePathRelative":"post/java注解.md","localizedDate":"2024年4月24日","excerpt":"<h2>重复注解</h2>\\n<p>在 8 以前，同一个程序元素前最多只能有一个相同类型的注解；如果需要在同一个元素前使用多个相同类型的注解，则必须使用注解容器</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token annotation punctuation\\">@interface</span> <span class=\\"token class-name\\">Authority</span> <span class=\\"token punctuation\\">{</span>\\n     <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">role</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token annotation punctuation\\">@interface</span> <span class=\\"token class-name\\">Authorities</span> <span class=\\"token punctuation\\">{</span>     <span class=\\"token comment\\">//@Authorities注解作为可以存储多个@Authority注解的容器</span>\\n\\n    <span class=\\"token class-name\\">Authority</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token function\\">value</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">RepeatAnnotationUseOldVersion</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token annotation punctuation\\">@Authorities</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span><span class=\\"token annotation punctuation\\">@Authority</span><span class=\\"token punctuation\\">(</span>role<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"Admin\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span><span class=\\"token annotation punctuation\\">@Authority</span><span class=\\"token punctuation\\">(</span>role<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"Manager\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token function\\">publicvoiddoSomeThing</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
