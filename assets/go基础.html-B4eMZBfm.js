import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-DMMI-IL5.js";const e={},p=t(`<h1 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h1><h2 id="变量声明" tabindex="-1"><a class="header-anchor" href="#变量声明"><span>变量声明</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> 变量名 类型 <span class="token operator">=</span> 表达式
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Go语言中定义的变量必须使用，否则无法编译通过。</p><p>Go语言具有类型推导功能，所以不需要刻意地指定变量的类型：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你也可以一次声明多个变量，把要声明的多个变量放到一个括号中即可:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> <span class="token punctuation">(</span>
  i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span> 
  k <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>方法中</code>还可以进一步简化变量声明：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>i<span class="token operator">:=</span><span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="简单变量类型" tabindex="-1"><a class="header-anchor" href="#简单变量类型"><span>简单变量类型</span></a></h2><p>基础类型有整型、浮点型、布尔型和字符串. 空对象应 <code>nil</code> 表示</p><h3 id="整型" tabindex="-1"><a class="header-anchor" href="#整型"><span>整型</span></a></h3><ul><li><p>有符号整型：如<code>int</code>、<code>int8</code>、<code>int16</code>、<code>int32</code>和<code>int64</code>。</p></li><li><p>无符号整型：如<code>uint</code>、<code>uint8</code>、<code>uint16</code>、<code>uint32</code>和<code>uint64</code></p></li></ul><blockquote><p>有符号整型表示的数值可以为负数、零和正数，而无符号整型只能为零和正数。</p></blockquote><p>除了有用<code>位(bit)大小</code>表示的整型外，还有<code>int</code>和<code>uint</code>这两个没有具体位大小的整型，它们的大小可能是32位，也可能是64位，与硬件设备CPU有关。在整型中，如果能确定int的位就选择比较明确的int类型，因为这会让你的程序具备很好的可移植性。</p><p>在Go语言中，还有一种<code>字节(byte)类型</code>，它其实等价于uint8类型，可以理解为uint8类型的别名，用于定义一个字节，所以字节(byte)类型也属于整型。</p><h3 id="浮点型" tabindex="-1"><a class="header-anchor" href="#浮点型"><span>浮点型</span></a></h3><p>Go语言提供了两种精度的浮点数，分别是<code>float32</code>和 <code>float64</code>。项目中最常用的是f loat64，因为它的精度高，浮点计算的结果相比f loat32误差会更小。</p><h3 id="布尔型" tabindex="-1"><a class="header-anchor" href="#布尔型"><span>布尔型</span></a></h3><p>布尔型的值只有两种：true和false ，使用关键字<code>bool</code>定义</p><p>布尔值可以用于一元操作符<code>!</code>，该操作符表示逻辑非的意思，也可以用于二元操作符<code>&amp;&amp;</code>和<code>||</code>，它们分别表示逻辑与和逻辑或。</p><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h3><p>字符串使用双引号包裹。使用<code>string</code>关键字定义 。<code>+</code> 拼接字符串</p><h3 id="零值" tabindex="-1"><a class="header-anchor" href="#零值"><span>零值</span></a></h3><p>在Go语言中，如果我们声明了一个变量，但是没有对其进行初始化，那么Go语言会自动将其值初始化为对应类型的零值。比如数字类型的零值是0，布尔型的零值是false，字符串的零值是空字符串(<code>&quot;&quot;</code>)等。</p><h2 id="复杂变量类型" tabindex="-1"><a class="header-anchor" href="#复杂变量类型"><span>复杂变量类型</span></a></h2><h3 id="指针" tabindex="-1"><a class="header-anchor" href="#指针"><span>指针</span></a></h3><p>指针的值就是变量的内存地址。通过＆可以获取一个变量的地址，也就是指针。</p><p>在以下代码中，pi就是指向变量i的指针。要想获得指针pi指向的变量值，使用*pi这个表达式即可。尝试运行这段程序，会看到输出结果与变量i的值一样。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>pi<span class="token operator">:=</span><span class="token operator">&amp;</span>i
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>pi<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h3><p>声明数组：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token comment">// 输出结果：</span>
<span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>声明并初始化数组：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	<span class="token keyword">var</span> arr2 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment">// [1 2 3]</span>

	arr3 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span> <span class="token comment">//[1 2 3]</span>

	arr4 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span> <span class="token comment">// 自动推导数组长度</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token comment">//[1 2 3]</span>

	arr5 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span> <span class="token comment">//指定索引位初始化</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr5<span class="token punctuation">)</span><span class="token comment">//[0 2 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用传统的for循环遍历数组， 但是go 提供了更简单的 <code>for range</code> 语法</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	arr5 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>
	<span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> arr5 <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token string">&quot;:&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="切片" tabindex="-1"><a class="header-anchor" href="#切片"><span>切片</span></a></h3><p>切片(Slice)与数组类似，可以把它理解为动态数组。切片是基于数组实现的，它的底层就是数组。切片是一个具备三个字段的数据结构，分别是指向数组的指针data、长度len和容量cap。</p><h4 id="基于数组创建切片" tabindex="-1"><a class="header-anchor" href="#基于数组创建切片"><span>基于数组创建切片</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>slice<span class="token operator">:=</span>array<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span> <span class="token comment">//左闭右开</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果省略start，那么start的值默认为0，如果省略end，那么end的默认值为数组的长度</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	arr4 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>
	a <span class="token operator">:=</span> arr4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">//[2 3]</span>
	a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span> <span class="token comment">//[1 2 10 4 5 6]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于数组的切片使用的底层数组还是原来的数组，一旦修改切片的元素值，那么底层数组对应的值也会被修改。</p><blockquote><p>在创建新切片的时候，最好是让新切片的长度和容量一样，这样在追加操作的时候就会生成新的底层数组，从而与原有数组分离，就不会因为共用底层数组，导致修改内容的时候影响多个切片。</p></blockquote><h4 id="切片的声明" tabindex="-1"><a class="header-anchor" href="#切片的声明"><span>切片的声明</span></a></h4><p>除了可以从一个数组得到切片外，还可以声明切片，比较简单的是使用make函数。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	sli <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment">// 声明长度为4，容量为8的切片</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sli<span class="token punctuation">)</span> <span class="token comment">//[0 0 0 0]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当通过append函数往切片中追加元素的时候，会追加到空闲的内存上，当切片的长度要超过容量的时候会进行扩容。</p><p>切片不仅可以通过make函数声明，也可以通过字面量的方式声明和初始化：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	cc <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//5 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过字面量初始化的切片，其长度和容量相同。</p><h4 id="其他操作" tabindex="-1"><a class="header-anchor" href="#其他操作"><span>其他操作</span></a></h4><p>切片的循环同数组一模一样，常用的也是for range方式</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	cc <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
	dd <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token comment">// 添加元素  </span>

	<span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> dd <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span> <span class="token comment">//[1 2 3 4 5]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="string和-byte" tabindex="-1"><a class="header-anchor" href="#string和-byte"><span>string和[]byte</span></a></h4><p>字符串string也是一个不可变的字节序列，所以可以直接转为字节切片[]byte：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	s <span class="token operator">:=</span> <span class="token string">&quot;我爱美女&quot;</span>
	bs <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//12</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在UTF8编码下，一个汉字对应三个字节。如果你想把一个汉字当成一个长度计算，可以使用utf8.RuneCountInString函数：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>s <span class="token operator">:=</span> <span class="token string">&quot;我爱美女&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>utf8<span class="token punctuation">.</span><span class="token function">RuneCountInString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串也可以被 for range 循环：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>s <span class="token operator">:=</span> <span class="token string">&quot;我爱美女&quot;</span>	
<span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>上面的汉字不能被正常打印出来，v打印对应的Unicode码点</p></blockquote><h3 id="map" tabindex="-1"><a class="header-anchor" href="#map"><span>Map</span></a></h3><p>映射(Map)是一个无序的K-V（键值对）集合，结构为map[K]V。其中K对应Key，V对应Value。map中所有的Key必须具有相同的类型，Value也一样，但Key和Value的类型可以不同。此外，Key的类型必须支持<code>==</code>比较运算符，这样才可以判断它是否存在，并保证Key的唯一性。</p><h4 id="创建和初始化map" tabindex="-1"><a class="header-anchor" href="#创建和初始化map"><span>创建和初始化map</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">// make 函数创建</span>
	m<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>

	m2 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;zzq&quot;</span><span class="token punctuation">}</span> <span class="token comment">// 字面量创建</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>map可以获取不存在的K-V键值对，如果Key不存在，返回的Value是该类型的零值。所以在很多时候，我们需要先判断map中的Key是否存在。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	m2 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token number">110</span><span class="token punctuation">}</span>

	v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> m2<span class="token punctuation">[</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">]</span>
	<span class="token keyword">if</span> ok <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;no value&quot;</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token comment">// no value 0</span>
	<span class="token punctuation">}</span>

	m2<span class="token punctuation">[</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
	v2<span class="token punctuation">,</span> ok <span class="token operator">:=</span> m2<span class="token punctuation">[</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">]</span>
	<span class="token keyword">if</span> ok <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span> <span class="token comment">//  0</span>
	<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>换成字符串：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	m2 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;110&quot;</span><span class="token punctuation">}</span>

	v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> m2<span class="token punctuation">[</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">]</span>
	<span class="token keyword">if</span> ok <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;no value&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	m2<span class="token punctuation">[</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
	v2<span class="token punctuation">,</span> ok <span class="token operator">:=</span> m2<span class="token punctuation">[</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">]</span>
	<span class="token keyword">if</span> ok <span class="token punctuation">{</span> <span class="token comment">// 条件不成立</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>map的遍历同样使用for range循环。需要注意的是map的遍历是无序的，也就是说每次遍历的键值对顺序可能会不一样。如果想按顺序遍历，可以先获取所有的Key，并对Key排序，然后根据排序好的Key获取对应的Value。</p><h2 id="常量" tabindex="-1"><a class="header-anchor" href="#常量"><span>常量</span></a></h2><p>常量的值是在编译期就确定好的，一旦确定好之后就不能被修改，这样可以防止在运行期被恶意篡改。</p><p>常量的定义和变量类似，只不过它的关键字是<code>const</code></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	<span class="token keyword">const</span> i<span class="token operator">=</span><span class="token number">10</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>只允许布尔型、字符串、数字类型这些基础类型作为常量</p></blockquote><h3 id="iota" tabindex="-1"><a class="header-anchor" href="#iota"><span>iota</span></a></h3><p>iota是一个常量生成器，它可以用来初始化相似规则的常量，避免重复地初始化。假设我们要定义one、two、three和four四个常量，对应的值分别是1、2、3和4，如果不使用iota，则需要按照如下代码的方式定义：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
 	one<span class="token operator">=</span><span class="token number">1</span>
  two<span class="token operator">=</span><span class="token number">2</span>
  three<span class="token operator">=</span><span class="token number">3</span>
  four<span class="token operator">=</span><span class="token number">4</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上声明都要初始化，会比较烦琐，因为这些常量是有规律的（连续的数字），所以可以使用iota进行声明，如下所示：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
	one <span class="token operator">=</span> <span class="token boolean">iota</span><span class="token operator">+</span><span class="token number">1</span>
  two
  three
  four
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>iota的初始值是0，它的能力就是在每一个有常量声明的行后面加1 。</p><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换"><span>类型转换</span></a></h2><p>Go语言是强类型语言，也就是说不同类型的变量是无法相互使用和计算的。使用前，需要进行类型转换。</p><p>字符串和数字转换：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	i <span class="token operator">:=</span> <span class="token number">10</span>
	s <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// 数字转字符串</span>
	i<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">//字符串转数字</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串和bool转换：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>strconv<span class="token punctuation">.</span><span class="token function">FormatBool</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
	d<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseBool</span><span class="token punctuation">(</span><span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>float和字符串转换：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 第二参数， 指定转换的格式 ， f: 浮点型 ， e：科学计数法</span>
<span class="token comment">// 第三个参数，指定转换的字符串精度</span>
<span class="token comment">// 第四个参数可以是 32 或64 ，表示转换成 float32 还是 float64</span>
strconv<span class="token punctuation">.</span><span class="token function">FormatFloat</span><span class="token punctuation">(</span><span class="token number">1.234</span><span class="token punctuation">,</span> <span class="token char">&#39;f&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token comment">// 1.23400</span>

m<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;1.234&quot;</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token comment">//第二个参数可以是 32 或64 ，表示转换成 float32 还是 float64</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于数字类型之间，则可以使用强制转换的方式：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>m<span class="token operator">:=</span><span class="token function">float64</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
n<span class="token operator">:=</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token number">12.34</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>采用强制转换的方式转换数字类型，可能会丢失一些精度，比如浮点型转为整型时，小数点部分会全部丢失</p><h1 id="控制结构" tabindex="-1"><a class="header-anchor" href="#控制结构"><span>控制结构</span></a></h1><h2 id="if语句" tabindex="-1"><a class="header-anchor" href="#if语句"><span>if语句</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	i <span class="token operator">:=</span> <span class="token number">10</span>
	<span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">90</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;优秀&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">60</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;及格&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;垃圾&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与其他编程语言不同，在Go语言的if语句中，可以有一个简单的表达式语句，并且该语句和条件语句之间使用分号分开</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	<span class="token keyword">if</span> i <span class="token operator">:=</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">90</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;优秀&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">60</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;及格&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;垃圾&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：i的作用域仅限于整个 if else 控制结构</p></blockquote><h2 id="swith语句" tabindex="-1"><a class="header-anchor" href="#swith语句"><span>swith语句</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	i <span class="token operator">:=</span> <span class="token number">10</span>
	<span class="token keyword">switch</span> i <span class="token punctuation">{</span>

	<span class="token keyword">case</span> <span class="token number">90</span><span class="token punctuation">:</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;优秀&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token number">60</span><span class="token punctuation">:</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;及格&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;垃圾&quot;</span><span class="token punctuation">)</span>

	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>switch语句也可以用一个简单的语句来做初始化，同样也是用分号分隔。每一个case就是一个分支，分支条件为true时该分支才会执行:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	<span class="token keyword">switch</span> i <span class="token operator">:=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token punctuation">{</span>

	<span class="token keyword">case</span> i <span class="token operator">&gt;</span> <span class="token number">90</span><span class="token punctuation">:</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;优秀&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> i <span class="token operator">&gt;</span> <span class="token number">60</span><span class="token punctuation">:</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;及格&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;垃圾&quot;</span><span class="token punctuation">)</span>

	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Go语言中，对switch的case从上到下逐一进行判断，一旦满足条件，就立即执行对应的分支并返回，其余分支不再做判断。也就是说在默认情况下，Go语言中switch的case最后自带break。</p><p>那么如果你的确需要执行下一个紧跟的case，该怎么办呢？Go语言也考虑到了，它提供了fallthrough关键字。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	<span class="token keyword">switch</span> i <span class="token operator">:=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token punctuation">{</span>

	<span class="token keyword">case</span> i <span class="token operator">&gt;</span> <span class="token number">90</span><span class="token punctuation">:</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;优秀&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">fallthrough</span>
	<span class="token keyword">case</span> i <span class="token operator">&gt;</span> <span class="token number">60</span><span class="token punctuation">:</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;及格&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;垃圾&quot;</span><span class="token punctuation">)</span>

	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="for-循环语句" tabindex="-1"><a class="header-anchor" href="#for-循环语句"><span>for 循环语句</span></a></h2><p>在Go语言中，同样支持使用continue、break来控制for循环：</p><ul><li>continue可以跳出本次循环，继续执行下一个循环。</li><li>break可以跳出整个for循环，哪怕for循环没有执行完，也会强制终止。</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	sum <span class="token operator">:=</span> <span class="token number">0</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		sum <span class="token operator">+=</span> i
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h1><p>函数的声明格式：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">funcName</span><span class="token punctuation">(</span>paramsList<span class="token punctuation">)</span> resultList<span class="token punctuation">{</span>
  body<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>函数的参数params，用来定义形参的变量名和类型，可以有一个参数，也可以有多个，也可以没有。</p></li><li><p>result用于定义返回值的类型，如果没有返回值，省略即可，也可以有多个返回值。</p></li></ul><h2 id="简单函数" tabindex="-1"><a class="header-anchor" href="#简单函数"><span>简单函数</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">sumInt</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数类型一样的时候，可以简写：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">sumInt2</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多返回值：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">return</span> b<span class="token punctuation">,</span>a
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回值参数也可以定义名称：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">swap2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	m <span class="token operator">=</span> a
	n <span class="token operator">=</span> b
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="可变参数" tabindex="-1"><a class="header-anchor" href="#可变参数"><span>可变参数</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">sumAll</span><span class="token punctuation">(</span>a <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	num <span class="token operator">:=</span> <span class="token number">0</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span>
		num <span class="token operator">+=</span> v
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> num
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="包级别函数" tabindex="-1"><a class="header-anchor" href="#包级别函数"><span>包级别函数</span></a></h2><ul><li>函数名称首字母小写代表私有函数，只有在同一个包中才可以被调用。</li><li>函数名称首字母大写代表公有函数，在不同的包中也可以被调用。</li><li>任何一个函数都会从属于一个包。</li></ul><h2 id="匿名函数和闭包" tabindex="-1"><a class="header-anchor" href="#匿名函数和闭包"><span>匿名函数和闭包</span></a></h2><p>匿名函数：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	sum <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> a <span class="token operator">+</span> b
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了匿名函数，就可以在函数中再定义函数（函数嵌套），定义的这个匿名函数也可以被称为内部函数。更重要的是，在函数内定义的内部函数，可以使用外部函数的变量等，这种方式也称为闭包:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">returnFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>

	v <span class="token operator">:=</span> <span class="token number">10</span>
	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> v
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="工具包" tabindex="-1"><a class="header-anchor" href="#工具包"><span>工具包</span></a></h1><h2 id="strings包" tabindex="-1"><a class="header-anchor" href="#strings包"><span>strings包</span></a></h2><p>Go SDK为我们提供的一个标准包<code>strings</code>。它是用于处理字符串的工具包，里面有很多常用的函数，帮助我们对字符串进行操作，比如查找字符串、去除字符串的空格、拆分字符串、判断字符串是否有某个前缀或者后缀等</p>`,136),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","go基础.html.vue"]]),k=JSON.parse('{"path":"/Go/go%E5%9F%BA%E7%A1%80.html","title":"Go 基础","lang":"zh-CN","frontmatter":{"title":"Go 基础","date":"2024-04-24T00:00:00.000Z","tags":["Go"],"categories":["Go"],"description":"数据类型 变量声明 Go语言中定义的变量必须使用，否则无法编译通过。 Go语言具有类型推导功能，所以不需要刻意地指定变量的类型： 你也可以一次声明多个变量，把要声明的多个变量放到一个括号中即可: 在方法中还可以进一步简化变量声明： 简单变量类型 基础类型有整型、浮点型、布尔型和字符串. 空对象应 nil 表示 整型 有符号整型：如int、int8、in...","head":[["meta",{"property":"og:url","content":"https://banrenshan.github.io/Go/go%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"心之所向，素履以往"}],["meta",{"property":"og:title","content":"Go 基础"}],["meta",{"property":"og:description","content":"数据类型 变量声明 Go语言中定义的变量必须使用，否则无法编译通过。 Go语言具有类型推导功能，所以不需要刻意地指定变量的类型： 你也可以一次声明多个变量，把要声明的多个变量放到一个括号中即可: 在方法中还可以进一步简化变量声明： 简单变量类型 基础类型有整型、浮点型、布尔型和字符串. 空对象应 nil 表示 整型 有符号整型：如int、int8、in..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-24T08:19:31.000Z"}],["meta",{"property":"article:author","content":"banrenshan"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:published_time","content":"2024-04-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-24T08:19:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go 基础\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-24T08:19:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"banrenshan\\",\\"url\\":\\"https://github.com/banrenshan\\"}]}"]]},"headers":[{"level":2,"title":"变量声明","slug":"变量声明","link":"#变量声明","children":[]},{"level":2,"title":"简单变量类型","slug":"简单变量类型","link":"#简单变量类型","children":[{"level":3,"title":"整型","slug":"整型","link":"#整型","children":[]},{"level":3,"title":"浮点型","slug":"浮点型","link":"#浮点型","children":[]},{"level":3,"title":"布尔型","slug":"布尔型","link":"#布尔型","children":[]},{"level":3,"title":"字符串","slug":"字符串","link":"#字符串","children":[]},{"level":3,"title":"零值","slug":"零值","link":"#零值","children":[]}]},{"level":2,"title":"复杂变量类型","slug":"复杂变量类型","link":"#复杂变量类型","children":[{"level":3,"title":"指针","slug":"指针","link":"#指针","children":[]},{"level":3,"title":"数组","slug":"数组","link":"#数组","children":[]},{"level":3,"title":"切片","slug":"切片","link":"#切片","children":[]},{"level":3,"title":"Map","slug":"map","link":"#map","children":[]}]},{"level":2,"title":"常量","slug":"常量","link":"#常量","children":[{"level":3,"title":"iota","slug":"iota","link":"#iota","children":[]}]},{"level":2,"title":"类型转换","slug":"类型转换","link":"#类型转换","children":[]},{"level":2,"title":"if语句","slug":"if语句","link":"#if语句","children":[]},{"level":2,"title":"swith语句","slug":"swith语句","link":"#swith语句","children":[]},{"level":2,"title":"for 循环语句","slug":"for-循环语句","link":"#for-循环语句","children":[]},{"level":2,"title":"简单函数","slug":"简单函数","link":"#简单函数","children":[]},{"level":2,"title":"可变参数","slug":"可变参数","link":"#可变参数","children":[]},{"level":2,"title":"包级别函数","slug":"包级别函数","link":"#包级别函数","children":[]},{"level":2,"title":"匿名函数和闭包","slug":"匿名函数和闭包","link":"#匿名函数和闭包","children":[]},{"level":2,"title":"strings包","slug":"strings包","link":"#strings包","children":[]}],"git":{"createdTime":1713946771000,"updatedTime":1713946771000,"contributors":[{"name":"banrenshan","email":"CP_zhaozhiqiang@163.com","commits":1}]},"readingTime":{"minutes":10.95,"words":3285},"filePathRelative":"Go/go基础.md","localizedDate":"2024年4月24日","excerpt":"\\n<h2>变量声明</h2>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">var</span> 变量名 类型 <span class=\\"token operator\\">=</span> 表达式\\n</code></pre></div><p>Go语言中定义的变量必须使用，否则无法编译通过。</p>\\n<p>Go语言具有类型推导功能，所以不需要刻意地指定变量的类型：</p>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">var</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">10</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
